{"version":3,"file":"arc-unobtrusive-validation.js","mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD,O;;;;;;;;;;;;;;;;;;;;ACVsD;AACK;AACN;AACrD;AACA;AACA;AACA;AACA;AACA,wBAAwB,8EAAsC;AAC9D;AACA;AACA;AACA;AACA,4BAA4B,4DAAmB;AAC/C;AACA;AACA;AACA,wBAAwB,8EAAsC;AAC9D;AACA,4BAA4B,iEAAwB;AACpD;AACA;AACA;AACA;AACA;AACA,wBAAwB,iEAAsB,+BAA+B,gBAAgB;AAC7F;AACA,4BAA4B,sEAA8B;AAC1D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+CAA+C,0BAA0B;AACzE,gCAAgC,sEAA8B;AAC9D;AACA;AACA,8EAA8E,uCAAuC;AACrH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oCAAoC;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACsE;;;;;;;;;;;;;;;;;;ACvFX;AAChB;AAC3C,aAAa,wDAAU,CAAC,gEAAuB;AAC7B;;;;;;;;;;;;;;;;;;;ACHoD;AACtB;AACU;AACnD;AACP;AACA;AACA;AACA;AACA,gCAAgC,kFAA2B;AAC3D;AACA,mBAAmB,uEAAqB,KAAK,wDAAQ;AACrD;AACA;AACA;;;;;;;;;;;;;;;;;;ACbuD;AACI;AAC3D;AACA;AACA,mCAAmC,iEAAwB;AAC3D,4BAA4B,kFAA2C;AACvE;AACA,wCAAwC,wEAA+B;AACvE,+BAA+B,iEAAwB;AACvD;AACA;AACA;AACsB;;;;;;;;;;;;;;;;ACZtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACgC;;;;;;;;;;;;;;;;;;ACT8C;AAC9C;AACjC;AACA;AACA,kBAAkB,6CAAE;AACpB;AACA;AACA;AACA,oBAAoB,qEAAe;AACnC,+CAA+C;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2CAA2C,sEAAgB;AAC3D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACkB;;;;;;;;;;;;;;;;ACnCZ;AACP;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACJO;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACP;AACA;AACA;AACA;AACO;AACA;AACA;AACA;AACA;AACA;AACA,oCAAoC;AACpC;AACP;AACO;AACP;AACO;AACP;AACA,qBAAqB,uBAAuB;AAC5C;AACA;AACA;AACA;AACA;AACO;AACP;AACO;AACP;AACO;AACP;AACO;AACP;AACO;AACA;AACA;AACA,4DAA4D;AAC5D,yDAAyD;AACzD,6DAA6D;AAC7D;AACP;AACA;AACA;AACO;;;;;;;;;;;;;;;;;;ACnDP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAC6D;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACpBtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACtBP,gBAAgB,SAAI,IAAI,SAAI;AAC5B;AACA,iDAAiD,OAAO;AACxD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,SAAI,IAAI,SAAI;AAC7B,4BAA4B,+DAA+D,iBAAiB;AAC5G;AACA,oCAAoC,MAAM,+BAA+B,YAAY;AACrF,mCAAmC,MAAM,mCAAmC,YAAY;AACxF,gCAAgC;AAChC;AACA,KAAK;AACL;AACA,mBAAmB,SAAI,IAAI,SAAI;AAC/B,cAAc,6BAA6B,0BAA0B,cAAc,qBAAqB;AACxG,iBAAiB,oDAAoD,qEAAqE,cAAc;AACxJ,uBAAuB,sBAAsB;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA,wCAAwC;AACxC,mCAAmC,SAAS;AAC5C,mCAAmC,WAAW,UAAU;AACxD,0CAA0C,cAAc;AACxD;AACA,8GAA8G,OAAO;AACrH,iFAAiF,iBAAiB;AAClG,yDAAyD,gBAAgB,QAAQ;AACjF,+CAA+C,gBAAgB,gBAAgB;AAC/E;AACA,kCAAkC;AAClC;AACA;AACA,UAAU,YAAY,aAAa,SAAS,UAAU;AACtD,oCAAoC,SAAS;AAC7C;AACA;AACA,qBAAqB,SAAI,IAAI,SAAI;AACjC,6EAA6E,OAAO;AACpF;AACA;AACA;AACA;AACA;AACA;AACA;AAC8C;AACQ;AACwB;AACnB;AACE;AACuB;AACnC;AACa;AACS;AACtC;AACqC;AACb;AACvB;AACgC;AAClE;AACA;AACA;AACA;AACA,iCAAiC,sFAA8C;AAC/E;AACA;AACA,mCAAmC,sEAAgB;AACnD;AACA,0CAA0C,sEAAgB;AAC1D,qCAAqC,sEAAgB;AACrD,qCAAqC,sEAAgB;AACrD,iCAAiC,0FAAkD;AACnF;AACA;AACA;AACA;AACA;AACA,iCAAiC,iGAAyD;AAC1F;AACA;AACA;AACA;AACA;AACA,iCAAiC,4FAAoD;AACrF;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB,6CAAE;AACpB,sCAAsC,2CAAM;AAC5C;AACA;AACA,gCAAgC,2CAAM;AACtC,kCAAkC,2CAAM;AACxC;AACA,mCAAmC,qEAAc;AACjD,0CAA0C,2EAAqB;AAC/D;AACA;AACA;AACA,yBAAyB,uBAAuB;AAChD;AACA;AACA;AACA,0HAA0H,OAAO,uEAAoB,oBAAoB;AACzK,gCAAgC,uEAAoB;AACpD;AACA;AACA;AACA;AACA,iBAAiB;AACjB,aAAa;AACb;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,yBAAyB,uBAAuB;AAChD;AACA;AACA;AACA,8CAA8C,uBAAuB;AACrE;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,uBAAuB;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA,yBAAyB,uBAAuB;AAChD;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,yBAAyB,uBAAuB;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA,iDAAiD,sEAAgB;AACjE,0BAA0B,sDAAO;AACjC;AACA,mBAAmB,sEAAe;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,sCAAsC,2CAAM;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA,sDAAsD,2CAAM;AAC5D;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qDAAqD,+DAAsB;AAC3E;AACA;AACA;AACA;AACA;AACA,4BAA4B,oEAAiB;AAC7C,iDAAiD,iCAAiC;AAClF;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B,mEAAiB;AAC9C;AACA;AACA;AACA;AACA,4BAA4B,8EAAsC;AAClE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,uBAAuB;AAChD;AACA;AACA;AACA,sEAAsE,oBAAoB;AAC1F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA,iDAAiD,+DAAsB;AACvE;AACA;AACA,sDAAsD,+DAAsB;AAC5E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oDAAoD,+DAAsB;AAC1E;AACA;AACA,yDAAyD,+DAAsB;AAC/E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC,iEAAwB;AACxD,2CAA2C,iEAAwB;AACnE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8EAA8E,uCAAuC;AACrH;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,wDAAS;AAC7B,mFAAmF,4GAA4G;AAC/L;AACA;AACA;AACA,gBAAgB,wDAAS;AACzB;AACA;AACA;AACA;AACA;AACA,gCAAgC,wEAAgC;AAChE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4CAA4C,wEAAgC;AAC5E;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,wDAAS;AACzB;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,qDAAqD,cAAc,yCAAyC,iBAAiB,cAAc,oEAAc,WAAW;AACpK;AACA;AACA;AACA,gCAAgC,4EAAoC;AACpE;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,yEAA0B;AACtC,4BAA4B,+DAAuB;AACnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B,uDAAI;AAC9B;AACA,yBAAyB,8DAAO;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,wDAAS;AACrB,4DAA4D,8CAA8C;AAC1G;AACA;AACA;AACA;AACA,gDAAgD,wBAAwB;AACxE;AACA;AACA,gBAAgB,wDAAS;AACzB,gCAAgC,wEAAgC;AAChE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+EAA+E,yCAAyC;AACxH;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,gEAAwB,SAAS,mFAA4B;AACzF;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,wDAAS;AACzB,iDAAiD,kDAAkD;AACnG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA,CAAC;AACoB;;;;;;;;;;;;;;;;AClsBrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AAC4B;;;;;;;;;;;;;;;;;;ACdyB;AACP;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,gEAAwB;AACpD;AACA;AACA,4BAA4B,gEAAwB;AACpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,gEAAwB;AACpD;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,gEAAwB;AACpD;AACA;AACA;AACA;AACA,4BAA4B,gEAAwB;AACpD;AACA;AACA,4BAA4B,gEAAwB;AACpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iFAAiF,0CAA0C;AAC3H,iBAAiB;AACjB;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,kDAAkD,uBAAuB;AACzE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,4BAA4B,gEAAwB;AACpD;AACA;AACA;AACA;AACA;AACA;AACA,yCAAyC,qBAAqB,2DAAU,uBAAuB;AAC/F,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACiB;;;;;;;;;;;;;;;;;ACvGgB;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,2CAAM;AACrC,iCAAiC,2CAAM;AACvC;AACA;AACA;AACA;AACA,CAAC;AACgC;;;;;;;;;;;;;;;;;AChDA;AACjC;AACA;AACA,kBAAkB,6CAAE;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACkB;;;;;;;;;;;;;;;;;ACdwC;AAC3D;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,+DAAsB;AAC/C;AACA;AACA;AACA,8BAA8B,oEAAoE;AAClG;AACA;AACA;AACA,CAAC;AACmB;;;;;;;;;;;;;;;;;AChBuC;AAC3D;AACA;AACA;AACA;AACA,4DAA4D,iEAAwB;AACpF,wDAAwD,4DAAmB;AAC3E;AACA;AACA;AACA;AACA;AACA;AACA,wDAAwD,iEAAwB;AAChF;AACA;AACA;AACA,CAAC;AACyB;;;;;;;;;;;;;;;;AClB1B;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACe;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACPyC;AACH;AACuB;AAClB;AACG;AAC0G;AACpI;AACE;AACR;AACqE;AAC/D;AACF;AAClC;AACA;AACA;AACA;AACA,sCAAsC,sEAA6B,GAAG,gEAAuB;AAC7F,6BAA6B,+CAAQ;AACrC,qBAAqB,2CAAM;AAC3B;AACA,8BAA8B,+CAAQ;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,iEAAY;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B,6CAAO;AACrC;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,iEAAY;AACzB;AACA;AACA;AACA;AACA,8CAA8C,kFAA4B;AAC1E,0BAA0B,iEAAyB;AACnD,uBAAuB,2EAAqB;AAC5C,uBAAuB,gGAA0C;AACjE;AACA;AACA,aAAa,iEAAY;AACzB;AACA,aAAa,iEAAY;AACzB;AACA;AACA,8CAA8C,kFAA4B;AAC1E,0BAA0B,kEAA0B;AACpD,uBAAuB,gGAA0C;AACjE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,6CAAO;AAClC,0BAA0B,uCAAI;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B,qEAAe;AAC5C,+BAA+B,kEAAe;AAC9C;AACA,+CAA+C,8EAA2B;AAC1E;AACA,gCAAgC,4EAAoC,CAAC,qEAAe;AACpF;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uCAAuC;AACvC,sBAAsB,8CAAO;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,2EAAuB;AACnC,YAAY,mFAA6B;AACzC;AACA;AACA;AACA;AACA;AACA,qBAAqB,2CAAM,CAAC,oEAAc,sCAAsC,+CAAQ;AACxF,sBAAsB,8CAAO;AAC7B,sBAAsB,6CAAO;AAC7B;AACA;AACyD;;;;;;;;;;;;;;;;AClJzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sCAAsC,oBAAoB;AAC1D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AAC0B;;;;;;;;;;;;;;;;;;;;;;;;ACxB3B,qBAAqB,SAAI,IAAI,SAAI;AACjC,6EAA6E,OAAO;AACpF;AACA;AACA;AACA;AACA;AACA;AACA;AAC8E;AACxB;AACM;AACD;AACF;AACvB;AAClC;AACA,0BAA0B,qEAAe;AACzC;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB,gFAAwC;AAC1D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC,sFAAqB;AAC1D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,4EAAoC;AAC1D;AACA;AACA,yBAAyB,2CAAM,CAAC,oEAAc;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,gBAAgB;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB,gFAAwC;AAC1D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oCAAoC,oBAAoB;AACxD;AACA;AACA;AACA;AACA;AACA,yBAAyB,2CAAM,CAAC,oEAAc;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC,qEAAe;AACjD;AACA,kDAAkD,wCAAwC,iBAAiB,mEAA0B,GAAG,IAAI;AAC5I;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA,kCAAkC,gEAAuB;AACzD,uCAAuC,sEAA6B;AACpE,sCAAsC,8DAAqB;AAC3D,qCAAqC,mEAA0B;AAC/D;AACA;AACyE;;;;;;;;;;;;;;;;;ACtIxC;AACjC;AACA;AACA,kBAAkB,6CAAE;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACkB;;;;;;;;;;;;;;;;;;;;;ACrBwC;AAC1B;AAC6B;AACxB;AACe;AACrD;AACA;AACA,kBAAkB,6CAAE;AACpB;AACA;AACA,6DAA6D,0EAAoB;AACjF,wBAAwB,8DAAe;AACvC;AACA;AACA;AACA;AACA,+BAA+B,+CAAQ,CAAC,+DAAsB;AAC9D;AACA,0CAA0C,+CAAQ;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6CAA6C,gBAAgB;AAC7D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,sEAA6B;AACxD;AACA;AACA,+BAA+B,sEAA6B;AAC5D;AACA;AACA,2BAA2B,+DAAsB;AACjD;AACA;AACA,wDAAwD,OAAO,yEAAgC,wBAAwB,8BAA8B,IAAI;AACzJ;AACA;AACA,+BAA+B,kEAAyB;AACxD;AACA;AACA;AACA,uDAAuD,iBAAiB,+DAAsB,GAAG;AACjG;AACA;AACA;AACA;AACA;AACA,8DAA8D,OAAO,yEAAgC,wBAAwB,8BAA8B,IAAI;AAC/J;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,+DAAsB;AACrD;AACA;AACA;AACA;AACA,kDAAkD,gBAAgB;AAClE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACiB;;;;;;;;;;;;;;;;;;;;AChFlB,gBAAgB,SAAI,IAAI,SAAI;AAC5B;AACA,iDAAiD,OAAO;AACxD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,SAAI,IAAI,SAAI;AAC7B,4BAA4B,+DAA+D,iBAAiB;AAC5G;AACA,oCAAoC,MAAM,+BAA+B,YAAY;AACrF,mCAAmC,MAAM,mCAAmC,YAAY;AACxF,gCAAgC;AAChC;AACA,KAAK;AACL;AACA,mBAAmB,SAAI,IAAI,SAAI;AAC/B,cAAc,6BAA6B,0BAA0B,cAAc,qBAAqB;AACxG,iBAAiB,oDAAoD,qEAAqE,cAAc;AACxJ,uBAAuB,sBAAsB;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA,wCAAwC;AACxC,mCAAmC,SAAS;AAC5C,mCAAmC,WAAW,UAAU;AACxD,0CAA0C,cAAc;AACxD;AACA,8GAA8G,OAAO;AACrH,iFAAiF,iBAAiB;AAClG,yDAAyD,gBAAgB,QAAQ;AACjF,+CAA+C,gBAAgB,gBAAgB;AAC/E;AACA,kCAAkC;AAClC;AACA;AACA,UAAU,YAAY,aAAa,SAAS,UAAU;AACtD,oCAAoC,SAAS;AAC7C;AACA;AACA,qBAAqB,SAAI,IAAI,SAAI;AACjC,6EAA6E,OAAO;AACpF;AACA;AACA;AACA;AACA;AACA;AACA;AACyG;AAC3B;AACnB;AACY;AACvE;AACA;AACA;AACA;AACA,2BAA2B,oEAAc;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uCAAuC,wEAA0B;AACjE;AACA;AACA,KAAK,IAAI,yFAAyF;AAClG;AACA;AACA;AACA;AACA;AACA,kEAAkE,eAAe,gBAAgB;AACjG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gFAAgF,WAAW,sFAAsF;AACjL;AACA,SAAS;AACT,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,kFAAkF,yCAAyC;AAC3H;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,KAAK;AACL;AACA;AACA;AACA,QAAQ,uDAAS;AACjB,sDAAsD,gBAAgB;AACtE;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,oEAA2B;AACvD,uCAAuC,oEAA2B;AAClE;AACA;AACA;AACA;AACA;AACA,gCAAgC,2EAAoB;AACpD;AACA;AACA;AACA;AACA;AACA,0BAA0B,sEAAgB;AAC1C;AACA;AACA;AACA;AACA,oFAAoF,sEAAgB;AACpG;AACA;AACA;AACA,wBAAwB,4EAAqB;AAC7C;AACA,4BAA4B,iEAAwB;AACpD,wBAAwB,wEAAiB;AACzC;AACA;AACA;AACA;AACA;AACA,QAAQ,uDAAS;AACjB,uDAAuD,gEAAgE;AACvH;AACA;AACA;AACA;AACA;AAC2B;;;;;;;;;;;;;;;;;;;;;;;;AC7L3B,iBAAiB,SAAI,IAAI,SAAI;AAC7B,4BAA4B,+DAA+D,iBAAiB;AAC5G;AACA,oCAAoC,MAAM,+BAA+B,YAAY;AACrF,mCAAmC,MAAM,mCAAmC,YAAY;AACxF,gCAAgC;AAChC;AACA,KAAK;AACL;AACA,mBAAmB,SAAI,IAAI,SAAI;AAC/B,cAAc,6BAA6B,0BAA0B,cAAc,qBAAqB;AACxG,iBAAiB,oDAAoD,qEAAqE,cAAc;AACxJ,uBAAuB,sBAAsB;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA,wCAAwC;AACxC,mCAAmC,SAAS;AAC5C,mCAAmC,WAAW,UAAU;AACxD,0CAA0C,cAAc;AACxD;AACA,8GAA8G,OAAO;AACrH,iFAAiF,iBAAiB;AAClG,yDAAyD,gBAAgB,QAAQ;AACjF,+CAA+C,gBAAgB,gBAAgB;AAC/E;AACA,kCAAkC;AAClC;AACA;AACA,UAAU,YAAY,aAAa,SAAS,UAAU;AACtD,oCAAoC,SAAS;AAC7C;AACA;AACsD;AACO;AACF;AACG;AACnB;AACkC;AACP;AACpB;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,uEAAiB;AAC1C,WAAW,kFAA+B,eAAe,uDAAuD,gBAAgB,iBAAiB,iFAAyC,qFAAqF;AAC/Q;AACA;AACA;AACA;AACA,IAAI,sEAAgB;AACpB;AACA,aAAa,qEAAe;AAC5B,aAAa,qEAAe;AAC5B;AACA;AACA,aAAa,qEAAe;AAC5B;AACA;AACA,aAAa,qEAAe;AAC5B,qBAAqB,+DAAe;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,6DAAe;AAChC;AACA;AACA;AACA;AACA,IAAI,yDAAW;AACf;AACA;AACA;AACA;AACA;AACA,YAAY,uDAAS;AACrB,uDAAuD,mDAAmD;AAC1G;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,uDAAS;AACrB;AACA;AACA;AACA;AACA;AACA;AACA,MAAM,kDAAkD,uEAAoB;AAC5E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,uDAAS;AACrB;AACA;AACA;AACA;AACA;AACA;AACA,uFAAuF;AACvF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACmB;;;;;;;;;;;;;;;;;;;AC5MnB,iBAAiB,SAAI,IAAI,SAAI;AAC7B,4BAA4B,+DAA+D,iBAAiB;AAC5G;AACA,oCAAoC,MAAM,+BAA+B,YAAY;AACrF,mCAAmC,MAAM,mCAAmC,YAAY;AACxF,gCAAgC;AAChC;AACA,KAAK;AACL;AACA,mBAAmB,SAAI,IAAI,SAAI;AAC/B,cAAc,6BAA6B,0BAA0B,cAAc,qBAAqB;AACxG,iBAAiB,oDAAoD,qEAAqE,cAAc;AACxJ,uBAAuB,sBAAsB;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA,wCAAwC;AACxC,mCAAmC,SAAS;AAC5C,mCAAmC,WAAW,UAAU;AACxD,0CAA0C,cAAc;AACxD;AACA,8GAA8G,OAAO;AACrH,iFAAiF,iBAAiB;AAClG,yDAAyD,gBAAgB,QAAQ;AACjF,+CAA+C,gBAAgB,gBAAgB;AAC/E;AACA,kCAAkC;AAClC;AACA;AACA,UAAU,YAAY,aAAa,SAAS,UAAU;AACtD,oCAAoC,SAAS;AAC7C;AACA;AAC8D;AACnB;AACpC;AACP,2BAA2B,sEAAgB;AAC3C;AACA;AACA,0BAA0B,sEAAgB;AAC1C;AACA;AACA;AACA;AACA;AACO;AACP,0BAA0B,sEAAgB;AAC1C;AACA;AACA,0BAA0B,sEAAgB;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,uDAAS;AACjB;AACA;AACA;AACA,yEAAyE;AACzE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL,CAAC;;;;;;;;;;;;;;;;;;ACvF6D;AACC;AAC/D;AACA;AACA;AACA;AACA;AACA,8BAA8B,sEAAgB;AAC9C,mBAAmB,wEAAmB;AACtC;AACA;AACA,8BAA8B,sEAAgB;AAC9C,mBAAmB,wEAAmB;AACtC;AACA;AACA,8BAA8B,sEAAgB;AAC9C,mBAAmB,wEAAmB;AACtC;AACA;AACA,CAAC;AAC0B;;;;;;;;;;;;;;;;;;;ACpB2B;AACA;AACI;AAC1D;AACA;AACA;AACA,sCAAsC,mEAAiB;AACvD,oCAAoC,+DAAe;AACnD,oCAAoC,+DAAe;AACnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACgC;;;;;;;;;;;;;;;;;ACxEyB;AAC1D;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,mEAAiB;AACpC;AACA;AACA;AACA,mBAAmB,mEAAiB;AACpC;AACA;AACA,CAAC;AAC0B;;;;;;;;;;;;;;;;;;;;ACf2B;AACyB;AACX;AACL;AAC/D;AACA;AACA;AACA;AACA;AACA,6BAA6B,qEAAe;AAC5C;AACA,mBAAmB,6EAAqB;AACxC;AACA;AACA;AACA,iCAAiC,wEAAgC;AACjE;AACA;AACA;AACA;AACA;AACA,6BAA6B,qEAAe;AAC5C;AACA;AACA;AACA,8BAA8B,sEAAgB;AAC9C,mBAAmB,wEAAmB;AACtC;AACA;AACA,6BAA6B,qEAAe;AAC5C;AACA;AACA;AACA,mBAAmB,6EAAqB;AACxC;AACA;AACA,6BAA6B,qEAAe;AAC5C;AACA,8BAA8B,sEAAgB;AAC9C,mBAAmB,wEAAmB;AACtC;AACA;AACA,6BAA6B,qEAAe;AAC5C;AACA,8BAA8B,sEAAgB;AAC9C,mBAAmB,wEAAmB;AACtC;AACA;AACA;AACA,4BAA4B,2EAAmC;AAC/D;AACA;AACA,6BAA6B,qEAAe;AAC5C,8BAA8B,sEAAgB;AAC9C;AACA;AACA;AACA,6BAA6B,qEAAe;AAC5C;AACA,4CAA4C;AAC5C;AACA;AACA,8BAA8B,sEAAgB;AAC9C,mBAAmB,wEAAmB;AACtC;AACA;AACA,6BAA6B,qEAAe;AAC5C;AACA,sCAAsC;AACtC;AACA,mBAAmB,wEAAmB;AACtC;AACA;AACA,6BAA6B,qEAAe;AAC5C;AACA,8BAA8B,sEAAgB;AAC9C,mBAAmB,wEAAmB;AACtC;AACA;AACA,iDAAiD,wCAAwC;AACzF;AACA;AACA,CAAC;AAC0B;;;;;;;;;;;;;;;;;;ACnF2B;AACI;AAC1D;AACA;AACA;AACA,sCAAsC,mEAAiB;AACvD,oCAAoC,+DAAe;AACnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AAC8B;;;;;;;;;;;;;;;;;;AC7DuB;AACuD;AAC7G;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,+DAAe;AAClC;AACA;AACA,mCAAmC,oEAAe;AAClD,mBAAmB,+DAAe;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,+DAAe;AAClC;AACA;AACA,mCAAmC,qEAAgB;AACnD,mBAAmB,+DAAe;AAClC;AACA;AACA;AACA,uCAAuC,mEAAc;AACrD;AACA,mBAAmB,+DAAe;AAClC;AACA;AACA;AACA,uCAAuC,oEAAe;AACtD;AACA,mBAAmB,+DAAe;AAClC;AACA;AACA;AACA,uCAAuC,qEAAgB;AACvD;AACA,mBAAmB,+DAAe;AAClC;AACA;AACA;AACA,uCAAuC,uEAAkB,UAAU,mEAAc;AACjF;AACA,mBAAmB,+DAAe;AAClC;AACA;AACA;AACA,wCAAwC,uEAAkB,UAAU,mEAAc;AAClF;AACA,mBAAmB,+DAAe;AAClC;AACA;AACA;AACA,uCAAuC,uEAAkB,UAAU,oEAAe;AAClF;AACA,mBAAmB,+DAAe;AAClC;AACA;AACA;AACA,wCAAwC,uEAAkB,UAAU,oEAAe;AACnF;AACA,mBAAmB,+DAAe;AAClC;AACA;AACA;AACA,uCAAuC,uEAAkB,UAAU,qEAAgB;AACnF;AACA,mBAAmB,+DAAe;AAClC;AACA;AACA;AACA,wCAAwC,uEAAkB,UAAU,qEAAgB;AACpF;AACA,mBAAmB,+DAAe;AAClC;AACA;AACA;AACA,uCAAuC,uEAAkB;AACzD;AACA,mBAAmB,+DAAe;AAClC;AACA;AACA;AACA,wCAAwC,uEAAkB;AAC1D;AACA,mBAAmB,+DAAe;AAClC;AACA;AACA,CAAC;AAC4B;;;;;;;;;;;;;;;;;;;;;AClG8B;AACX;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wCAAwC;AACxC;AACA;AACA;AACA,8BAA8B,wDAAQ;AACtC;AACA;AACA,uCAAuC,+DAAsB;AAC7D,uCAAuC;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACiF;;;;;;;;;;;;;;;;;AClCjF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACiD;;;;;;;;;;;;;;;;;;;;;;ACVqB;AAChB;AACO;AAChB;AACtC;AACP;AACA;AACA;AACA,6BAA6B,uBAAuB;AACpD;AACA;AACA,gDAAgD,8CAA8C;AAC9F;AACA;AACA;AACO;AACP;AACA;AACA,aAAa,qEAAe;AAC5B,aAAa,qEAAe;AAC5B;AACA;AACA,aAAa,qEAAe;AAC5B,aAAa,qEAAe;AAC5B;AACA;AACA,aAAa,qEAAe;AAC5B;AACA;AACA,aAAa,qEAAe;AAC5B;AACA;AACA,aAAa,qEAAe;AAC5B;AACA;AACA;AACA;AACA,wCAAwC,kFAA4B;AACpE,wBAAwB,uEAA+B;AACvD;AACA;AACO;AACP;AACA,aAAa,qEAAe;AAC5B,qBAAqB,uCAAuC,sDAAW;AACvE,aAAa,qEAAe;AAC5B,qBAAqB,wCAAwC,sDAAW;AACxE,aAAa,qEAAe;AAC5B,qBAAqB,4CAA4C,sDAAW;AAC5E;AACA;AACA;AACA;;;;;;;;;;;;;;;;ACpDA;AACA;AACA;AACA;AACA;AACA;AACsB;;;;;;;;;;;;;;;;;;ACNgC;AAC/C;AACP;AACA,0BAA0B,iEAAyB;AACnD;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;ACfO;AACP;AACA;AACA;AACA;AACA,CAAC,kCAAkC;;;;;;;;;;;;;;;;ACLnC;AACA;AACA;AACA;AACc;;;;;;;;;;;;;;;;ACJP;AACP;AACA,sCAAsC,qBAAqB;AAC3D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;ACZsD;AACtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,sEAA8B;AAC1D;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACiL;;;;;;;;;;;ACnGjL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,IAA0C;AAClD,QAAQ,oCAAO,UAAU;AAAA;AAAA;AAAA;AAAA,kGAAC;AAC1B,MAAM,KAAK,EAIN;AACL,CAAC;AACD;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,0BAA0B;AAC1B,UAAU;AACV;AACA,UAAU;AACV;AACA,UAAU;AACV;AACA,UAAU;AACV;AACA;AACA;;AAEA;;AAEA;AACA;AACA,wBAAwB,uBAAuB;AAC/C;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,QAAQ;AACR;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA,YAAY;;AAEZ;AACA;AACA;AACA,qEAAqE;AACrE,YAAY;AACZ;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA,YAAY;;AAEZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0CAA0C;AAC1C;AACA,gBAAgB;AAChB;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,YAAY;;AAEZ;AACA;AACA;AACA,qDAAqD;AACrD,YAAY;AACZ;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA,sBAAsB;AACtB;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,wCAAwC;AACxC;AACA;AACA;AACA;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA,CAAC;;;;;;;;;;;ACxSD;AACA;AACA,gEAAgE;AAChE;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B,qBAAM,gBAAgB,qBAAM;AACtD;AACA;AACA,0CAA0C;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yDAAyD,kDAAkD;AAC3G;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,kEAAkE;AAClE,8BAA8B,gBAAgB,kBAAkB;AAChE;AACA;AACA;AACA;AACA,gCAAgC;AAChC;AACA,oCAAoC,wBAAwB,iBAAiB;AAC7E,oCAAoC,wBAAwB,IAAI;AAChE;AACA,wCAAwC;AACxC,wCAAwC,oBAAoB;AAC5D;AACA,wCAAwC;AACxC,wCAAwC,kBAAkwGAAwG;AACxG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iFAAiF;AACjF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sEAAsE;AACtE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sEAAsE;AACtwEAAwE;AACxE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gDAAgD,QAAQ;AACxD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gDAAgD,QAAQ;AACxD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kDAAkD,uBAAuB;AACzE;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wDAAwD,0BAA0B;AACluCAAuC;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oEAAoE;AACpE,sEAAsE;AACtE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC;AACjC;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uCAAuC,2BAA2B;AAClE;AACA;AACA,iBAAiB;AACjB,qDAAqD;AACrD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gDAAgD,UAAU;AAC1D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mDAAmD;AACnD,qDAAqD;AACrD,sDAAsD;AACtD,4DAA4D;AAC5D,8DAA8D;AAC9D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uCAAuC,wBAAwB;AAC/D;AACA;AACA,iBAAiB;AACjB,uDAAuD;AACvD,uDAAuD;AACvD,0DAA0D;AAC1D,oDAAoD;AACpD,mDAAmD;AACnD,qDAAqD;AACrD,sDAAsD;AACtD,4DAA4D;AAC5D,8DAA8D;AAC9D;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6DAA6D,yBAAyB;AACtF;AACA;AACA;AACA;AACA,gCAAgC,UAAU;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC,oBAAoB;AACzD;AACA;AACA;AACA;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","sources":["webpack://arcvalidation/webpack/universalModuleDefinition","webpack://arcvalidation/./node_modules/inversify/es/annotation/decorator_utils.js","webpack://arcvalidation/./node_modules/inversify/es/annotation/inject.js","webpack://arcvalidation/./node_modules/inversify/es/annotation/inject_base.js","webpack://arcvalidation/./node_modules/inversify/es/annotation/injectable.js","webpack://arcvalidation/./node_modules/inversify/es/annotation/lazy_service_identifier.js","webpack://arcvalidation/./node_modules/inversify/es/bindings/binding.js","webpack://arcvalidation/./node_modules/inversify/es/bindings/binding_count.js","webpack://arcvalidation/./node_modules/inversify/es/constants/error_msgs.js","webpack://arcvalidation/./node_modules/inversify/es/constants/literal_types.js","webpack://arcvalidation/./node_modules/inversify/es/constants/metadata_keys.js","webpack://arcvalidation/./node_modules/inversify/es/container/container.js","webpack://arcvalidation/./node_modules/inversify/es/container/container_snapshot.js","webpack://arcvalidation/./node_modules/inversify/es/container/lookup.js","webpack://arcvalidation/./node_modules/inversify/es/container/module_activation_store.js","webpack://arcvalidation/./node_modules/inversify/es/planning/context.js","webpack://arcvalidation/./node_modules/inversify/es/planning/metadata.js","webpack://arcvalidation/./node_modules/inversify/es/planning/metadata_reader.js","webpack://arcvalidation/./node_modules/inversify/es/planning/plan.js","webpack://arcvalidation/./node_modules/inversify/es/planning/planner.js","webpack://arcvalidation/./node_modules/inversify/es/planning/queryable_string.js","webpack://arcvalidation/./node_modules/inversify/es/planning/reflection_utils.js","webpack://arcvalidation/./node_modules/inversify/es/planning/request.js","webpack://arcvalidation/./node_modules/inversify/es/planning/target.js","webpack://arcvalidation/./node_modules/inversify/es/resolution/instantiation.js","webpack://arcvalidation/./node_modules/inversify/es/resolution/resolver.js","webpack://arcvalidation/./node_modules/inversify/es/scope/scope.js","webpack://arcvalidation/./node_modules/inversify/es/syntax/binding_in_syntax.js","webpack://arcvalidation/./node_modules/inversify/es/syntax/binding_in_when_on_syntax.js","webpack://arcvalidation/./node_modules/inversify/es/syntax/binding_on_syntax.js","webpack://arcvalidation/./node_modules/inversify/es/syntax/binding_to_syntax.js","webpack://arcvalidation/./node_modules/inversify/es/syntax/binding_when_on_syntax.js","webpack://arcvalidation/./node_modules/inversify/es/syntax/binding_when_syntax.js","webpack://arcvalidation/./node_modules/inversify/es/syntax/constraint_helpers.js","webpack://arcvalidation/./node_modules/inversify/es/utils/async.js","webpack://arcvalidation/./node_modules/inversify/es/utils/binding_utils.js","webpack://arcvalidation/./node_modules/inversify/es/utils/clonable.js","webpack://arcvalidation/./node_modules/inversify/es/utils/exceptions.js","webpack://arcvalidation/./node_modules/inversify/es/utils/factory_type.js","webpack://arcvalidation/./node_modules/inversify/es/utils/id.js","webpack://arcvalidation/./node_modules/inversify/es/utils/js.js","webpack://arcvalidation/./node_modules/inversify/es/utils/serialization.js","webpack://arcvalidation/./node_modules/loglevel/lib/loglevel.js","webpack://arcvalidation/./node_modules/reflect-metadata/Reflect.js","webpack://arcvalidation/./src/DebounceManager.ts","webpack://arcvalidation/./src/DebouncerFactory.ts","webpack://arcvalidation/./src/EventEmitter.ts","webpack://arcvalidation/./src/Form.ts","webpack://arcvalidation/./src/FormFactory.ts","webpack://arcvalidation/./src/FormManager.ts","webpack://arcvalidation/./src/FormObserver.ts","webpack://arcvalidation/./src/FormParser.ts","webpack://arcvalidation/./src/Initializer.ts","webpack://arcvalidation/./src/ObservableCollection.ts","webpack://arcvalidation/./src/Result.ts","webpack://arcvalidation/./src/StateManager.ts","webpack://arcvalidation/./src/ValidationControl.ts","webpack://arcvalidation/./src/di/container-config.ts","webpack://arcvalidation/./src/di/container-types.ts","webpack://arcvalidation/./src/logger/debuggingLogger.ts","webpack://arcvalidation/./src/services/EventService.ts","webpack://arcvalidation/./src/services/ValidationService.ts","webpack://arcvalidation/./src/services/loggerService.ts","webpack://arcvalidation/./src/util/Debouncer.ts","webpack://arcvalidation/webpack/bootstrap","webpack://arcvalidation/webpack/runtime/compat get default export","webpack://arcvalidation/webpack/runtime/define property getters","webpack://arcvalidation/webpack/runtime/global","webpack://arcvalidation/webpack/runtime/hasOwnProperty shorthand","webpack://arcvalidation/webpack/runtime/make namespace object","webpack://arcvalidation/./src/unobtrusviveValidation.ts"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"arcvalidation\"] = factory();\n\telse\n\t\troot[\"arcvalidation\"] = factory();\n})(this, () => {\nreturn ","import * as ERROR_MSGS from '../constants/error_msgs';\r\nimport * as METADATA_KEY from '../constants/metadata_keys';\r\nimport { getFirstArrayDuplicate } from '../utils/js';\r\nfunction targetIsConstructorFunction(target) {\r\n    return target.prototype !== undefined;\r\n}\r\nfunction _throwIfMethodParameter(parameterName) {\r\n    if (parameterName !== undefined) {\r\n        throw new Error(ERROR_MSGS.INVALID_DECORATOR_OPERATION);\r\n    }\r\n}\r\nfunction tagParameter(annotationTarget, parameterName, parameterIndex, metadata) {\r\n    _throwIfMethodParameter(parameterName);\r\n    _tagParameterOrProperty(METADATA_KEY.TAGGED, annotationTarget, parameterIndex.toString(), metadata);\r\n}\r\nfunction tagProperty(annotationTarget, propertyName, metadata) {\r\n    if (targetIsConstructorFunction(annotationTarget)) {\r\n        throw new Error(ERROR_MSGS.INVALID_DECORATOR_OPERATION);\r\n    }\r\n    _tagParameterOrProperty(METADATA_KEY.TAGGED_PROP, annotationTarget.constructor, propertyName, metadata);\r\n}\r\nfunction _ensureNoMetadataKeyDuplicates(metadata) {\r\n    var metadatas = [];\r\n    if (Array.isArray(metadata)) {\r\n        metadatas = metadata;\r\n        var duplicate = getFirstArrayDuplicate(metadatas.map(function (md) { return md.key; }));\r\n        if (duplicate !== undefined) {\r\n            throw new Error(ERROR_MSGS.DUPLICATED_METADATA + \" \" + duplicate.toString());\r\n        }\r\n    }\r\n    else {\r\n        metadatas = [metadata];\r\n    }\r\n    return metadatas;\r\n}\r\nfunction _tagParameterOrProperty(metadataKey, annotationTarget, key, metadata) {\r\n    var metadatas = _ensureNoMetadataKeyDuplicates(metadata);\r\n    var paramsOrPropertiesMetadata = {};\r\n    if (Reflect.hasOwnMetadata(metadataKey, annotationTarget)) {\r\n        paramsOrPropertiesMetadata = Reflect.getMetadata(metadataKey, annotationTarget);\r\n    }\r\n    var paramOrPropertyMetadata = paramsOrPropertiesMetadata[key];\r\n    if (paramOrPropertyMetadata === undefined) {\r\n        paramOrPropertyMetadata = [];\r\n    }\r\n    else {\r\n        var _loop_1 = function (m) {\r\n            if (metadatas.some(function (md) { return md.key === m.key; })) {\r\n                throw new Error(ERROR_MSGS.DUPLICATED_METADATA + \" \" + m.key.toString());\r\n            }\r\n        };\r\n        for (var _i = 0, paramOrPropertyMetadata_1 = paramOrPropertyMetadata; _i < paramOrPropertyMetadata_1.length; _i++) {\r\n            var m = paramOrPropertyMetadata_1[_i];\r\n            _loop_1(m);\r\n        }\r\n    }\r\n    paramOrPropertyMetadata.push.apply(paramOrPropertyMetadata, metadatas);\r\n    paramsOrPropertiesMetadata[key] = paramOrPropertyMetadata;\r\n    Reflect.defineMetadata(metadataKey, paramsOrPropertiesMetadata, annotationTarget);\r\n}\r\nfunction createTaggedDecorator(metadata) {\r\n    return function (target, targetKey, indexOrPropertyDescriptor) {\r\n        if (typeof indexOrPropertyDescriptor === 'number') {\r\n            tagParameter(target, targetKey, indexOrPropertyDescriptor, metadata);\r\n        }\r\n        else {\r\n            tagProperty(target, targetKey, metadata);\r\n        }\r\n    };\r\n}\r\nfunction _decorate(decorators, target) {\r\n    Reflect.decorate(decorators, target);\r\n}\r\nfunction _param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); };\r\n}\r\nfunction decorate(decorator, target, parameterIndexOrProperty) {\r\n    if (typeof parameterIndexOrProperty === 'number') {\r\n        _decorate([_param(parameterIndexOrProperty, decorator)], target);\r\n    }\r\n    else if (typeof parameterIndexOrProperty === 'string') {\r\n        Reflect.decorate([decorator], target, parameterIndexOrProperty);\r\n    }\r\n    else {\r\n        _decorate([decorator], target);\r\n    }\r\n}\r\nexport { decorate, tagParameter, tagProperty, createTaggedDecorator };\r\n","import * as METADATA_KEY from '../constants/metadata_keys';\r\nimport { injectBase } from './inject_base';\r\nvar inject = injectBase(METADATA_KEY.INJECT_TAG);\r\nexport { inject };\r\n","import { UNDEFINED_INJECT_ANNOTATION } from '../constants/error_msgs';\r\nimport { Metadata } from '../planning/metadata';\r\nimport { createTaggedDecorator } from './decorator_utils';\r\nexport function injectBase(metadataKey) {\r\n    return function (serviceIdentifier) {\r\n        return function (target, targetKey, indexOrPropertyDescriptor) {\r\n            if (serviceIdentifier === undefined) {\r\n                var className = typeof target === 'function' ? target.name : target.constructor.name;\r\n                throw new Error(UNDEFINED_INJECT_ANNOTATION(className));\r\n            }\r\n            return createTaggedDecorator(new Metadata(metadataKey, serviceIdentifier))(target, targetKey, indexOrPropertyDescriptor);\r\n        };\r\n    };\r\n}\r\n","import * as ERRORS_MSGS from '../constants/error_msgs';\r\nimport * as METADATA_KEY from '../constants/metadata_keys';\r\nfunction injectable() {\r\n    return function (target) {\r\n        if (Reflect.hasOwnMetadata(METADATA_KEY.PARAM_TYPES, target)) {\r\n            throw new Error(ERRORS_MSGS.DUPLICATED_INJECTABLE_DECORATOR);\r\n        }\r\n        var types = Reflect.getMetadata(METADATA_KEY.DESIGN_PARAM_TYPES, target) || [];\r\n        Reflect.defineMetadata(METADATA_KEY.PARAM_TYPES, types, target);\r\n        return target;\r\n    };\r\n}\r\nexport { injectable };\r\n","var LazyServiceIdentifier = (function () {\r\n    function LazyServiceIdentifier(cb) {\r\n        this._cb = cb;\r\n    }\r\n    LazyServiceIdentifier.prototype.unwrap = function () {\r\n        return this._cb();\r\n    };\r\n    return LazyServiceIdentifier;\r\n}());\r\nexport { LazyServiceIdentifier };\r\n","import { BindingScopeEnum, BindingTypeEnum } from '../constants/literal_types';\r\nimport { id } from '../utils/id';\r\nvar Binding = (function () {\r\n    function Binding(serviceIdentifier, scope) {\r\n        this.id = id();\r\n        this.activated = false;\r\n        this.serviceIdentifier = serviceIdentifier;\r\n        this.scope = scope;\r\n        this.type = BindingTypeEnum.Invalid;\r\n        this.constraint = function (request) { return true; };\r\n        this.implementationType = null;\r\n        this.cache = null;\r\n        this.factory = null;\r\n        this.provider = null;\r\n        this.onActivation = null;\r\n        this.onDeactivation = null;\r\n        this.dynamicValue = null;\r\n    }\r\n    Binding.prototype.clone = function () {\r\n        var clone = new Binding(this.serviceIdentifier, this.scope);\r\n        clone.activated = (clone.scope === BindingScopeEnum.Singleton) ? this.activated : false;\r\n        clone.implementationType = this.implementationType;\r\n        clone.dynamicValue = this.dynamicValue;\r\n        clone.scope = this.scope;\r\n        clone.type = this.type;\r\n        clone.factory = this.factory;\r\n        clone.provider = this.provider;\r\n        clone.constraint = this.constraint;\r\n        clone.onActivation = this.onActivation;\r\n        clone.onDeactivation = this.onDeactivation;\r\n        clone.cache = this.cache;\r\n        return clone;\r\n    };\r\n    return Binding;\r\n}());\r\nexport { Binding };\r\n","export var BindingCount = {\r\n    MultipleBindingsAvailable: 2,\r\n    NoBindingsAvailable: 0,\r\n    OnlyOneBindingAvailable: 1\r\n};\r\n","export var DUPLICATED_INJECTABLE_DECORATOR = 'Cannot apply @injectable decorator multiple times.';\r\nexport var DUPLICATED_METADATA = 'Metadata key was used more than once in a parameter:';\r\nexport var NULL_ARGUMENT = 'NULL argument';\r\nexport var KEY_NOT_FOUND = 'Key Not Found';\r\nexport var AMBIGUOUS_MATCH = 'Ambiguous match found for serviceIdentifier:';\r\nexport var CANNOT_UNBIND = 'Could not unbind serviceIdentifier:';\r\nexport var NOT_REGISTERED = 'No matching bindings found for serviceIdentifier:';\r\nexport var MISSING_INJECTABLE_ANNOTATION = 'Missing required @injectable annotation in:';\r\nexport var MISSING_INJECT_ANNOTATION = 'Missing required @inject or @multiInject annotation in:';\r\nexport var UNDEFINED_INJECT_ANNOTATION = function (name) {\r\n    return \"@inject called with undefined this could mean that the class \" + name + \" has \" +\r\n        'a circular dependency problem. You can use a LazyServiceIdentifier to  ' +\r\n        'overcome this limitation.';\r\n};\r\nexport var CIRCULAR_DEPENDENCY = 'Circular dependency found:';\r\nexport var NOT_IMPLEMENTED = 'Sorry, this feature is not fully implemented yet.';\r\nexport var INVALID_BINDING_TYPE = 'Invalid binding type:';\r\nexport var NO_MORE_SNAPSHOTS_AVAILABLE = 'No snapshot available to restore.';\r\nexport var INVALID_MIDDLEWARE_RETURN = 'Invalid return type in middleware. Middleware must return!';\r\nexport var INVALID_FUNCTION_BINDING = 'Value provided to function binding must be a function!';\r\nexport var LAZY_IN_SYNC = function (key) { return \"You are attempting to construct '\" + key + \"' in a synchronous way\\n but it has asynchronous dependencies.\"; };\r\nexport var INVALID_TO_SELF_VALUE = 'The toSelf function can only be applied when a constructor is ' +\r\n    'used as service identifier';\r\nexport var INVALID_DECORATOR_OPERATION = 'The @inject @multiInject @tagged and @named decorators ' +\r\n    'must be applied to the parameters of a class constructor or a class property.';\r\nexport var ARGUMENTS_LENGTH_MISMATCH = function () {\r\n    var values = [];\r\n    for (var _i = 0; _i < arguments.length; _i++) {\r\n        values[_i] = arguments[_i];\r\n    }\r\n    return 'The number of constructor arguments in the derived class ' +\r\n        (values[0] + \" must be >= than the number of constructor arguments of its base class.\");\r\n};\r\nexport var CONTAINER_OPTIONS_MUST_BE_AN_OBJECT = 'Invalid Container constructor argument. Container options ' +\r\n    'must be an object.';\r\nexport var CONTAINER_OPTIONS_INVALID_DEFAULT_SCOPE = 'Invalid Container option. Default scope must ' +\r\n    'be a string (\"singleton\" or \"transient\").';\r\nexport var CONTAINER_OPTIONS_INVALID_AUTO_BIND_INJECTABLE = 'Invalid Container option. Auto bind injectable must ' +\r\n    'be a boolean';\r\nexport var CONTAINER_OPTIONS_INVALID_SKIP_BASE_CHECK = 'Invalid Container option. Skip base check must ' +\r\n    'be a boolean';\r\nexport var MULTIPLE_PRE_DESTROY_METHODS = 'Cannot apply @preDestroy decorator multiple times in the same class';\r\nexport var MULTIPLE_POST_CONSTRUCT_METHODS = 'Cannot apply @postConstruct decorator multiple times in the same class';\r\nexport var ASYNC_UNBIND_REQUIRED = 'Attempting to unbind dependency with asynchronous destruction (@preDestroy or onDeactivation)';\r\nexport var POST_CONSTRUCT_ERROR = function (clazz, errorMessage) { return \"@postConstruct error in class \" + clazz + \": \" + errorMessage; };\r\nexport var PRE_DESTROY_ERROR = function (clazz, errorMessage) { return \"@preDestroy error in class \" + clazz + \": \" + errorMessage; };\r\nexport var ON_DEACTIVATION_ERROR = function (clazz, errorMessage) { return \"onDeactivation() error in class \" + clazz + \": \" + errorMessage; };\r\nexport var CIRCULAR_DEPENDENCY_IN_FACTORY = function (factoryType, serviceIdentifier) {\r\n    return \"It looks like there is a circular dependency in one of the '\" + factoryType + \"' bindings. Please investigate bindings with \" +\r\n        (\"service identifier '\" + serviceIdentifier + \"'.\");\r\n};\r\nexport var STACK_OVERFLOW = 'Maximum call stack size exceeded';\r\n","var BindingScopeEnum = {\r\n    Request: 'Request',\r\n    Singleton: 'Singleton',\r\n    Transient: 'Transient'\r\n};\r\nvar BindingTypeEnum = {\r\n    ConstantValue: 'ConstantValue',\r\n    Constructor: 'Constructor',\r\n    DynamicValue: 'DynamicValue',\r\n    Factory: 'Factory',\r\n    Function: 'Function',\r\n    Instance: 'Instance',\r\n    Invalid: 'Invalid',\r\n    Provider: 'Provider'\r\n};\r\nvar TargetTypeEnum = {\r\n    ClassProperty: 'ClassProperty',\r\n    ConstructorArgument: 'ConstructorArgument',\r\n    Variable: 'Variable'\r\n};\r\nexport { BindingScopeEnum, BindingTypeEnum, TargetTypeEnum };\r\n","export var NAMED_TAG = 'named';\r\nexport var NAME_TAG = 'name';\r\nexport var UNMANAGED_TAG = 'unmanaged';\r\nexport var OPTIONAL_TAG = 'optional';\r\nexport var INJECT_TAG = 'inject';\r\nexport var MULTI_INJECT_TAG = 'multi_inject';\r\nexport var TAGGED = 'inversify:tagged';\r\nexport var TAGGED_PROP = 'inversify:tagged_props';\r\nexport var PARAM_TYPES = 'inversify:paramtypes';\r\nexport var DESIGN_PARAM_TYPES = 'design:paramtypes';\r\nexport var POST_CONSTRUCT = 'post_construct';\r\nexport var PRE_DESTROY = 'pre_destroy';\r\nfunction getNonCustomTagKeys() {\r\n    return [\r\n        INJECT_TAG,\r\n        MULTI_INJECT_TAG,\r\n        NAME_TAG,\r\n        UNMANAGED_TAG,\r\n        NAMED_TAG,\r\n        OPTIONAL_TAG,\r\n    ];\r\n}\r\nexport var NON_CUSTOM_TAG_KEYS = getNonCustomTagKeys();\r\n","var __assign = (this && this.__assign) || function () {\r\n    __assign = Object.assign || function(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\r\n                t[p] = s[p];\r\n        }\r\n        return t;\r\n    };\r\n    return __assign.apply(this, arguments);\r\n};\r\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n};\r\nvar __generator = (this && this.__generator) || function (thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n};\r\nvar __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {\r\n    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\r\n        if (ar || !(i in from)) {\r\n            if (!ar) ar = Array.prototype.slice.call(from, 0, i);\r\n            ar[i] = from[i];\r\n        }\r\n    }\r\n    return to.concat(ar || Array.prototype.slice.call(from));\r\n};\r\nimport { Binding } from '../bindings/binding';\r\nimport * as ERROR_MSGS from '../constants/error_msgs';\r\nimport { BindingScopeEnum, TargetTypeEnum } from '../constants/literal_types';\r\nimport * as METADATA_KEY from '../constants/metadata_keys';\r\nimport { MetadataReader } from '../planning/metadata_reader';\r\nimport { createMockRequest, getBindingDictionary, plan } from '../planning/planner';\r\nimport { resolve } from '../resolution/resolver';\r\nimport { BindingToSyntax } from '../syntax/binding_to_syntax';\r\nimport { isPromise, isPromiseOrContainsPromise } from '../utils/async';\r\nimport { id } from '../utils/id';\r\nimport { getServiceIdentifierAsString } from '../utils/serialization';\r\nimport { ContainerSnapshot } from './container_snapshot';\r\nimport { Lookup } from './lookup';\r\nimport { ModuleActivationStore } from './module_activation_store';\r\nvar Container = (function () {\r\n    function Container(containerOptions) {\r\n        var options = containerOptions || {};\r\n        if (typeof options !== 'object') {\r\n            throw new Error(\"\" + ERROR_MSGS.CONTAINER_OPTIONS_MUST_BE_AN_OBJECT);\r\n        }\r\n        if (options.defaultScope === undefined) {\r\n            options.defaultScope = BindingScopeEnum.Transient;\r\n        }\r\n        else if (options.defaultScope !== BindingScopeEnum.Singleton &&\r\n            options.defaultScope !== BindingScopeEnum.Transient &&\r\n            options.defaultScope !== BindingScopeEnum.Request) {\r\n            throw new Error(\"\" + ERROR_MSGS.CONTAINER_OPTIONS_INVALID_DEFAULT_SCOPE);\r\n        }\r\n        if (options.autoBindInjectable === undefined) {\r\n            options.autoBindInjectable = false;\r\n        }\r\n        else if (typeof options.autoBindInjectable !== 'boolean') {\r\n            throw new Error(\"\" + ERROR_MSGS.CONTAINER_OPTIONS_INVALID_AUTO_BIND_INJECTABLE);\r\n        }\r\n        if (options.skipBaseClassChecks === undefined) {\r\n            options.skipBaseClassChecks = false;\r\n        }\r\n        else if (typeof options.skipBaseClassChecks !== 'boolean') {\r\n            throw new Error(\"\" + ERROR_MSGS.CONTAINER_OPTIONS_INVALID_SKIP_BASE_CHECK);\r\n        }\r\n        this.options = {\r\n            autoBindInjectable: options.autoBindInjectable,\r\n            defaultScope: options.defaultScope,\r\n            skipBaseClassChecks: options.skipBaseClassChecks\r\n        };\r\n        this.id = id();\r\n        this._bindingDictionary = new Lookup();\r\n        this._snapshots = [];\r\n        this._middleware = null;\r\n        this._activations = new Lookup();\r\n        this._deactivations = new Lookup();\r\n        this.parent = null;\r\n        this._metadataReader = new MetadataReader();\r\n        this._moduleActivationStore = new ModuleActivationStore();\r\n    }\r\n    Container.merge = function (container1, container2) {\r\n        var containers = [];\r\n        for (var _i = 2; _i < arguments.length; _i++) {\r\n            containers[_i - 2] = arguments[_i];\r\n        }\r\n        var container = new Container();\r\n        var targetContainers = __spreadArray([container1, container2], containers, true).map(function (targetContainer) { return getBindingDictionary(targetContainer); });\r\n        var bindingDictionary = getBindingDictionary(container);\r\n        function copyDictionary(origin, destination) {\r\n            origin.traverse(function (_key, value) {\r\n                value.forEach(function (binding) {\r\n                    destination.add(binding.serviceIdentifier, binding.clone());\r\n                });\r\n            });\r\n        }\r\n        targetContainers.forEach(function (targetBindingDictionary) {\r\n            copyDictionary(targetBindingDictionary, bindingDictionary);\r\n        });\r\n        return container;\r\n    };\r\n    Container.prototype.load = function () {\r\n        var modules = [];\r\n        for (var _i = 0; _i < arguments.length; _i++) {\r\n            modules[_i] = arguments[_i];\r\n        }\r\n        var getHelpers = this._getContainerModuleHelpersFactory();\r\n        for (var _a = 0, modules_1 = modules; _a < modules_1.length; _a++) {\r\n            var currentModule = modules_1[_a];\r\n            var containerModuleHelpers = getHelpers(currentModule.id);\r\n            currentModule.registry(containerModuleHelpers.bindFunction, containerModuleHelpers.unbindFunction, containerModuleHelpers.isboundFunction, containerModuleHelpers.rebindFunction, containerModuleHelpers.unbindAsyncFunction, containerModuleHelpers.onActivationFunction, containerModuleHelpers.onDeactivationFunction);\r\n        }\r\n    };\r\n    Container.prototype.loadAsync = function () {\r\n        var modules = [];\r\n        for (var _i = 0; _i < arguments.length; _i++) {\r\n            modules[_i] = arguments[_i];\r\n        }\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var getHelpers, _a, modules_2, currentModule, containerModuleHelpers;\r\n            return __generator(this, function (_b) {\r\n                switch (_b.label) {\r\n                    case 0:\r\n                        getHelpers = this._getContainerModuleHelpersFactory();\r\n                        _a = 0, modules_2 = modules;\r\n                        _b.label = 1;\r\n                    case 1:\r\n                        if (!(_a < modules_2.length)) return [3, 4];\r\n                        currentModule = modules_2[_a];\r\n                        containerModuleHelpers = getHelpers(currentModule.id);\r\n                        return [4, currentModule.registry(containerModuleHelpers.bindFunction, containerModuleHelpers.unbindFunction, containerModuleHelpers.isboundFunction, containerModuleHelpers.rebindFunction, containerModuleHelpers.unbindAsyncFunction, containerModuleHelpers.onActivationFunction, containerModuleHelpers.onDeactivationFunction)];\r\n                    case 2:\r\n                        _b.sent();\r\n                        _b.label = 3;\r\n                    case 3:\r\n                        _a++;\r\n                        return [3, 1];\r\n                    case 4: return [2];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    Container.prototype.unload = function () {\r\n        var _this = this;\r\n        var modules = [];\r\n        for (var _i = 0; _i < arguments.length; _i++) {\r\n            modules[_i] = arguments[_i];\r\n        }\r\n        modules.forEach(function (module) {\r\n            var deactivations = _this._removeModuleBindings(module.id);\r\n            _this._deactivateSingletons(deactivations);\r\n            _this._removeModuleHandlers(module.id);\r\n        });\r\n    };\r\n    Container.prototype.unloadAsync = function () {\r\n        var modules = [];\r\n        for (var _i = 0; _i < arguments.length; _i++) {\r\n            modules[_i] = arguments[_i];\r\n        }\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var _a, modules_3, module_1, deactivations;\r\n            return __generator(this, function (_b) {\r\n                switch (_b.label) {\r\n                    case 0:\r\n                        _a = 0, modules_3 = modules;\r\n                        _b.label = 1;\r\n                    case 1:\r\n                        if (!(_a < modules_3.length)) return [3, 4];\r\n                        module_1 = modules_3[_a];\r\n                        deactivations = this._removeModuleBindings(module_1.id);\r\n                        return [4, this._deactivateSingletonsAsync(deactivations)];\r\n                    case 2:\r\n                        _b.sent();\r\n                        this._removeModuleHandlers(module_1.id);\r\n                        _b.label = 3;\r\n                    case 3:\r\n                        _a++;\r\n                        return [3, 1];\r\n                    case 4: return [2];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    Container.prototype.bind = function (serviceIdentifier) {\r\n        var scope = this.options.defaultScope || BindingScopeEnum.Transient;\r\n        var binding = new Binding(serviceIdentifier, scope);\r\n        this._bindingDictionary.add(serviceIdentifier, binding);\r\n        return new BindingToSyntax(binding);\r\n    };\r\n    Container.prototype.rebind = function (serviceIdentifier) {\r\n        this.unbind(serviceIdentifier);\r\n        return this.bind(serviceIdentifier);\r\n    };\r\n    Container.prototype.rebindAsync = function (serviceIdentifier) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0: return [4, this.unbindAsync(serviceIdentifier)];\r\n                    case 1:\r\n                        _a.sent();\r\n                        return [2, this.bind(serviceIdentifier)];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    Container.prototype.unbind = function (serviceIdentifier) {\r\n        if (this._bindingDictionary.hasKey(serviceIdentifier)) {\r\n            var bindings = this._bindingDictionary.get(serviceIdentifier);\r\n            this._deactivateSingletons(bindings);\r\n        }\r\n        this._removeServiceFromDictionary(serviceIdentifier);\r\n    };\r\n    Container.prototype.unbindAsync = function (serviceIdentifier) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var bindings;\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0:\r\n                        if (!this._bindingDictionary.hasKey(serviceIdentifier)) return [3, 2];\r\n                        bindings = this._bindingDictionary.get(serviceIdentifier);\r\n                        return [4, this._deactivateSingletonsAsync(bindings)];\r\n                    case 1:\r\n                        _a.sent();\r\n                        _a.label = 2;\r\n                    case 2:\r\n                        this._removeServiceFromDictionary(serviceIdentifier);\r\n                        return [2];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    Container.prototype.unbindAll = function () {\r\n        var _this = this;\r\n        this._bindingDictionary.traverse(function (_key, value) {\r\n            _this._deactivateSingletons(value);\r\n        });\r\n        this._bindingDictionary = new Lookup();\r\n    };\r\n    Container.prototype.unbindAllAsync = function () {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var promises;\r\n            var _this = this;\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0:\r\n                        promises = [];\r\n                        this._bindingDictionary.traverse(function (_key, value) {\r\n                            promises.push(_this._deactivateSingletonsAsync(value));\r\n                        });\r\n                        return [4, Promise.all(promises)];\r\n                    case 1:\r\n                        _a.sent();\r\n                        this._bindingDictionary = new Lookup();\r\n                        return [2];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    Container.prototype.onActivation = function (serviceIdentifier, onActivation) {\r\n        this._activations.add(serviceIdentifier, onActivation);\r\n    };\r\n    Container.prototype.onDeactivation = function (serviceIdentifier, onDeactivation) {\r\n        this._deactivations.add(serviceIdentifier, onDeactivation);\r\n    };\r\n    Container.prototype.isBound = function (serviceIdentifier) {\r\n        var bound = this._bindingDictionary.hasKey(serviceIdentifier);\r\n        if (!bound && this.parent) {\r\n            bound = this.parent.isBound(serviceIdentifier);\r\n        }\r\n        return bound;\r\n    };\r\n    Container.prototype.isCurrentBound = function (serviceIdentifier) {\r\n        return this._bindingDictionary.hasKey(serviceIdentifier);\r\n    };\r\n    Container.prototype.isBoundNamed = function (serviceIdentifier, named) {\r\n        return this.isBoundTagged(serviceIdentifier, METADATA_KEY.NAMED_TAG, named);\r\n    };\r\n    Container.prototype.isBoundTagged = function (serviceIdentifier, key, value) {\r\n        var bound = false;\r\n        if (this._bindingDictionary.hasKey(serviceIdentifier)) {\r\n            var bindings = this._bindingDictionary.get(serviceIdentifier);\r\n            var request_1 = createMockRequest(this, serviceIdentifier, key, value);\r\n            bound = bindings.some(function (b) { return b.constraint(request_1); });\r\n        }\r\n        if (!bound && this.parent) {\r\n            bound = this.parent.isBoundTagged(serviceIdentifier, key, value);\r\n        }\r\n        return bound;\r\n    };\r\n    Container.prototype.snapshot = function () {\r\n        this._snapshots.push(ContainerSnapshot.of(this._bindingDictionary.clone(), this._middleware, this._activations.clone(), this._deactivations.clone(), this._moduleActivationStore.clone()));\r\n    };\r\n    Container.prototype.restore = function () {\r\n        var snapshot = this._snapshots.pop();\r\n        if (snapshot === undefined) {\r\n            throw new Error(ERROR_MSGS.NO_MORE_SNAPSHOTS_AVAILABLE);\r\n        }\r\n        this._bindingDictionary = snapshot.bindings;\r\n        this._activations = snapshot.activations;\r\n        this._deactivations = snapshot.deactivations;\r\n        this._middleware = snapshot.middleware;\r\n        this._moduleActivationStore = snapshot.moduleActivationStore;\r\n    };\r\n    Container.prototype.createChild = function (containerOptions) {\r\n        var child = new Container(containerOptions || this.options);\r\n        child.parent = this;\r\n        return child;\r\n    };\r\n    Container.prototype.applyMiddleware = function () {\r\n        var middlewares = [];\r\n        for (var _i = 0; _i < arguments.length; _i++) {\r\n            middlewares[_i] = arguments[_i];\r\n        }\r\n        var initial = (this._middleware) ? this._middleware : this._planAndResolve();\r\n        this._middleware = middlewares.reduce(function (prev, curr) { return curr(prev); }, initial);\r\n    };\r\n    Container.prototype.applyCustomMetadataReader = function (metadataReader) {\r\n        this._metadataReader = metadataReader;\r\n    };\r\n    Container.prototype.get = function (serviceIdentifier) {\r\n        var getArgs = this._getNotAllArgs(serviceIdentifier, false);\r\n        return this._getButThrowIfAsync(getArgs);\r\n    };\r\n    Container.prototype.getAsync = function (serviceIdentifier) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var getArgs;\r\n            return __generator(this, function (_a) {\r\n                getArgs = this._getNotAllArgs(serviceIdentifier, false);\r\n                return [2, this._get(getArgs)];\r\n            });\r\n        });\r\n    };\r\n    Container.prototype.getTagged = function (serviceIdentifier, key, value) {\r\n        var getArgs = this._getNotAllArgs(serviceIdentifier, false, key, value);\r\n        return this._getButThrowIfAsync(getArgs);\r\n    };\r\n    Container.prototype.getTaggedAsync = function (serviceIdentifier, key, value) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var getArgs;\r\n            return __generator(this, function (_a) {\r\n                getArgs = this._getNotAllArgs(serviceIdentifier, false, key, value);\r\n                return [2, this._get(getArgs)];\r\n            });\r\n        });\r\n    };\r\n    Container.prototype.getNamed = function (serviceIdentifier, named) {\r\n        return this.getTagged(serviceIdentifier, METADATA_KEY.NAMED_TAG, named);\r\n    };\r\n    Container.prototype.getNamedAsync = function (serviceIdentifier, named) {\r\n        return this.getTaggedAsync(serviceIdentifier, METADATA_KEY.NAMED_TAG, named);\r\n    };\r\n    Container.prototype.getAll = function (serviceIdentifier) {\r\n        var getArgs = this._getAllArgs(serviceIdentifier);\r\n        return this._getButThrowIfAsync(getArgs);\r\n    };\r\n    Container.prototype.getAllAsync = function (serviceIdentifier) {\r\n        var getArgs = this._getAllArgs(serviceIdentifier);\r\n        return this._getAll(getArgs);\r\n    };\r\n    Container.prototype.getAllTagged = function (serviceIdentifier, key, value) {\r\n        var getArgs = this._getNotAllArgs(serviceIdentifier, true, key, value);\r\n        return this._getButThrowIfAsync(getArgs);\r\n    };\r\n    Container.prototype.getAllTaggedAsync = function (serviceIdentifier, key, value) {\r\n        var getArgs = this._getNotAllArgs(serviceIdentifier, true, key, value);\r\n        return this._getAll(getArgs);\r\n    };\r\n    Container.prototype.getAllNamed = function (serviceIdentifier, named) {\r\n        return this.getAllTagged(serviceIdentifier, METADATA_KEY.NAMED_TAG, named);\r\n    };\r\n    Container.prototype.getAllNamedAsync = function (serviceIdentifier, named) {\r\n        return this.getAllTaggedAsync(serviceIdentifier, METADATA_KEY.NAMED_TAG, named);\r\n    };\r\n    Container.prototype.resolve = function (constructorFunction) {\r\n        var isBound = this.isBound(constructorFunction);\r\n        if (!isBound) {\r\n            this.bind(constructorFunction).toSelf();\r\n        }\r\n        var resolved = this.get(constructorFunction);\r\n        if (!isBound) {\r\n            this.unbind(constructorFunction);\r\n        }\r\n        return resolved;\r\n    };\r\n    Container.prototype._preDestroy = function (constructor, instance) {\r\n        var _a, _b;\r\n        if (Reflect.hasMetadata(METADATA_KEY.PRE_DESTROY, constructor)) {\r\n            var data = Reflect.getMetadata(METADATA_KEY.PRE_DESTROY, constructor);\r\n            return (_b = (_a = instance)[data.value]) === null || _b === void 0 ? void 0 : _b.call(_a);\r\n        }\r\n    };\r\n    Container.prototype._removeModuleHandlers = function (moduleId) {\r\n        var moduleActivationsHandlers = this._moduleActivationStore.remove(moduleId);\r\n        this._activations.removeIntersection(moduleActivationsHandlers.onActivations);\r\n        this._deactivations.removeIntersection(moduleActivationsHandlers.onDeactivations);\r\n    };\r\n    Container.prototype._removeModuleBindings = function (moduleId) {\r\n        return this._bindingDictionary.removeByCondition(function (binding) { return binding.moduleId === moduleId; });\r\n    };\r\n    Container.prototype._deactivate = function (binding, instance) {\r\n        var _this = this;\r\n        var constructor = Object.getPrototypeOf(instance).constructor;\r\n        try {\r\n            if (this._deactivations.hasKey(binding.serviceIdentifier)) {\r\n                var result = this._deactivateContainer(instance, this._deactivations.get(binding.serviceIdentifier).values());\r\n                if (isPromise(result)) {\r\n                    return this._handleDeactivationError(result.then(function () { return _this._propagateContainerDeactivationThenBindingAndPreDestroyAsync(binding, instance, constructor); }), constructor);\r\n                }\r\n            }\r\n            var propagateDeactivationResult = this._propagateContainerDeactivationThenBindingAndPreDestroy(binding, instance, constructor);\r\n            if (isPromise(propagateDeactivationResult)) {\r\n                return this._handleDeactivationError(propagateDeactivationResult, constructor);\r\n            }\r\n        }\r\n        catch (ex) {\r\n            if (ex instanceof Error) {\r\n                throw new Error(ERROR_MSGS.ON_DEACTIVATION_ERROR(constructor.name, ex.message));\r\n            }\r\n        }\r\n    };\r\n    Container.prototype._handleDeactivationError = function (asyncResult, constructor) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var ex_1;\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0:\r\n                        _a.trys.push([0, 2, , 3]);\r\n                        return [4, asyncResult];\r\n                    case 1:\r\n                        _a.sent();\r\n                        return [3, 3];\r\n                    case 2:\r\n                        ex_1 = _a.sent();\r\n                        if (ex_1 instanceof Error) {\r\n                            throw new Error(ERROR_MSGS.ON_DEACTIVATION_ERROR(constructor.name, ex_1.message));\r\n                        }\r\n                        return [3, 3];\r\n                    case 3: return [2];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    Container.prototype._deactivateContainer = function (instance, deactivationsIterator) {\r\n        var _this = this;\r\n        var deactivation = deactivationsIterator.next();\r\n        while (deactivation.value) {\r\n            var result = deactivation.value(instance);\r\n            if (isPromise(result)) {\r\n                return result.then(function () {\r\n                    return _this._deactivateContainerAsync(instance, deactivationsIterator);\r\n                });\r\n            }\r\n            deactivation = deactivationsIterator.next();\r\n        }\r\n    };\r\n    Container.prototype._deactivateContainerAsync = function (instance, deactivationsIterator) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var deactivation;\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0:\r\n                        deactivation = deactivationsIterator.next();\r\n                        _a.label = 1;\r\n                    case 1:\r\n                        if (!deactivation.value) return [3, 3];\r\n                        return [4, deactivation.value(instance)];\r\n                    case 2:\r\n                        _a.sent();\r\n                        deactivation = deactivationsIterator.next();\r\n                        return [3, 1];\r\n                    case 3: return [2];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    Container.prototype._getContainerModuleHelpersFactory = function () {\r\n        var _this = this;\r\n        var setModuleId = function (bindingToSyntax, moduleId) {\r\n            bindingToSyntax._binding.moduleId = moduleId;\r\n        };\r\n        var getBindFunction = function (moduleId) {\r\n            return function (serviceIdentifier) {\r\n                var bindingToSyntax = _this.bind(serviceIdentifier);\r\n                setModuleId(bindingToSyntax, moduleId);\r\n                return bindingToSyntax;\r\n            };\r\n        };\r\n        var getUnbindFunction = function () {\r\n            return function (serviceIdentifier) {\r\n                return _this.unbind(serviceIdentifier);\r\n            };\r\n        };\r\n        var getUnbindAsyncFunction = function () {\r\n            return function (serviceIdentifier) {\r\n                return _this.unbindAsync(serviceIdentifier);\r\n            };\r\n        };\r\n        var getIsboundFunction = function () {\r\n            return function (serviceIdentifier) {\r\n                return _this.isBound(serviceIdentifier);\r\n            };\r\n        };\r\n        var getRebindFunction = function (moduleId) {\r\n            return function (serviceIdentifier) {\r\n                var bindingToSyntax = _this.rebind(serviceIdentifier);\r\n                setModuleId(bindingToSyntax, moduleId);\r\n                return bindingToSyntax;\r\n            };\r\n        };\r\n        var getOnActivationFunction = function (moduleId) {\r\n            return function (serviceIdentifier, onActivation) {\r\n                _this._moduleActivationStore.addActivation(moduleId, serviceIdentifier, onActivation);\r\n                _this.onActivation(serviceIdentifier, onActivation);\r\n            };\r\n        };\r\n        var getOnDeactivationFunction = function (moduleId) {\r\n            return function (serviceIdentifier, onDeactivation) {\r\n                _this._moduleActivationStore.addDeactivation(moduleId, serviceIdentifier, onDeactivation);\r\n                _this.onDeactivation(serviceIdentifier, onDeactivation);\r\n            };\r\n        };\r\n        return function (mId) { return ({\r\n            bindFunction: getBindFunction(mId),\r\n            isboundFunction: getIsboundFunction(),\r\n            onActivationFunction: getOnActivationFunction(mId),\r\n            onDeactivationFunction: getOnDeactivationFunction(mId),\r\n            rebindFunction: getRebindFunction(mId),\r\n            unbindFunction: getUnbindFunction(),\r\n            unbindAsyncFunction: getUnbindAsyncFunction()\r\n        }); };\r\n    };\r\n    Container.prototype._getAll = function (getArgs) {\r\n        return Promise.all(this._get(getArgs));\r\n    };\r\n    Container.prototype._get = function (getArgs) {\r\n        var planAndResolveArgs = __assign(__assign({}, getArgs), { contextInterceptor: function (context) { return context; }, targetType: TargetTypeEnum.Variable });\r\n        if (this._middleware) {\r\n            var middlewareResult = this._middleware(planAndResolveArgs);\r\n            if (middlewareResult === undefined || middlewareResult === null) {\r\n                throw new Error(ERROR_MSGS.INVALID_MIDDLEWARE_RETURN);\r\n            }\r\n            return middlewareResult;\r\n        }\r\n        return this._planAndResolve()(planAndResolveArgs);\r\n    };\r\n    Container.prototype._getButThrowIfAsync = function (getArgs) {\r\n        var result = this._get(getArgs);\r\n        if (isPromiseOrContainsPromise(result)) {\r\n            throw new Error(ERROR_MSGS.LAZY_IN_SYNC(getArgs.serviceIdentifier));\r\n        }\r\n        return result;\r\n    };\r\n    Container.prototype._getAllArgs = function (serviceIdentifier) {\r\n        var getAllArgs = {\r\n            avoidConstraints: true,\r\n            isMultiInject: true,\r\n            serviceIdentifier: serviceIdentifier,\r\n        };\r\n        return getAllArgs;\r\n    };\r\n    Container.prototype._getNotAllArgs = function (serviceIdentifier, isMultiInject, key, value) {\r\n        var getNotAllArgs = {\r\n            avoidConstraints: false,\r\n            isMultiInject: isMultiInject,\r\n            serviceIdentifier: serviceIdentifier,\r\n            key: key,\r\n            value: value,\r\n        };\r\n        return getNotAllArgs;\r\n    };\r\n    Container.prototype._planAndResolve = function () {\r\n        var _this = this;\r\n        return function (args) {\r\n            var context = plan(_this._metadataReader, _this, args.isMultiInject, args.targetType, args.serviceIdentifier, args.key, args.value, args.avoidConstraints);\r\n            context = args.contextInterceptor(context);\r\n            var result = resolve(context);\r\n            return result;\r\n        };\r\n    };\r\n    Container.prototype._deactivateIfSingleton = function (binding) {\r\n        var _this = this;\r\n        if (!binding.activated) {\r\n            return;\r\n        }\r\n        if (isPromise(binding.cache)) {\r\n            return binding.cache.then(function (resolved) { return _this._deactivate(binding, resolved); });\r\n        }\r\n        return this._deactivate(binding, binding.cache);\r\n    };\r\n    Container.prototype._deactivateSingletons = function (bindings) {\r\n        for (var _i = 0, bindings_1 = bindings; _i < bindings_1.length; _i++) {\r\n            var binding = bindings_1[_i];\r\n            var result = this._deactivateIfSingleton(binding);\r\n            if (isPromise(result)) {\r\n                throw new Error(ERROR_MSGS.ASYNC_UNBIND_REQUIRED);\r\n            }\r\n        }\r\n    };\r\n    Container.prototype._deactivateSingletonsAsync = function (bindings) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var _this = this;\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0: return [4, Promise.all(bindings.map(function (b) { return _this._deactivateIfSingleton(b); }))];\r\n                    case 1:\r\n                        _a.sent();\r\n                        return [2];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    Container.prototype._propagateContainerDeactivationThenBindingAndPreDestroy = function (binding, instance, constructor) {\r\n        if (this.parent) {\r\n            return this._deactivate.bind(this.parent)(binding, instance);\r\n        }\r\n        else {\r\n            return this._bindingDeactivationAndPreDestroy(binding, instance, constructor);\r\n        }\r\n    };\r\n    Container.prototype._propagateContainerDeactivationThenBindingAndPreDestroyAsync = function (binding, instance, constructor) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0:\r\n                        if (!this.parent) return [3, 2];\r\n                        return [4, this._deactivate.bind(this.parent)(binding, instance)];\r\n                    case 1:\r\n                        _a.sent();\r\n                        return [3, 4];\r\n                    case 2: return [4, this._bindingDeactivationAndPreDestroyAsync(binding, instance, constructor)];\r\n                    case 3:\r\n                        _a.sent();\r\n                        _a.label = 4;\r\n                    case 4: return [2];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    Container.prototype._removeServiceFromDictionary = function (serviceIdentifier) {\r\n        try {\r\n            this._bindingDictionary.remove(serviceIdentifier);\r\n        }\r\n        catch (e) {\r\n            throw new Error(ERROR_MSGS.CANNOT_UNBIND + \" \" + getServiceIdentifierAsString(serviceIdentifier));\r\n        }\r\n    };\r\n    Container.prototype._bindingDeactivationAndPreDestroy = function (binding, instance, constructor) {\r\n        var _this = this;\r\n        if (typeof binding.onDeactivation === 'function') {\r\n            var result = binding.onDeactivation(instance);\r\n            if (isPromise(result)) {\r\n                return result.then(function () { return _this._preDestroy(constructor, instance); });\r\n            }\r\n        }\r\n        return this._preDestroy(constructor, instance);\r\n    };\r\n    Container.prototype._bindingDeactivationAndPreDestroyAsync = function (binding, instance, constructor) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0:\r\n                        if (!(typeof binding.onDeactivation === 'function')) return [3, 2];\r\n                        return [4, binding.onDeactivation(instance)];\r\n                    case 1:\r\n                        _a.sent();\r\n                        _a.label = 2;\r\n                    case 2: return [4, this._preDestroy(constructor, instance)];\r\n                    case 3:\r\n                        _a.sent();\r\n                        return [2];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    return Container;\r\n}());\r\nexport { Container };\r\n","var ContainerSnapshot = (function () {\r\n    function ContainerSnapshot() {\r\n    }\r\n    ContainerSnapshot.of = function (bindings, middleware, activations, deactivations, moduleActivationStore) {\r\n        var snapshot = new ContainerSnapshot();\r\n        snapshot.bindings = bindings;\r\n        snapshot.middleware = middleware;\r\n        snapshot.deactivations = deactivations;\r\n        snapshot.activations = activations;\r\n        snapshot.moduleActivationStore = moduleActivationStore;\r\n        return snapshot;\r\n    };\r\n    return ContainerSnapshot;\r\n}());\r\nexport { ContainerSnapshot };\r\n","import * as ERROR_MSGS from '../constants/error_msgs';\r\nimport { isClonable } from '../utils/clonable';\r\nvar Lookup = (function () {\r\n    function Lookup() {\r\n        this._map = new Map();\r\n    }\r\n    Lookup.prototype.getMap = function () {\r\n        return this._map;\r\n    };\r\n    Lookup.prototype.add = function (serviceIdentifier, value) {\r\n        if (serviceIdentifier === null || serviceIdentifier === undefined) {\r\n            throw new Error(ERROR_MSGS.NULL_ARGUMENT);\r\n        }\r\n        if (value === null || value === undefined) {\r\n            throw new Error(ERROR_MSGS.NULL_ARGUMENT);\r\n        }\r\n        var entry = this._map.get(serviceIdentifier);\r\n        if (entry !== undefined) {\r\n            entry.push(value);\r\n        }\r\n        else {\r\n            this._map.set(serviceIdentifier, [value]);\r\n        }\r\n    };\r\n    Lookup.prototype.get = function (serviceIdentifier) {\r\n        if (serviceIdentifier === null || serviceIdentifier === undefined) {\r\n            throw new Error(ERROR_MSGS.NULL_ARGUMENT);\r\n        }\r\n        var entry = this._map.get(serviceIdentifier);\r\n        if (entry !== undefined) {\r\n            return entry;\r\n        }\r\n        else {\r\n            throw new Error(ERROR_MSGS.KEY_NOT_FOUND);\r\n        }\r\n    };\r\n    Lookup.prototype.remove = function (serviceIdentifier) {\r\n        if (serviceIdentifier === null || serviceIdentifier === undefined) {\r\n            throw new Error(ERROR_MSGS.NULL_ARGUMENT);\r\n        }\r\n        if (!this._map.delete(serviceIdentifier)) {\r\n            throw new Error(ERROR_MSGS.KEY_NOT_FOUND);\r\n        }\r\n    };\r\n    Lookup.prototype.removeIntersection = function (lookup) {\r\n        var _this = this;\r\n        this.traverse(function (serviceIdentifier, value) {\r\n            var lookupActivations = lookup.hasKey(serviceIdentifier) ? lookup.get(serviceIdentifier) : undefined;\r\n            if (lookupActivations !== undefined) {\r\n                var filteredValues = value.filter(function (lookupValue) {\r\n                    return !lookupActivations.some(function (moduleActivation) { return lookupValue === moduleActivation; });\r\n                });\r\n                _this._setValue(serviceIdentifier, filteredValues);\r\n            }\r\n        });\r\n    };\r\n    Lookup.prototype.removeByCondition = function (condition) {\r\n        var _this = this;\r\n        var removals = [];\r\n        this._map.forEach(function (entries, key) {\r\n            var updatedEntries = [];\r\n            for (var _i = 0, entries_1 = entries; _i < entries_1.length; _i++) {\r\n                var entry = entries_1[_i];\r\n                var remove = condition(entry);\r\n                if (remove) {\r\n                    removals.push(entry);\r\n                }\r\n                else {\r\n                    updatedEntries.push(entry);\r\n                }\r\n            }\r\n            _this._setValue(key, updatedEntries);\r\n        });\r\n        return removals;\r\n    };\r\n    Lookup.prototype.hasKey = function (serviceIdentifier) {\r\n        if (serviceIdentifier === null || serviceIdentifier === undefined) {\r\n            throw new Error(ERROR_MSGS.NULL_ARGUMENT);\r\n        }\r\n        return this._map.has(serviceIdentifier);\r\n    };\r\n    Lookup.prototype.clone = function () {\r\n        var copy = new Lookup();\r\n        this._map.forEach(function (value, key) {\r\n            value.forEach(function (b) { return copy.add(key, isClonable(b) ? b.clone() : b); });\r\n        });\r\n        return copy;\r\n    };\r\n    Lookup.prototype.traverse = function (func) {\r\n        this._map.forEach(function (value, key) {\r\n            func(key, value);\r\n        });\r\n    };\r\n    Lookup.prototype._setValue = function (serviceIdentifier, value) {\r\n        if (value.length > 0) {\r\n            this._map.set(serviceIdentifier, value);\r\n        }\r\n        else {\r\n            this._map.delete(serviceIdentifier);\r\n        }\r\n    };\r\n    return Lookup;\r\n}());\r\nexport { Lookup };\r\n","import { Lookup } from './lookup';\r\nvar ModuleActivationStore = (function () {\r\n    function ModuleActivationStore() {\r\n        this._map = new Map();\r\n    }\r\n    ModuleActivationStore.prototype.remove = function (moduleId) {\r\n        if (this._map.has(moduleId)) {\r\n            var handlers = this._map.get(moduleId);\r\n            this._map.delete(moduleId);\r\n            return handlers;\r\n        }\r\n        return this._getEmptyHandlersStore();\r\n    };\r\n    ModuleActivationStore.prototype.addDeactivation = function (moduleId, serviceIdentifier, onDeactivation) {\r\n        this._getModuleActivationHandlers(moduleId)\r\n            .onDeactivations.add(serviceIdentifier, onDeactivation);\r\n    };\r\n    ModuleActivationStore.prototype.addActivation = function (moduleId, serviceIdentifier, onActivation) {\r\n        this._getModuleActivationHandlers(moduleId)\r\n            .onActivations.add(serviceIdentifier, onActivation);\r\n    };\r\n    ModuleActivationStore.prototype.clone = function () {\r\n        var clone = new ModuleActivationStore();\r\n        this._map.forEach(function (handlersStore, moduleId) {\r\n            clone._map.set(moduleId, {\r\n                onActivations: handlersStore.onActivations.clone(),\r\n                onDeactivations: handlersStore.onDeactivations.clone(),\r\n            });\r\n        });\r\n        return clone;\r\n    };\r\n    ModuleActivationStore.prototype._getModuleActivationHandlers = function (moduleId) {\r\n        var moduleActivationHandlers = this._map.get(moduleId);\r\n        if (moduleActivationHandlers === undefined) {\r\n            moduleActivationHandlers = this._getEmptyHandlersStore();\r\n            this._map.set(moduleId, moduleActivationHandlers);\r\n        }\r\n        return moduleActivationHandlers;\r\n    };\r\n    ModuleActivationStore.prototype._getEmptyHandlersStore = function () {\r\n        var handlersStore = {\r\n            onActivations: new Lookup(),\r\n            onDeactivations: new Lookup()\r\n        };\r\n        return handlersStore;\r\n    };\r\n    return ModuleActivationStore;\r\n}());\r\nexport { ModuleActivationStore };\r\n","import { id } from '../utils/id';\r\nvar Context = (function () {\r\n    function Context(container) {\r\n        this.id = id();\r\n        this.container = container;\r\n    }\r\n    Context.prototype.addPlan = function (plan) {\r\n        this.plan = plan;\r\n    };\r\n    Context.prototype.setCurrentRequest = function (currentRequest) {\r\n        this.currentRequest = currentRequest;\r\n    };\r\n    return Context;\r\n}());\r\nexport { Context };\r\n","import * as METADATA_KEY from '../constants/metadata_keys';\r\nvar Metadata = (function () {\r\n    function Metadata(key, value) {\r\n        this.key = key;\r\n        this.value = value;\r\n    }\r\n    Metadata.prototype.toString = function () {\r\n        if (this.key === METADATA_KEY.NAMED_TAG) {\r\n            return \"named: \" + String(this.value).toString() + \" \";\r\n        }\r\n        else {\r\n            return \"tagged: { key:\" + this.key.toString() + \", value: \" + String(this.value) + \" }\";\r\n        }\r\n    };\r\n    return Metadata;\r\n}());\r\nexport { Metadata };\r\n","import * as METADATA_KEY from '../constants/metadata_keys';\r\nvar MetadataReader = (function () {\r\n    function MetadataReader() {\r\n    }\r\n    MetadataReader.prototype.getConstructorMetadata = function (constructorFunc) {\r\n        var compilerGeneratedMetadata = Reflect.getMetadata(METADATA_KEY.PARAM_TYPES, constructorFunc);\r\n        var userGeneratedMetadata = Reflect.getMetadata(METADATA_KEY.TAGGED, constructorFunc);\r\n        return {\r\n            compilerGeneratedMetadata: compilerGeneratedMetadata,\r\n            userGeneratedMetadata: userGeneratedMetadata || {}\r\n        };\r\n    };\r\n    MetadataReader.prototype.getPropertiesMetadata = function (constructorFunc) {\r\n        var userGeneratedMetadata = Reflect.getMetadata(METADATA_KEY.TAGGED_PROP, constructorFunc) || [];\r\n        return userGeneratedMetadata;\r\n    };\r\n    return MetadataReader;\r\n}());\r\nexport { MetadataReader };\r\n","var Plan = (function () {\r\n    function Plan(parentContext, rootRequest) {\r\n        this.parentContext = parentContext;\r\n        this.rootRequest = rootRequest;\r\n    }\r\n    return Plan;\r\n}());\r\nexport { Plan };\r\n","import { BindingCount } from '../bindings/binding_count';\r\nimport * as ERROR_MSGS from '../constants/error_msgs';\r\nimport { BindingTypeEnum, TargetTypeEnum } from '../constants/literal_types';\r\nimport * as METADATA_KEY from '../constants/metadata_keys';\r\nimport { isStackOverflowExeption } from '../utils/exceptions';\r\nimport { circularDependencyToException, getServiceIdentifierAsString, listMetadataForTarget, listRegisteredBindingsForServiceIdentifier } from '../utils/serialization';\r\nimport { Context } from './context';\r\nimport { Metadata } from './metadata';\r\nimport { Plan } from './plan';\r\nimport { getBaseClassDependencyCount, getDependencies, getFunctionName } from './reflection_utils';\r\nimport { Request } from './request';\r\nimport { Target } from './target';\r\nfunction getBindingDictionary(cntnr) {\r\n    return cntnr._bindingDictionary;\r\n}\r\nfunction _createTarget(isMultiInject, targetType, serviceIdentifier, name, key, value) {\r\n    var metadataKey = isMultiInject ? METADATA_KEY.MULTI_INJECT_TAG : METADATA_KEY.INJECT_TAG;\r\n    var injectMetadata = new Metadata(metadataKey, serviceIdentifier);\r\n    var target = new Target(targetType, name, serviceIdentifier, injectMetadata);\r\n    if (key !== undefined) {\r\n        var tagMetadata = new Metadata(key, value);\r\n        target.metadata.push(tagMetadata);\r\n    }\r\n    return target;\r\n}\r\nfunction _getActiveBindings(metadataReader, avoidConstraints, context, parentRequest, target) {\r\n    var bindings = getBindings(context.container, target.serviceIdentifier);\r\n    var activeBindings = [];\r\n    if (bindings.length === BindingCount.NoBindingsAvailable &&\r\n        context.container.options.autoBindInjectable &&\r\n        typeof target.serviceIdentifier === 'function' &&\r\n        metadataReader.getConstructorMetadata(target.serviceIdentifier).compilerGeneratedMetadata) {\r\n        context.container.bind(target.serviceIdentifier).toSelf();\r\n        bindings = getBindings(context.container, target.serviceIdentifier);\r\n    }\r\n    if (!avoidConstraints) {\r\n        activeBindings = bindings.filter(function (binding) {\r\n            var request = new Request(binding.serviceIdentifier, context, parentRequest, binding, target);\r\n            return binding.constraint(request);\r\n        });\r\n    }\r\n    else {\r\n        activeBindings = bindings;\r\n    }\r\n    _validateActiveBindingCount(target.serviceIdentifier, activeBindings, target, context.container);\r\n    return activeBindings;\r\n}\r\nfunction _validateActiveBindingCount(serviceIdentifier, bindings, target, container) {\r\n    switch (bindings.length) {\r\n        case BindingCount.NoBindingsAvailable:\r\n            if (target.isOptional()) {\r\n                return bindings;\r\n            }\r\n            else {\r\n                var serviceIdentifierString = getServiceIdentifierAsString(serviceIdentifier);\r\n                var msg = ERROR_MSGS.NOT_REGISTERED;\r\n                msg += listMetadataForTarget(serviceIdentifierString, target);\r\n                msg += listRegisteredBindingsForServiceIdentifier(container, serviceIdentifierString, getBindings);\r\n                throw new Error(msg);\r\n            }\r\n        case BindingCount.OnlyOneBindingAvailable:\r\n            return bindings;\r\n        case BindingCount.MultipleBindingsAvailable:\r\n        default:\r\n            if (!target.isArray()) {\r\n                var serviceIdentifierString = getServiceIdentifierAsString(serviceIdentifier);\r\n                var msg = ERROR_MSGS.AMBIGUOUS_MATCH + \" \" + serviceIdentifierString;\r\n                msg += listRegisteredBindingsForServiceIdentifier(container, serviceIdentifierString, getBindings);\r\n                throw new Error(msg);\r\n            }\r\n            else {\r\n                return bindings;\r\n            }\r\n    }\r\n}\r\nfunction _createSubRequests(metadataReader, avoidConstraints, serviceIdentifier, context, parentRequest, target) {\r\n    var activeBindings;\r\n    var childRequest;\r\n    if (parentRequest === null) {\r\n        activeBindings = _getActiveBindings(metadataReader, avoidConstraints, context, null, target);\r\n        childRequest = new Request(serviceIdentifier, context, null, activeBindings, target);\r\n        var thePlan = new Plan(context, childRequest);\r\n        context.addPlan(thePlan);\r\n    }\r\n    else {\r\n        activeBindings = _getActiveBindings(metadataReader, avoidConstraints, context, parentRequest, target);\r\n        childRequest = parentRequest.addChildRequest(target.serviceIdentifier, activeBindings, target);\r\n    }\r\n    activeBindings.forEach(function (binding) {\r\n        var subChildRequest = null;\r\n        if (target.isArray()) {\r\n            subChildRequest = childRequest.addChildRequest(binding.serviceIdentifier, binding, target);\r\n        }\r\n        else {\r\n            if (binding.cache) {\r\n                return;\r\n            }\r\n            subChildRequest = childRequest;\r\n        }\r\n        if (binding.type === BindingTypeEnum.Instance && binding.implementationType !== null) {\r\n            var dependencies = getDependencies(metadataReader, binding.implementationType);\r\n            if (!context.container.options.skipBaseClassChecks) {\r\n                var baseClassDependencyCount = getBaseClassDependencyCount(metadataReader, binding.implementationType);\r\n                if (dependencies.length < baseClassDependencyCount) {\r\n                    var error = ERROR_MSGS.ARGUMENTS_LENGTH_MISMATCH(getFunctionName(binding.implementationType));\r\n                    throw new Error(error);\r\n                }\r\n            }\r\n            dependencies.forEach(function (dependency) {\r\n                _createSubRequests(metadataReader, false, dependency.serviceIdentifier, context, subChildRequest, dependency);\r\n            });\r\n        }\r\n    });\r\n}\r\nfunction getBindings(container, serviceIdentifier) {\r\n    var bindings = [];\r\n    var bindingDictionary = getBindingDictionary(container);\r\n    if (bindingDictionary.hasKey(serviceIdentifier)) {\r\n        bindings = bindingDictionary.get(serviceIdentifier);\r\n    }\r\n    else if (container.parent !== null) {\r\n        bindings = getBindings(container.parent, serviceIdentifier);\r\n    }\r\n    return bindings;\r\n}\r\nfunction plan(metadataReader, container, isMultiInject, targetType, serviceIdentifier, key, value, avoidConstraints) {\r\n    if (avoidConstraints === void 0) { avoidConstraints = false; }\r\n    var context = new Context(container);\r\n    var target = _createTarget(isMultiInject, targetType, serviceIdentifier, '', key, value);\r\n    try {\r\n        _createSubRequests(metadataReader, avoidConstraints, serviceIdentifier, context, null, target);\r\n        return context;\r\n    }\r\n    catch (error) {\r\n        if (isStackOverflowExeption(error)) {\r\n            circularDependencyToException(context.plan.rootRequest);\r\n        }\r\n        throw error;\r\n    }\r\n}\r\nfunction createMockRequest(container, serviceIdentifier, key, value) {\r\n    var target = new Target(TargetTypeEnum.Variable, '', serviceIdentifier, new Metadata(key, value));\r\n    var context = new Context(container);\r\n    var request = new Request(serviceIdentifier, context, null, [], target);\r\n    return request;\r\n}\r\nexport { plan, createMockRequest, getBindingDictionary };\r\n","var QueryableString = (function () {\r\n    function QueryableString(str) {\r\n        this.str = str;\r\n    }\r\n    QueryableString.prototype.startsWith = function (searchString) {\r\n        return this.str.indexOf(searchString) === 0;\r\n    };\r\n    QueryableString.prototype.endsWith = function (searchString) {\r\n        var reverseString = '';\r\n        var reverseSearchString = searchString.split('').reverse().join('');\r\n        reverseString = this.str.split('').reverse().join('');\r\n        return this.startsWith.call({ str: reverseString }, reverseSearchString);\r\n    };\r\n    QueryableString.prototype.contains = function (searchString) {\r\n        return (this.str.indexOf(searchString) !== -1);\r\n    };\r\n    QueryableString.prototype.equals = function (compareString) {\r\n        return this.str === compareString;\r\n    };\r\n    QueryableString.prototype.value = function () {\r\n        return this.str;\r\n    };\r\n    return QueryableString;\r\n}());\r\nexport { QueryableString };\r\n","var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {\r\n    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\r\n        if (ar || !(i in from)) {\r\n            if (!ar) ar = Array.prototype.slice.call(from, 0, i);\r\n            ar[i] = from[i];\r\n        }\r\n    }\r\n    return to.concat(ar || Array.prototype.slice.call(from));\r\n};\r\nimport { LazyServiceIdentifier } from '../annotation/lazy_service_identifier';\r\nimport * as ERROR_MSGS from '../constants/error_msgs';\r\nimport { TargetTypeEnum } from '../constants/literal_types';\r\nimport * as METADATA_KEY from '../constants/metadata_keys';\r\nimport { getFunctionName } from '../utils/serialization';\r\nimport { Target } from './target';\r\nfunction getDependencies(metadataReader, func) {\r\n    var constructorName = getFunctionName(func);\r\n    return getTargets(metadataReader, constructorName, func, false);\r\n}\r\nfunction getTargets(metadataReader, constructorName, func, isBaseClass) {\r\n    var metadata = metadataReader.getConstructorMetadata(func);\r\n    var serviceIdentifiers = metadata.compilerGeneratedMetadata;\r\n    if (serviceIdentifiers === undefined) {\r\n        var msg = ERROR_MSGS.MISSING_INJECTABLE_ANNOTATION + \" \" + constructorName + \".\";\r\n        throw new Error(msg);\r\n    }\r\n    var constructorArgsMetadata = metadata.userGeneratedMetadata;\r\n    var keys = Object.keys(constructorArgsMetadata);\r\n    var hasUserDeclaredUnknownInjections = (func.length === 0 && keys.length > 0);\r\n    var hasOptionalParameters = keys.length > func.length;\r\n    var iterations = (hasUserDeclaredUnknownInjections || hasOptionalParameters) ? keys.length : func.length;\r\n    var constructorTargets = getConstructorArgsAsTargets(isBaseClass, constructorName, serviceIdentifiers, constructorArgsMetadata, iterations);\r\n    var propertyTargets = getClassPropsAsTargets(metadataReader, func, constructorName);\r\n    var targets = __spreadArray(__spreadArray([], constructorTargets, true), propertyTargets, true);\r\n    return targets;\r\n}\r\nfunction getConstructorArgsAsTarget(index, isBaseClass, constructorName, serviceIdentifiers, constructorArgsMetadata) {\r\n    var targetMetadata = constructorArgsMetadata[index.toString()] || [];\r\n    var metadata = formatTargetMetadata(targetMetadata);\r\n    var isManaged = metadata.unmanaged !== true;\r\n    var serviceIdentifier = serviceIdentifiers[index];\r\n    var injectIdentifier = metadata.inject || metadata.multiInject;\r\n    serviceIdentifier = (injectIdentifier ? injectIdentifier : serviceIdentifier);\r\n    if (serviceIdentifier instanceof LazyServiceIdentifier) {\r\n        serviceIdentifier = serviceIdentifier.unwrap();\r\n    }\r\n    if (isManaged) {\r\n        var isObject = serviceIdentifier === Object;\r\n        var isFunction = serviceIdentifier === Function;\r\n        var isUndefined = serviceIdentifier === undefined;\r\n        var isUnknownType = isObject || isFunction || isUndefined;\r\n        if (!isBaseClass && isUnknownType) {\r\n            var msg = ERROR_MSGS.MISSING_INJECT_ANNOTATION + \" argument \" + index + \" in class \" + constructorName + \".\";\r\n            throw new Error(msg);\r\n        }\r\n        var target = new Target(TargetTypeEnum.ConstructorArgument, metadata.targetName, serviceIdentifier);\r\n        target.metadata = targetMetadata;\r\n        return target;\r\n    }\r\n    return null;\r\n}\r\nfunction getConstructorArgsAsTargets(isBaseClass, constructorName, serviceIdentifiers, constructorArgsMetadata, iterations) {\r\n    var targets = [];\r\n    for (var i = 0; i < iterations; i++) {\r\n        var index = i;\r\n        var target = getConstructorArgsAsTarget(index, isBaseClass, constructorName, serviceIdentifiers, constructorArgsMetadata);\r\n        if (target !== null) {\r\n            targets.push(target);\r\n        }\r\n    }\r\n    return targets;\r\n}\r\nfunction _getServiceIdentifierForProperty(inject, multiInject, propertyName, className) {\r\n    var serviceIdentifier = (inject || multiInject);\r\n    if (serviceIdentifier === undefined) {\r\n        var msg = ERROR_MSGS.MISSING_INJECTABLE_ANNOTATION + \" for property \" + String(propertyName) + \" in class \" + className + \".\";\r\n        throw new Error(msg);\r\n    }\r\n    return serviceIdentifier;\r\n}\r\nfunction getClassPropsAsTargets(metadataReader, constructorFunc, constructorName) {\r\n    var classPropsMetadata = metadataReader.getPropertiesMetadata(constructorFunc);\r\n    var targets = [];\r\n    var symbolKeys = Object.getOwnPropertySymbols(classPropsMetadata);\r\n    var stringKeys = Object.keys(classPropsMetadata);\r\n    var keys = stringKeys.concat(symbolKeys);\r\n    for (var _i = 0, keys_1 = keys; _i < keys_1.length; _i++) {\r\n        var key = keys_1[_i];\r\n        var targetMetadata = classPropsMetadata[key];\r\n        var metadata = formatTargetMetadata(targetMetadata);\r\n        var identifier = metadata.targetName || key;\r\n        var serviceIdentifier = _getServiceIdentifierForProperty(metadata.inject, metadata.multiInject, key, constructorName);\r\n        var target = new Target(TargetTypeEnum.ClassProperty, identifier, serviceIdentifier);\r\n        target.metadata = targetMetadata;\r\n        targets.push(target);\r\n    }\r\n    var baseConstructor = Object.getPrototypeOf(constructorFunc.prototype).constructor;\r\n    if (baseConstructor !== Object) {\r\n        var baseTargets = getClassPropsAsTargets(metadataReader, baseConstructor, constructorName);\r\n        targets = __spreadArray(__spreadArray([], targets, true), baseTargets, true);\r\n    }\r\n    return targets;\r\n}\r\nfunction getBaseClassDependencyCount(metadataReader, func) {\r\n    var baseConstructor = Object.getPrototypeOf(func.prototype).constructor;\r\n    if (baseConstructor !== Object) {\r\n        var baseConstructorName = getFunctionName(baseConstructor);\r\n        var targets = getTargets(metadataReader, baseConstructorName, baseConstructor, true);\r\n        var metadata = targets.map(function (t) { return t.metadata.filter(function (m) { return m.key === METADATA_KEY.UNMANAGED_TAG; }); });\r\n        var unmanagedCount = [].concat.apply([], metadata).length;\r\n        var dependencyCount = targets.length - unmanagedCount;\r\n        if (dependencyCount > 0) {\r\n            return dependencyCount;\r\n        }\r\n        else {\r\n            return getBaseClassDependencyCount(metadataReader, baseConstructor);\r\n        }\r\n    }\r\n    else {\r\n        return 0;\r\n    }\r\n}\r\nfunction formatTargetMetadata(targetMetadata) {\r\n    var targetMetadataMap = {};\r\n    targetMetadata.forEach(function (m) {\r\n        targetMetadataMap[m.key.toString()] = m.value;\r\n    });\r\n    return {\r\n        inject: targetMetadataMap[METADATA_KEY.INJECT_TAG],\r\n        multiInject: targetMetadataMap[METADATA_KEY.MULTI_INJECT_TAG],\r\n        targetName: targetMetadataMap[METADATA_KEY.NAME_TAG],\r\n        unmanaged: targetMetadataMap[METADATA_KEY.UNMANAGED_TAG]\r\n    };\r\n}\r\nexport { getDependencies, getBaseClassDependencyCount, getFunctionName };\r\n","import { id } from '../utils/id';\r\nvar Request = (function () {\r\n    function Request(serviceIdentifier, parentContext, parentRequest, bindings, target) {\r\n        this.id = id();\r\n        this.serviceIdentifier = serviceIdentifier;\r\n        this.parentContext = parentContext;\r\n        this.parentRequest = parentRequest;\r\n        this.target = target;\r\n        this.childRequests = [];\r\n        this.bindings = (Array.isArray(bindings) ? bindings : [bindings]);\r\n        this.requestScope = parentRequest === null\r\n            ? new Map()\r\n            : null;\r\n    }\r\n    Request.prototype.addChildRequest = function (serviceIdentifier, bindings, target) {\r\n        var child = new Request(serviceIdentifier, this.parentContext, this, bindings, target);\r\n        this.childRequests.push(child);\r\n        return child;\r\n    };\r\n    return Request;\r\n}());\r\nexport { Request };\r\n","import * as METADATA_KEY from '../constants/metadata_keys';\r\nimport { id } from '../utils/id';\r\nimport { getSymbolDescription } from '../utils/serialization';\r\nimport { Metadata } from './metadata';\r\nimport { QueryableString } from './queryable_string';\r\nvar Target = (function () {\r\n    function Target(type, identifier, serviceIdentifier, namedOrTagged) {\r\n        this.id = id();\r\n        this.type = type;\r\n        this.serviceIdentifier = serviceIdentifier;\r\n        var queryableName = typeof identifier === 'symbol' ? getSymbolDescription(identifier) : identifier;\r\n        this.name = new QueryableString(queryableName || '');\r\n        this.identifier = identifier;\r\n        this.metadata = new Array();\r\n        var metadataItem = null;\r\n        if (typeof namedOrTagged === 'string') {\r\n            metadataItem = new Metadata(METADATA_KEY.NAMED_TAG, namedOrTagged);\r\n        }\r\n        else if (namedOrTagged instanceof Metadata) {\r\n            metadataItem = namedOrTagged;\r\n        }\r\n        if (metadataItem !== null) {\r\n            this.metadata.push(metadataItem);\r\n        }\r\n    }\r\n    Target.prototype.hasTag = function (key) {\r\n        for (var _i = 0, _a = this.metadata; _i < _a.length; _i++) {\r\n            var m = _a[_i];\r\n            if (m.key === key) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    };\r\n    Target.prototype.isArray = function () {\r\n        return this.hasTag(METADATA_KEY.MULTI_INJECT_TAG);\r\n    };\r\n    Target.prototype.matchesArray = function (name) {\r\n        return this.matchesTag(METADATA_KEY.MULTI_INJECT_TAG)(name);\r\n    };\r\n    Target.prototype.isNamed = function () {\r\n        return this.hasTag(METADATA_KEY.NAMED_TAG);\r\n    };\r\n    Target.prototype.isTagged = function () {\r\n        return this.metadata.some(function (metadata) { return METADATA_KEY.NON_CUSTOM_TAG_KEYS.every(function (key) { return metadata.key !== key; }); });\r\n    };\r\n    Target.prototype.isOptional = function () {\r\n        return this.matchesTag(METADATA_KEY.OPTIONAL_TAG)(true);\r\n    };\r\n    Target.prototype.getNamedTag = function () {\r\n        if (this.isNamed()) {\r\n            return this.metadata.filter(function (m) { return m.key === METADATA_KEY.NAMED_TAG; })[0];\r\n        }\r\n        return null;\r\n    };\r\n    Target.prototype.getCustomTags = function () {\r\n        if (this.isTagged()) {\r\n            return this.metadata.filter(function (metadata) { return METADATA_KEY.NON_CUSTOM_TAG_KEYS.every(function (key) { return metadata.key !== key; }); });\r\n        }\r\n        else {\r\n            return null;\r\n        }\r\n    };\r\n    Target.prototype.matchesNamedTag = function (name) {\r\n        return this.matchesTag(METADATA_KEY.NAMED_TAG)(name);\r\n    };\r\n    Target.prototype.matchesTag = function (key) {\r\n        var _this = this;\r\n        return function (value) {\r\n            for (var _i = 0, _a = _this.metadata; _i < _a.length; _i++) {\r\n                var m = _a[_i];\r\n                if (m.key === key && m.value === value) {\r\n                    return true;\r\n                }\r\n            }\r\n            return false;\r\n        };\r\n    };\r\n    return Target;\r\n}());\r\nexport { Target };\r\n","var __assign = (this && this.__assign) || function () {\r\n    __assign = Object.assign || function(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\r\n                t[p] = s[p];\r\n        }\r\n        return t;\r\n    };\r\n    return __assign.apply(this, arguments);\r\n};\r\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n};\r\nvar __generator = (this && this.__generator) || function (thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n};\r\nvar __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {\r\n    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\r\n        if (ar || !(i in from)) {\r\n            if (!ar) ar = Array.prototype.slice.call(from, 0, i);\r\n            ar[i] = from[i];\r\n        }\r\n    }\r\n    return to.concat(ar || Array.prototype.slice.call(from));\r\n};\r\nimport { ON_DEACTIVATION_ERROR, POST_CONSTRUCT_ERROR, PRE_DESTROY_ERROR } from '../constants/error_msgs';\r\nimport { BindingScopeEnum, TargetTypeEnum } from '../constants/literal_types';\r\nimport * as METADATA_KEY from '../constants/metadata_keys';\r\nimport { isPromise, isPromiseOrContainsPromise } from '../utils/async';\r\nfunction _resolveRequests(childRequests, resolveRequest) {\r\n    return childRequests.reduce(function (resolvedRequests, childRequest) {\r\n        var injection = resolveRequest(childRequest);\r\n        var targetType = childRequest.target.type;\r\n        if (targetType === TargetTypeEnum.ConstructorArgument) {\r\n            resolvedRequests.constructorInjections.push(injection);\r\n        }\r\n        else {\r\n            resolvedRequests.propertyRequests.push(childRequest);\r\n            resolvedRequests.propertyInjections.push(injection);\r\n        }\r\n        if (!resolvedRequests.isAsync) {\r\n            resolvedRequests.isAsync = isPromiseOrContainsPromise(injection);\r\n        }\r\n        return resolvedRequests;\r\n    }, { constructorInjections: [], propertyInjections: [], propertyRequests: [], isAsync: false });\r\n}\r\nfunction _createInstance(constr, childRequests, resolveRequest) {\r\n    var result;\r\n    if (childRequests.length > 0) {\r\n        var resolved = _resolveRequests(childRequests, resolveRequest);\r\n        var createInstanceWithInjectionsArg = __assign(__assign({}, resolved), { constr: constr });\r\n        if (resolved.isAsync) {\r\n            result = createInstanceWithInjectionsAsync(createInstanceWithInjectionsArg);\r\n        }\r\n        else {\r\n            result = createInstanceWithInjections(createInstanceWithInjectionsArg);\r\n        }\r\n    }\r\n    else {\r\n        result = new constr();\r\n    }\r\n    return result;\r\n}\r\nfunction createInstanceWithInjections(args) {\r\n    var _a;\r\n    var instance = new ((_a = args.constr).bind.apply(_a, __spreadArray([void 0], args.constructorInjections, false)))();\r\n    args.propertyRequests.forEach(function (r, index) {\r\n        var property = r.target.identifier;\r\n        var injection = args.propertyInjections[index];\r\n        if (!r.target.isOptional() || injection !== undefined) {\r\n            instance[property] = injection;\r\n        }\r\n    });\r\n    return instance;\r\n}\r\nfunction createInstanceWithInjectionsAsync(args) {\r\n    return __awaiter(this, void 0, void 0, function () {\r\n        var constructorInjections, propertyInjections;\r\n        return __generator(this, function (_a) {\r\n            switch (_a.label) {\r\n                case 0: return [4, possiblyWaitInjections(args.constructorInjections)];\r\n                case 1:\r\n                    constructorInjections = _a.sent();\r\n                    return [4, possiblyWaitInjections(args.propertyInjections)];\r\n                case 2:\r\n                    propertyInjections = _a.sent();\r\n                    return [2, createInstanceWithInjections(__assign(__assign({}, args), { constructorInjections: constructorInjections, propertyInjections: propertyInjections }))];\r\n            }\r\n        });\r\n    });\r\n}\r\nfunction possiblyWaitInjections(possiblePromiseinjections) {\r\n    return __awaiter(this, void 0, void 0, function () {\r\n        var injections, _i, possiblePromiseinjections_1, injection;\r\n        return __generator(this, function (_a) {\r\n            injections = [];\r\n            for (_i = 0, possiblePromiseinjections_1 = possiblePromiseinjections; _i < possiblePromiseinjections_1.length; _i++) {\r\n                injection = possiblePromiseinjections_1[_i];\r\n                if (Array.isArray(injection)) {\r\n                    injections.push(Promise.all(injection));\r\n                }\r\n                else {\r\n                    injections.push(injection);\r\n                }\r\n            }\r\n            return [2, Promise.all(injections)];\r\n        });\r\n    });\r\n}\r\nfunction _getInstanceAfterPostConstruct(constr, result) {\r\n    var postConstructResult = _postConstruct(constr, result);\r\n    if (isPromise(postConstructResult)) {\r\n        return postConstructResult.then(function () { return result; });\r\n    }\r\n    else {\r\n        return result;\r\n    }\r\n}\r\nfunction _postConstruct(constr, instance) {\r\n    var _a, _b;\r\n    if (Reflect.hasMetadata(METADATA_KEY.POST_CONSTRUCT, constr)) {\r\n        var data = Reflect.getMetadata(METADATA_KEY.POST_CONSTRUCT, constr);\r\n        try {\r\n            return (_b = (_a = instance)[data.value]) === null || _b === void 0 ? void 0 : _b.call(_a);\r\n        }\r\n        catch (e) {\r\n            if (e instanceof Error) {\r\n                throw new Error(POST_CONSTRUCT_ERROR(constr.name, e.message));\r\n            }\r\n        }\r\n    }\r\n}\r\nfunction _validateInstanceResolution(binding, constr) {\r\n    if (binding.scope !== BindingScopeEnum.Singleton) {\r\n        _throwIfHandlingDeactivation(binding, constr);\r\n    }\r\n}\r\nfunction _throwIfHandlingDeactivation(binding, constr) {\r\n    var scopeErrorMessage = \"Class cannot be instantiated in \" + (binding.scope === BindingScopeEnum.Request ?\r\n        'request' :\r\n        'transient') + \" scope.\";\r\n    if (typeof binding.onDeactivation === 'function') {\r\n        throw new Error(ON_DEACTIVATION_ERROR(constr.name, scopeErrorMessage));\r\n    }\r\n    if (Reflect.hasMetadata(METADATA_KEY.PRE_DESTROY, constr)) {\r\n        throw new Error(PRE_DESTROY_ERROR(constr.name, scopeErrorMessage));\r\n    }\r\n}\r\nfunction resolveInstance(binding, constr, childRequests, resolveRequest) {\r\n    _validateInstanceResolution(binding, constr);\r\n    var result = _createInstance(constr, childRequests, resolveRequest);\r\n    if (isPromise(result)) {\r\n        return result.then(function (resolvedResult) { return _getInstanceAfterPostConstruct(constr, resolvedResult); });\r\n    }\r\n    else {\r\n        return _getInstanceAfterPostConstruct(constr, result);\r\n    }\r\n}\r\nexport { resolveInstance };\r\n","var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n};\r\nvar __generator = (this && this.__generator) || function (thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n};\r\nimport * as ERROR_MSGS from '../constants/error_msgs';\r\nimport { BindingTypeEnum } from '../constants/literal_types';\r\nimport { getBindingDictionary } from '../planning/planner';\r\nimport { saveToScope, tryGetFromScope } from '../scope/scope';\r\nimport { isPromise } from '../utils/async';\r\nimport { getFactoryDetails, ensureFullyBound } from '../utils/binding_utils';\r\nimport { tryAndThrowErrorIfStackOverflow } from '../utils/exceptions';\r\nimport { resolveInstance } from './instantiation';\r\nvar _resolveRequest = function (requestScope) {\r\n    return function (request) {\r\n        request.parentContext.setCurrentRequest(request);\r\n        var bindings = request.bindings;\r\n        var childRequests = request.childRequests;\r\n        var targetIsAnArray = request.target && request.target.isArray();\r\n        var targetParentIsNotAnArray = !request.parentRequest ||\r\n            !request.parentRequest.target ||\r\n            !request.target ||\r\n            !request.parentRequest.target.matchesArray(request.target.serviceIdentifier);\r\n        if (targetIsAnArray && targetParentIsNotAnArray) {\r\n            return childRequests.map(function (childRequest) {\r\n                var _f = _resolveRequest(requestScope);\r\n                return _f(childRequest);\r\n            });\r\n        }\r\n        else {\r\n            if (request.target.isOptional() && bindings.length === 0) {\r\n                return undefined;\r\n            }\r\n            var binding = bindings[0];\r\n            return _resolveBinding(requestScope, request, binding);\r\n        }\r\n    };\r\n};\r\nvar _resolveFactoryFromBinding = function (binding, context) {\r\n    var factoryDetails = getFactoryDetails(binding);\r\n    return tryAndThrowErrorIfStackOverflow(function () { return factoryDetails.factory.bind(binding)(context); }, function () { return new Error(ERROR_MSGS.CIRCULAR_DEPENDENCY_IN_FACTORY(factoryDetails.factoryType, context.currentRequest.serviceIdentifier.toString())); });\r\n};\r\nvar _getResolvedFromBinding = function (requestScope, request, binding) {\r\n    var result;\r\n    var childRequests = request.childRequests;\r\n    ensureFullyBound(binding);\r\n    switch (binding.type) {\r\n        case BindingTypeEnum.ConstantValue:\r\n        case BindingTypeEnum.Function:\r\n            result = binding.cache;\r\n            break;\r\n        case BindingTypeEnum.Constructor:\r\n            result = binding.implementationType;\r\n            break;\r\n        case BindingTypeEnum.Instance:\r\n            result = resolveInstance(binding, binding.implementationType, childRequests, _resolveRequest(requestScope));\r\n            break;\r\n        default:\r\n            result = _resolveFactoryFromBinding(binding, request.parentContext);\r\n    }\r\n    return result;\r\n};\r\nvar _resolveInScope = function (requestScope, binding, resolveFromBinding) {\r\n    var result = tryGetFromScope(requestScope, binding);\r\n    if (result !== null) {\r\n        return result;\r\n    }\r\n    result = resolveFromBinding();\r\n    saveToScope(requestScope, binding, result);\r\n    return result;\r\n};\r\nvar _resolveBinding = function (requestScope, request, binding) {\r\n    return _resolveInScope(requestScope, binding, function () {\r\n        var result = _getResolvedFromBinding(requestScope, request, binding);\r\n        if (isPromise(result)) {\r\n            result = result.then(function (resolved) { return _onActivation(request, binding, resolved); });\r\n        }\r\n        else {\r\n            result = _onActivation(request, binding, result);\r\n        }\r\n        return result;\r\n    });\r\n};\r\nfunction _onActivation(request, binding, resolved) {\r\n    var result = _bindingActivation(request.parentContext, binding, resolved);\r\n    var containersIterator = _getContainersIterator(request.parentContext.container);\r\n    var container;\r\n    var containersIteratorResult = containersIterator.next();\r\n    do {\r\n        container = containersIteratorResult.value;\r\n        var context_1 = request.parentContext;\r\n        var serviceIdentifier = request.serviceIdentifier;\r\n        var activationsIterator = _getContainerActivationsForService(container, serviceIdentifier);\r\n        if (isPromise(result)) {\r\n            result = _activateContainerAsync(activationsIterator, context_1, result);\r\n        }\r\n        else {\r\n            result = _activateContainer(activationsIterator, context_1, result);\r\n        }\r\n        containersIteratorResult = containersIterator.next();\r\n    } while (containersIteratorResult.done !== true && !getBindingDictionary(container).hasKey(request.serviceIdentifier));\r\n    return result;\r\n}\r\nvar _bindingActivation = function (context, binding, previousResult) {\r\n    var result;\r\n    if (typeof binding.onActivation === 'function') {\r\n        result = binding.onActivation(context, previousResult);\r\n    }\r\n    else {\r\n        result = previousResult;\r\n    }\r\n    return result;\r\n};\r\nvar _activateContainer = function (activationsIterator, context, result) {\r\n    var activation = activationsIterator.next();\r\n    while (!activation.done) {\r\n        result = activation.value(context, result);\r\n        if (isPromise(result)) {\r\n            return _activateContainerAsync(activationsIterator, context, result);\r\n        }\r\n        activation = activationsIterator.next();\r\n    }\r\n    return result;\r\n};\r\nvar _activateContainerAsync = function (activationsIterator, context, resultPromise) { return __awaiter(void 0, void 0, void 0, function () {\r\n    var result, activation;\r\n    return __generator(this, function (_a) {\r\n        switch (_a.label) {\r\n            case 0: return [4, resultPromise];\r\n            case 1:\r\n                result = _a.sent();\r\n                activation = activationsIterator.next();\r\n                _a.label = 2;\r\n            case 2:\r\n                if (!!activation.done) return [3, 4];\r\n                return [4, activation.value(context, result)];\r\n            case 3:\r\n                result = _a.sent();\r\n                activation = activationsIterator.next();\r\n                return [3, 2];\r\n            case 4: return [2, result];\r\n        }\r\n    });\r\n}); };\r\nvar _getContainerActivationsForService = function (container, serviceIdentifier) {\r\n    var activations = container._activations;\r\n    return activations.hasKey(serviceIdentifier) ? activations.get(serviceIdentifier).values() : [].values();\r\n};\r\nvar _getContainersIterator = function (container) {\r\n    var containersStack = [container];\r\n    var parent = container.parent;\r\n    while (parent !== null) {\r\n        containersStack.push(parent);\r\n        parent = parent.parent;\r\n    }\r\n    var getNextContainer = function () {\r\n        var nextContainer = containersStack.pop();\r\n        if (nextContainer !== undefined) {\r\n            return { done: false, value: nextContainer };\r\n        }\r\n        else {\r\n            return { done: true, value: undefined };\r\n        }\r\n    };\r\n    var containersIterator = {\r\n        next: getNextContainer,\r\n    };\r\n    return containersIterator;\r\n};\r\nfunction resolve(context) {\r\n    var _f = _resolveRequest(context.plan.rootRequest.requestScope);\r\n    return _f(context.plan.rootRequest);\r\n}\r\nexport { resolve };\r\n","var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n};\r\nvar __generator = (this && this.__generator) || function (thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n};\r\nimport { BindingScopeEnum } from '../constants/literal_types';\r\nimport { isPromise } from '../utils/async';\r\nexport var tryGetFromScope = function (requestScope, binding) {\r\n    if ((binding.scope === BindingScopeEnum.Singleton) && binding.activated) {\r\n        return binding.cache;\r\n    }\r\n    if (binding.scope === BindingScopeEnum.Request &&\r\n        requestScope.has(binding.id)) {\r\n        return requestScope.get(binding.id);\r\n    }\r\n    return null;\r\n};\r\nexport var saveToScope = function (requestScope, binding, result) {\r\n    if (binding.scope === BindingScopeEnum.Singleton) {\r\n        _saveToSingletonScope(binding, result);\r\n    }\r\n    if (binding.scope === BindingScopeEnum.Request) {\r\n        _saveToRequestScope(requestScope, binding, result);\r\n    }\r\n};\r\nvar _saveToRequestScope = function (requestScope, binding, result) {\r\n    if (!requestScope.has(binding.id)) {\r\n        requestScope.set(binding.id, result);\r\n    }\r\n};\r\nvar _saveToSingletonScope = function (binding, result) {\r\n    binding.cache = result;\r\n    binding.activated = true;\r\n    if (isPromise(result)) {\r\n        void _saveAsyncResultToSingletonScope(binding, result);\r\n    }\r\n};\r\nvar _saveAsyncResultToSingletonScope = function (binding, asyncResult) { return __awaiter(void 0, void 0, void 0, function () {\r\n    var result, ex_1;\r\n    return __generator(this, function (_a) {\r\n        switch (_a.label) {\r\n            case 0:\r\n                _a.trys.push([0, 2, , 3]);\r\n                return [4, asyncResult];\r\n            case 1:\r\n                result = _a.sent();\r\n                binding.cache = result;\r\n                return [3, 3];\r\n            case 2:\r\n                ex_1 = _a.sent();\r\n                binding.cache = null;\r\n                binding.activated = false;\r\n                throw ex_1;\r\n            case 3: return [2];\r\n        }\r\n    });\r\n}); };\r\n","import { BindingScopeEnum } from '../constants/literal_types';\r\nimport { BindingWhenOnSyntax } from './binding_when_on_syntax';\r\nvar BindingInSyntax = (function () {\r\n    function BindingInSyntax(binding) {\r\n        this._binding = binding;\r\n    }\r\n    BindingInSyntax.prototype.inRequestScope = function () {\r\n        this._binding.scope = BindingScopeEnum.Request;\r\n        return new BindingWhenOnSyntax(this._binding);\r\n    };\r\n    BindingInSyntax.prototype.inSingletonScope = function () {\r\n        this._binding.scope = BindingScopeEnum.Singleton;\r\n        return new BindingWhenOnSyntax(this._binding);\r\n    };\r\n    BindingInSyntax.prototype.inTransientScope = function () {\r\n        this._binding.scope = BindingScopeEnum.Transient;\r\n        return new BindingWhenOnSyntax(this._binding);\r\n    };\r\n    return BindingInSyntax;\r\n}());\r\nexport { BindingInSyntax };\r\n","import { BindingInSyntax } from './binding_in_syntax';\r\nimport { BindingOnSyntax } from './binding_on_syntax';\r\nimport { BindingWhenSyntax } from './binding_when_syntax';\r\nvar BindingInWhenOnSyntax = (function () {\r\n    function BindingInWhenOnSyntax(binding) {\r\n        this._binding = binding;\r\n        this._bindingWhenSyntax = new BindingWhenSyntax(this._binding);\r\n        this._bindingOnSyntax = new BindingOnSyntax(this._binding);\r\n        this._bindingInSyntax = new BindingInSyntax(binding);\r\n    }\r\n    BindingInWhenOnSyntax.prototype.inRequestScope = function () {\r\n        return this._bindingInSyntax.inRequestScope();\r\n    };\r\n    BindingInWhenOnSyntax.prototype.inSingletonScope = function () {\r\n        return this._bindingInSyntax.inSingletonScope();\r\n    };\r\n    BindingInWhenOnSyntax.prototype.inTransientScope = function () {\r\n        return this._bindingInSyntax.inTransientScope();\r\n    };\r\n    BindingInWhenOnSyntax.prototype.when = function (constraint) {\r\n        return this._bindingWhenSyntax.when(constraint);\r\n    };\r\n    BindingInWhenOnSyntax.prototype.whenTargetNamed = function (name) {\r\n        return this._bindingWhenSyntax.whenTargetNamed(name);\r\n    };\r\n    BindingInWhenOnSyntax.prototype.whenTargetIsDefault = function () {\r\n        return this._bindingWhenSyntax.whenTargetIsDefault();\r\n    };\r\n    BindingInWhenOnSyntax.prototype.whenTargetTagged = function (tag, value) {\r\n        return this._bindingWhenSyntax.whenTargetTagged(tag, value);\r\n    };\r\n    BindingInWhenOnSyntax.prototype.whenInjectedInto = function (parent) {\r\n        return this._bindingWhenSyntax.whenInjectedInto(parent);\r\n    };\r\n    BindingInWhenOnSyntax.prototype.whenParentNamed = function (name) {\r\n        return this._bindingWhenSyntax.whenParentNamed(name);\r\n    };\r\n    BindingInWhenOnSyntax.prototype.whenParentTagged = function (tag, value) {\r\n        return this._bindingWhenSyntax.whenParentTagged(tag, value);\r\n    };\r\n    BindingInWhenOnSyntax.prototype.whenAnyAncestorIs = function (ancestor) {\r\n        return this._bindingWhenSyntax.whenAnyAncestorIs(ancestor);\r\n    };\r\n    BindingInWhenOnSyntax.prototype.whenNoAncestorIs = function (ancestor) {\r\n        return this._bindingWhenSyntax.whenNoAncestorIs(ancestor);\r\n    };\r\n    BindingInWhenOnSyntax.prototype.whenAnyAncestorNamed = function (name) {\r\n        return this._bindingWhenSyntax.whenAnyAncestorNamed(name);\r\n    };\r\n    BindingInWhenOnSyntax.prototype.whenAnyAncestorTagged = function (tag, value) {\r\n        return this._bindingWhenSyntax.whenAnyAncestorTagged(tag, value);\r\n    };\r\n    BindingInWhenOnSyntax.prototype.whenNoAncestorNamed = function (name) {\r\n        return this._bindingWhenSyntax.whenNoAncestorNamed(name);\r\n    };\r\n    BindingInWhenOnSyntax.prototype.whenNoAncestorTagged = function (tag, value) {\r\n        return this._bindingWhenSyntax.whenNoAncestorTagged(tag, value);\r\n    };\r\n    BindingInWhenOnSyntax.prototype.whenAnyAncestorMatches = function (constraint) {\r\n        return this._bindingWhenSyntax.whenAnyAncestorMatches(constraint);\r\n    };\r\n    BindingInWhenOnSyntax.prototype.whenNoAncestorMatches = function (constraint) {\r\n        return this._bindingWhenSyntax.whenNoAncestorMatches(constraint);\r\n    };\r\n    BindingInWhenOnSyntax.prototype.onActivation = function (handler) {\r\n        return this._bindingOnSyntax.onActivation(handler);\r\n    };\r\n    BindingInWhenOnSyntax.prototype.onDeactivation = function (handler) {\r\n        return this._bindingOnSyntax.onDeactivation(handler);\r\n    };\r\n    return BindingInWhenOnSyntax;\r\n}());\r\nexport { BindingInWhenOnSyntax };\r\n","import { BindingWhenSyntax } from './binding_when_syntax';\r\nvar BindingOnSyntax = (function () {\r\n    function BindingOnSyntax(binding) {\r\n        this._binding = binding;\r\n    }\r\n    BindingOnSyntax.prototype.onActivation = function (handler) {\r\n        this._binding.onActivation = handler;\r\n        return new BindingWhenSyntax(this._binding);\r\n    };\r\n    BindingOnSyntax.prototype.onDeactivation = function (handler) {\r\n        this._binding.onDeactivation = handler;\r\n        return new BindingWhenSyntax(this._binding);\r\n    };\r\n    return BindingOnSyntax;\r\n}());\r\nexport { BindingOnSyntax };\r\n","import * as ERROR_MSGS from \"../constants/error_msgs\";\r\nimport { BindingScopeEnum, BindingTypeEnum } from \"../constants/literal_types\";\r\nimport { BindingInWhenOnSyntax } from \"./binding_in_when_on_syntax\";\r\nimport { BindingWhenOnSyntax } from \"./binding_when_on_syntax\";\r\nvar BindingToSyntax = (function () {\r\n    function BindingToSyntax(binding) {\r\n        this._binding = binding;\r\n    }\r\n    BindingToSyntax.prototype.to = function (constructor) {\r\n        this._binding.type = BindingTypeEnum.Instance;\r\n        this._binding.implementationType = constructor;\r\n        return new BindingInWhenOnSyntax(this._binding);\r\n    };\r\n    BindingToSyntax.prototype.toSelf = function () {\r\n        if (typeof this._binding.serviceIdentifier !== \"function\") {\r\n            throw new Error(\"\" + ERROR_MSGS.INVALID_TO_SELF_VALUE);\r\n        }\r\n        var self = this._binding.serviceIdentifier;\r\n        return this.to(self);\r\n    };\r\n    BindingToSyntax.prototype.toConstantValue = function (value) {\r\n        this._binding.type = BindingTypeEnum.ConstantValue;\r\n        this._binding.cache = value;\r\n        this._binding.dynamicValue = null;\r\n        this._binding.implementationType = null;\r\n        this._binding.scope = BindingScopeEnum.Singleton;\r\n        return new BindingWhenOnSyntax(this._binding);\r\n    };\r\n    BindingToSyntax.prototype.toDynamicValue = function (func) {\r\n        this._binding.type = BindingTypeEnum.DynamicValue;\r\n        this._binding.cache = null;\r\n        this._binding.dynamicValue = func;\r\n        this._binding.implementationType = null;\r\n        return new BindingInWhenOnSyntax(this._binding);\r\n    };\r\n    BindingToSyntax.prototype.toConstructor = function (constructor) {\r\n        this._binding.type = BindingTypeEnum.Constructor;\r\n        this._binding.implementationType = constructor;\r\n        this._binding.scope = BindingScopeEnum.Singleton;\r\n        return new BindingWhenOnSyntax(this._binding);\r\n    };\r\n    BindingToSyntax.prototype.toFactory = function (factory) {\r\n        this._binding.type = BindingTypeEnum.Factory;\r\n        this._binding.factory = factory;\r\n        this._binding.scope = BindingScopeEnum.Singleton;\r\n        return new BindingWhenOnSyntax(this._binding);\r\n    };\r\n    BindingToSyntax.prototype.toFunction = function (func) {\r\n        if (typeof func !== \"function\") {\r\n            throw new Error(ERROR_MSGS.INVALID_FUNCTION_BINDING);\r\n        }\r\n        var bindingWhenOnSyntax = this.toConstantValue(func);\r\n        this._binding.type = BindingTypeEnum.Function;\r\n        this._binding.scope = BindingScopeEnum.Singleton;\r\n        return bindingWhenOnSyntax;\r\n    };\r\n    BindingToSyntax.prototype.toAutoFactory = function (serviceIdentifier) {\r\n        this._binding.type = BindingTypeEnum.Factory;\r\n        this._binding.factory = function (context) {\r\n            var autofactory = function () { return context.container.get(serviceIdentifier); };\r\n            return autofactory;\r\n        };\r\n        this._binding.scope = BindingScopeEnum.Singleton;\r\n        return new BindingWhenOnSyntax(this._binding);\r\n    };\r\n    BindingToSyntax.prototype.toAutoNamedFactory = function (serviceIdentifier) {\r\n        this._binding.type = BindingTypeEnum.Factory;\r\n        this._binding.factory = function (context) {\r\n            return function (named) { return context.container.getNamed(serviceIdentifier, named); };\r\n        };\r\n        return new BindingWhenOnSyntax(this._binding);\r\n    };\r\n    BindingToSyntax.prototype.toProvider = function (provider) {\r\n        this._binding.type = BindingTypeEnum.Provider;\r\n        this._binding.provider = provider;\r\n        this._binding.scope = BindingScopeEnum.Singleton;\r\n        return new BindingWhenOnSyntax(this._binding);\r\n    };\r\n    BindingToSyntax.prototype.toService = function (service) {\r\n        this.toDynamicValue(function (context) { return context.container.get(service); });\r\n    };\r\n    return BindingToSyntax;\r\n}());\r\nexport { BindingToSyntax };\r\n","import { BindingOnSyntax } from './binding_on_syntax';\r\nimport { BindingWhenSyntax } from './binding_when_syntax';\r\nvar BindingWhenOnSyntax = (function () {\r\n    function BindingWhenOnSyntax(binding) {\r\n        this._binding = binding;\r\n        this._bindingWhenSyntax = new BindingWhenSyntax(this._binding);\r\n        this._bindingOnSyntax = new BindingOnSyntax(this._binding);\r\n    }\r\n    BindingWhenOnSyntax.prototype.when = function (constraint) {\r\n        return this._bindingWhenSyntax.when(constraint);\r\n    };\r\n    BindingWhenOnSyntax.prototype.whenTargetNamed = function (name) {\r\n        return this._bindingWhenSyntax.whenTargetNamed(name);\r\n    };\r\n    BindingWhenOnSyntax.prototype.whenTargetIsDefault = function () {\r\n        return this._bindingWhenSyntax.whenTargetIsDefault();\r\n    };\r\n    BindingWhenOnSyntax.prototype.whenTargetTagged = function (tag, value) {\r\n        return this._bindingWhenSyntax.whenTargetTagged(tag, value);\r\n    };\r\n    BindingWhenOnSyntax.prototype.whenInjectedInto = function (parent) {\r\n        return this._bindingWhenSyntax.whenInjectedInto(parent);\r\n    };\r\n    BindingWhenOnSyntax.prototype.whenParentNamed = function (name) {\r\n        return this._bindingWhenSyntax.whenParentNamed(name);\r\n    };\r\n    BindingWhenOnSyntax.prototype.whenParentTagged = function (tag, value) {\r\n        return this._bindingWhenSyntax.whenParentTagged(tag, value);\r\n    };\r\n    BindingWhenOnSyntax.prototype.whenAnyAncestorIs = function (ancestor) {\r\n        return this._bindingWhenSyntax.whenAnyAncestorIs(ancestor);\r\n    };\r\n    BindingWhenOnSyntax.prototype.whenNoAncestorIs = function (ancestor) {\r\n        return this._bindingWhenSyntax.whenNoAncestorIs(ancestor);\r\n    };\r\n    BindingWhenOnSyntax.prototype.whenAnyAncestorNamed = function (name) {\r\n        return this._bindingWhenSyntax.whenAnyAncestorNamed(name);\r\n    };\r\n    BindingWhenOnSyntax.prototype.whenAnyAncestorTagged = function (tag, value) {\r\n        return this._bindingWhenSyntax.whenAnyAncestorTagged(tag, value);\r\n    };\r\n    BindingWhenOnSyntax.prototype.whenNoAncestorNamed = function (name) {\r\n        return this._bindingWhenSyntax.whenNoAncestorNamed(name);\r\n    };\r\n    BindingWhenOnSyntax.prototype.whenNoAncestorTagged = function (tag, value) {\r\n        return this._bindingWhenSyntax.whenNoAncestorTagged(tag, value);\r\n    };\r\n    BindingWhenOnSyntax.prototype.whenAnyAncestorMatches = function (constraint) {\r\n        return this._bindingWhenSyntax.whenAnyAncestorMatches(constraint);\r\n    };\r\n    BindingWhenOnSyntax.prototype.whenNoAncestorMatches = function (constraint) {\r\n        return this._bindingWhenSyntax.whenNoAncestorMatches(constraint);\r\n    };\r\n    BindingWhenOnSyntax.prototype.onActivation = function (handler) {\r\n        return this._bindingOnSyntax.onActivation(handler);\r\n    };\r\n    BindingWhenOnSyntax.prototype.onDeactivation = function (handler) {\r\n        return this._bindingOnSyntax.onDeactivation(handler);\r\n    };\r\n    return BindingWhenOnSyntax;\r\n}());\r\nexport { BindingWhenOnSyntax };\r\n","import { BindingOnSyntax } from './binding_on_syntax';\r\nimport { namedConstraint, taggedConstraint, traverseAncerstors, typeConstraint } from './constraint_helpers';\r\nvar BindingWhenSyntax = (function () {\r\n    function BindingWhenSyntax(binding) {\r\n        this._binding = binding;\r\n    }\r\n    BindingWhenSyntax.prototype.when = function (constraint) {\r\n        this._binding.constraint = constraint;\r\n        return new BindingOnSyntax(this._binding);\r\n    };\r\n    BindingWhenSyntax.prototype.whenTargetNamed = function (name) {\r\n        this._binding.constraint = namedConstraint(name);\r\n        return new BindingOnSyntax(this._binding);\r\n    };\r\n    BindingWhenSyntax.prototype.whenTargetIsDefault = function () {\r\n        this._binding.constraint = function (request) {\r\n            if (request === null) {\r\n                return false;\r\n            }\r\n            var targetIsDefault = (request.target !== null) &&\r\n                (!request.target.isNamed()) &&\r\n                (!request.target.isTagged());\r\n            return targetIsDefault;\r\n        };\r\n        return new BindingOnSyntax(this._binding);\r\n    };\r\n    BindingWhenSyntax.prototype.whenTargetTagged = function (tag, value) {\r\n        this._binding.constraint = taggedConstraint(tag)(value);\r\n        return new BindingOnSyntax(this._binding);\r\n    };\r\n    BindingWhenSyntax.prototype.whenInjectedInto = function (parent) {\r\n        this._binding.constraint = function (request) {\r\n            return request !== null && typeConstraint(parent)(request.parentRequest);\r\n        };\r\n        return new BindingOnSyntax(this._binding);\r\n    };\r\n    BindingWhenSyntax.prototype.whenParentNamed = function (name) {\r\n        this._binding.constraint = function (request) {\r\n            return request !== null && namedConstraint(name)(request.parentRequest);\r\n        };\r\n        return new BindingOnSyntax(this._binding);\r\n    };\r\n    BindingWhenSyntax.prototype.whenParentTagged = function (tag, value) {\r\n        this._binding.constraint = function (request) {\r\n            return request !== null && taggedConstraint(tag)(value)(request.parentRequest);\r\n        };\r\n        return new BindingOnSyntax(this._binding);\r\n    };\r\n    BindingWhenSyntax.prototype.whenAnyAncestorIs = function (ancestor) {\r\n        this._binding.constraint = function (request) {\r\n            return request !== null && traverseAncerstors(request, typeConstraint(ancestor));\r\n        };\r\n        return new BindingOnSyntax(this._binding);\r\n    };\r\n    BindingWhenSyntax.prototype.whenNoAncestorIs = function (ancestor) {\r\n        this._binding.constraint = function (request) {\r\n            return request !== null && !traverseAncerstors(request, typeConstraint(ancestor));\r\n        };\r\n        return new BindingOnSyntax(this._binding);\r\n    };\r\n    BindingWhenSyntax.prototype.whenAnyAncestorNamed = function (name) {\r\n        this._binding.constraint = function (request) {\r\n            return request !== null && traverseAncerstors(request, namedConstraint(name));\r\n        };\r\n        return new BindingOnSyntax(this._binding);\r\n    };\r\n    BindingWhenSyntax.prototype.whenNoAncestorNamed = function (name) {\r\n        this._binding.constraint = function (request) {\r\n            return request !== null && !traverseAncerstors(request, namedConstraint(name));\r\n        };\r\n        return new BindingOnSyntax(this._binding);\r\n    };\r\n    BindingWhenSyntax.prototype.whenAnyAncestorTagged = function (tag, value) {\r\n        this._binding.constraint = function (request) {\r\n            return request !== null && traverseAncerstors(request, taggedConstraint(tag)(value));\r\n        };\r\n        return new BindingOnSyntax(this._binding);\r\n    };\r\n    BindingWhenSyntax.prototype.whenNoAncestorTagged = function (tag, value) {\r\n        this._binding.constraint = function (request) {\r\n            return request !== null && !traverseAncerstors(request, taggedConstraint(tag)(value));\r\n        };\r\n        return new BindingOnSyntax(this._binding);\r\n    };\r\n    BindingWhenSyntax.prototype.whenAnyAncestorMatches = function (constraint) {\r\n        this._binding.constraint = function (request) {\r\n            return request !== null && traverseAncerstors(request, constraint);\r\n        };\r\n        return new BindingOnSyntax(this._binding);\r\n    };\r\n    BindingWhenSyntax.prototype.whenNoAncestorMatches = function (constraint) {\r\n        this._binding.constraint = function (request) {\r\n            return request !== null && !traverseAncerstors(request, constraint);\r\n        };\r\n        return new BindingOnSyntax(this._binding);\r\n    };\r\n    return BindingWhenSyntax;\r\n}());\r\nexport { BindingWhenSyntax };\r\n","import * as METADATA_KEY from '../constants/metadata_keys';\r\nimport { Metadata } from '../planning/metadata';\r\nvar traverseAncerstors = function (request, constraint) {\r\n    var parent = request.parentRequest;\r\n    if (parent !== null) {\r\n        return constraint(parent) ? true : traverseAncerstors(parent, constraint);\r\n    }\r\n    else {\r\n        return false;\r\n    }\r\n};\r\nvar taggedConstraint = function (key) { return function (value) {\r\n    var constraint = function (request) {\r\n        return request !== null && request.target !== null && request.target.matchesTag(key)(value);\r\n    };\r\n    constraint.metaData = new Metadata(key, value);\r\n    return constraint;\r\n}; };\r\nvar namedConstraint = taggedConstraint(METADATA_KEY.NAMED_TAG);\r\nvar typeConstraint = function (type) { return function (request) {\r\n    var binding = null;\r\n    if (request !== null) {\r\n        binding = request.bindings[0];\r\n        if (typeof type === 'string') {\r\n            var serviceIdentifier = binding.serviceIdentifier;\r\n            return serviceIdentifier === type;\r\n        }\r\n        else {\r\n            var constructor = request.bindings[0].implementationType;\r\n            return type === constructor;\r\n        }\r\n    }\r\n    return false;\r\n}; };\r\nexport { traverseAncerstors, taggedConstraint, namedConstraint, typeConstraint };\r\n","function isPromise(object) {\r\n    var isObjectOrFunction = (typeof object === 'object' && object !== null) || typeof object === 'function';\r\n    return isObjectOrFunction && typeof object.then === \"function\";\r\n}\r\nfunction isPromiseOrContainsPromise(object) {\r\n    if (isPromise(object)) {\r\n        return true;\r\n    }\r\n    return Array.isArray(object) && object.some(isPromise);\r\n}\r\nexport { isPromise, isPromiseOrContainsPromise };\r\n","import { getServiceIdentifierAsString } from '../utils/serialization';\r\nimport * as ERROR_MSGS from '../constants/error_msgs';\r\nimport { BindingTypeEnum } from '../constants/literal_types';\r\nimport { FactoryType } from './factory_type';\r\nexport var multiBindToService = function (container) {\r\n    return function (service) {\r\n        return function () {\r\n            var types = [];\r\n            for (var _i = 0; _i < arguments.length; _i++) {\r\n                types[_i] = arguments[_i];\r\n            }\r\n            return types.forEach(function (t) { return container.bind(t).toService(service); });\r\n        };\r\n    };\r\n};\r\nexport var ensureFullyBound = function (binding) {\r\n    var boundValue = null;\r\n    switch (binding.type) {\r\n        case BindingTypeEnum.ConstantValue:\r\n        case BindingTypeEnum.Function:\r\n            boundValue = binding.cache;\r\n            break;\r\n        case BindingTypeEnum.Constructor:\r\n        case BindingTypeEnum.Instance:\r\n            boundValue = binding.implementationType;\r\n            break;\r\n        case BindingTypeEnum.DynamicValue:\r\n            boundValue = binding.dynamicValue;\r\n            break;\r\n        case BindingTypeEnum.Provider:\r\n            boundValue = binding.provider;\r\n            break;\r\n        case BindingTypeEnum.Factory:\r\n            boundValue = binding.factory;\r\n            break;\r\n    }\r\n    if (boundValue === null) {\r\n        var serviceIdentifierAsString = getServiceIdentifierAsString(binding.serviceIdentifier);\r\n        throw new Error(ERROR_MSGS.INVALID_BINDING_TYPE + \" \" + serviceIdentifierAsString);\r\n    }\r\n};\r\nexport var getFactoryDetails = function (binding) {\r\n    switch (binding.type) {\r\n        case BindingTypeEnum.Factory:\r\n            return { factory: binding.factory, factoryType: FactoryType.Factory };\r\n        case BindingTypeEnum.Provider:\r\n            return { factory: binding.provider, factoryType: FactoryType.Provider };\r\n        case BindingTypeEnum.DynamicValue:\r\n            return { factory: binding.dynamicValue, factoryType: FactoryType.DynamicValue };\r\n        default:\r\n            throw new Error(\"Unexpected factory type \" + binding.type);\r\n    }\r\n};\r\n","function isClonable(obj) {\r\n    return (typeof obj === 'object')\r\n        && (obj !== null)\r\n        && ('clone' in obj)\r\n        && typeof obj.clone === 'function';\r\n}\r\nexport { isClonable };\r\n","import * as ERROR_MSGS from '../constants/error_msgs';\r\nexport function isStackOverflowExeption(error) {\r\n    return (error instanceof RangeError ||\r\n        error.message === ERROR_MSGS.STACK_OVERFLOW);\r\n}\r\nexport var tryAndThrowErrorIfStackOverflow = function (fn, errorCallback) {\r\n    try {\r\n        return fn();\r\n    }\r\n    catch (error) {\r\n        if (isStackOverflowExeption(error)) {\r\n            error = errorCallback();\r\n        }\r\n        throw error;\r\n    }\r\n};\r\n","export var FactoryType;\r\n(function (FactoryType) {\r\n    FactoryType[\"DynamicValue\"] = \"toDynamicValue\";\r\n    FactoryType[\"Factory\"] = \"toFactory\";\r\n    FactoryType[\"Provider\"] = \"toProvider\";\r\n})(FactoryType || (FactoryType = {}));\r\n","var idCounter = 0;\r\nfunction id() {\r\n    return idCounter++;\r\n}\r\nexport { id };\r\n","export function getFirstArrayDuplicate(array) {\r\n    var seenValues = new Set();\r\n    for (var _i = 0, array_1 = array; _i < array_1.length; _i++) {\r\n        var entry = array_1[_i];\r\n        if (seenValues.has(entry)) {\r\n            return entry;\r\n        }\r\n        else {\r\n            seenValues.add(entry);\r\n        }\r\n    }\r\n    return undefined;\r\n}\r\n","import * as ERROR_MSGS from '../constants/error_msgs';\r\nfunction getServiceIdentifierAsString(serviceIdentifier) {\r\n    if (typeof serviceIdentifier === 'function') {\r\n        var _serviceIdentifier = serviceIdentifier;\r\n        return _serviceIdentifier.name;\r\n    }\r\n    else if (typeof serviceIdentifier === 'symbol') {\r\n        return serviceIdentifier.toString();\r\n    }\r\n    else {\r\n        var _serviceIdentifier = serviceIdentifier;\r\n        return _serviceIdentifier;\r\n    }\r\n}\r\nfunction listRegisteredBindingsForServiceIdentifier(container, serviceIdentifier, getBindings) {\r\n    var registeredBindingsList = '';\r\n    var registeredBindings = getBindings(container, serviceIdentifier);\r\n    if (registeredBindings.length !== 0) {\r\n        registeredBindingsList = '\\nRegistered bindings:';\r\n        registeredBindings.forEach(function (binding) {\r\n            var name = 'Object';\r\n            if (binding.implementationType !== null) {\r\n                name = getFunctionName(binding.implementationType);\r\n            }\r\n            registeredBindingsList = registeredBindingsList + \"\\n \" + name;\r\n            if (binding.constraint.metaData) {\r\n                registeredBindingsList = registeredBindingsList + \" - \" + binding.constraint.metaData;\r\n            }\r\n        });\r\n    }\r\n    return registeredBindingsList;\r\n}\r\nfunction alreadyDependencyChain(request, serviceIdentifier) {\r\n    if (request.parentRequest === null) {\r\n        return false;\r\n    }\r\n    else if (request.parentRequest.serviceIdentifier === serviceIdentifier) {\r\n        return true;\r\n    }\r\n    else {\r\n        return alreadyDependencyChain(request.parentRequest, serviceIdentifier);\r\n    }\r\n}\r\nfunction dependencyChainToString(request) {\r\n    function _createStringArr(req, result) {\r\n        if (result === void 0) { result = []; }\r\n        var serviceIdentifier = getServiceIdentifierAsString(req.serviceIdentifier);\r\n        result.push(serviceIdentifier);\r\n        if (req.parentRequest !== null) {\r\n            return _createStringArr(req.parentRequest, result);\r\n        }\r\n        return result;\r\n    }\r\n    var stringArr = _createStringArr(request);\r\n    return stringArr.reverse().join(' --> ');\r\n}\r\nfunction circularDependencyToException(request) {\r\n    request.childRequests.forEach(function (childRequest) {\r\n        if (alreadyDependencyChain(childRequest, childRequest.serviceIdentifier)) {\r\n            var services = dependencyChainToString(childRequest);\r\n            throw new Error(ERROR_MSGS.CIRCULAR_DEPENDENCY + \" \" + services);\r\n        }\r\n        else {\r\n            circularDependencyToException(childRequest);\r\n        }\r\n    });\r\n}\r\nfunction listMetadataForTarget(serviceIdentifierString, target) {\r\n    if (target.isTagged() || target.isNamed()) {\r\n        var m_1 = '';\r\n        var namedTag = target.getNamedTag();\r\n        var otherTags = target.getCustomTags();\r\n        if (namedTag !== null) {\r\n            m_1 += namedTag.toString() + '\\n';\r\n        }\r\n        if (otherTags !== null) {\r\n            otherTags.forEach(function (tag) {\r\n                m_1 += tag.toString() + '\\n';\r\n            });\r\n        }\r\n        return \" \" + serviceIdentifierString + \"\\n \" + serviceIdentifierString + \" - \" + m_1;\r\n    }\r\n    else {\r\n        return \" \" + serviceIdentifierString;\r\n    }\r\n}\r\nfunction getFunctionName(func) {\r\n    if (func.name) {\r\n        return func.name;\r\n    }\r\n    else {\r\n        var name_1 = func.toString();\r\n        var match = name_1.match(/^function\\s*([^\\s(]+)/);\r\n        return match ? match[1] : \"Anonymous function: \" + name_1;\r\n    }\r\n}\r\nfunction getSymbolDescription(symbol) {\r\n    return symbol.toString().slice(7, -1);\r\n}\r\nexport { getFunctionName, getServiceIdentifierAsString, listRegisteredBindingsForServiceIdentifier, listMetadataForTarget, circularDependencyToException, getSymbolDescription };\r\n","/*\n* loglevel - https://github.com/pimterry/loglevel\n*\n* Copyright (c) 2013 Tim Perry\n* Licensed under the MIT license.\n*/\n(function (root, definition) {\n    \"use strict\";\n    if (typeof define === 'function' && define.amd) {\n        define(definition);\n    } else if (typeof module === 'object' && module.exports) {\n        module.exports = definition();\n    } else {\n        root.log = definition();\n    }\n}(this, function () {\n    \"use strict\";\n\n    // Slightly dubious tricks to cut down minimized file size\n    var noop = function() {};\n    var undefinedType = \"undefined\";\n    var isIE = (typeof window !== undefinedType) && (typeof window.navigator !== undefinedType) && (\n        /Trident\\/|MSIE /.test(window.navigator.userAgent)\n    );\n\n    var logMethods = [\n        \"trace\",\n        \"debug\",\n        \"info\",\n        \"warn\",\n        \"error\"\n    ];\n\n    // Cross-browser bind equivalent that works at least back to IE6\n    function bindMethod(obj, methodName) {\n        var method = obj[methodName];\n        if (typeof method.bind === 'function') {\n            return method.bind(obj);\n        } else {\n            try {\n                return Function.prototype.bind.call(method, obj);\n            } catch (e) {\n                // Missing bind shim or IE8 + Modernizr, fallback to wrapping\n                return function() {\n                    return Function.prototype.apply.apply(method, [obj, arguments]);\n                };\n            }\n        }\n    }\n\n    // Trace() doesn't print the message in IE, so for that case we need to wrap it\n    function traceForIE() {\n        if (console.log) {\n            if (console.log.apply) {\n                console.log.apply(console, arguments);\n            } else {\n                // In old IE, native console methods themselves don't have apply().\n                Function.prototype.apply.apply(console.log, [console, arguments]);\n            }\n        }\n        if (console.trace) console.trace();\n    }\n\n    // Build the best logging method possible for this env\n    // Wherever possible we want to bind, not wrap, to preserve stack traces\n    function realMethod(methodName) {\n        if (methodName === 'debug') {\n            methodName = 'log';\n        }\n\n        if (typeof console === undefinedType) {\n            return false; // No method possible, for now - fixed later by enableLoggingWhenConsoleArrives\n        } else if (methodName === 'trace' && isIE) {\n            return traceForIE;\n        } else if (console[methodName] !== undefined) {\n            return bindMethod(console, methodName);\n        } else if (console.log !== undefined) {\n            return bindMethod(console, 'log');\n        } else {\n            return noop;\n        }\n    }\n\n    // These private functions always need `this` to be set properly\n\n    function replaceLoggingMethods(level, loggerName) {\n        /*jshint validthis:true */\n        for (var i = 0; i < logMethods.length; i++) {\n            var methodName = logMethods[i];\n            this[methodName] = (i < level) ?\n                noop :\n                this.methodFactory(methodName, level, loggerName);\n        }\n\n        // Define log.log as an alias for log.debug\n        this.log = this.debug;\n    }\n\n    // In old IE versions, the console isn't present until you first open it.\n    // We build realMethod() replacements here that regenerate logging methods\n    function enableLoggingWhenConsoleArrives(methodName, level, loggerName) {\n        return function () {\n            if (typeof console !== undefinedType) {\n                replaceLoggingMethods.call(this, level, loggerName);\n                this[methodName].apply(this, arguments);\n            }\n        };\n    }\n\n    // By default, we use closely bound real methods wherever possible, and\n    // otherwise we wait for a console to appear, and then try again.\n    function defaultMethodFactory(methodName, level, loggerName) {\n        /*jshint validthis:true */\n        return realMethod(methodName) ||\n               enableLoggingWhenConsoleArrives.apply(this, arguments);\n    }\n\n    function Logger(name, defaultLevel, factory) {\n      var self = this;\n      var currentLevel;\n      defaultLevel = defaultLevel == null ? \"WARN\" : defaultLevel;\n\n      var storageKey = \"loglevel\";\n      if (typeof name === \"string\") {\n        storageKey += \":\" + name;\n      } else if (typeof name === \"symbol\") {\n        storageKey = undefined;\n      }\n\n      function persistLevelIfPossible(levelNum) {\n          var levelName = (logMethods[levelNum] || 'silent').toUpperCase();\n\n          if (typeof window === undefinedType || !storageKey) return;\n\n          // Use localStorage if available\n          try {\n              window.localStorage[storageKey] = levelName;\n              return;\n          } catch (ignore) {}\n\n          // Use session cookie as fallback\n          try {\n              window.document.cookie =\n                encodeURIComponent(storageKey) + \"=\" + levelName + \";\";\n          } catch (ignore) {}\n      }\n\n      function getPersistedLevel() {\n          var storedLevel;\n\n          if (typeof window === undefinedType || !storageKey) return;\n\n          try {\n              storedLevel = window.localStorage[storageKey];\n          } catch (ignore) {}\n\n          // Fallback to cookies if local storage gives us nothing\n          if (typeof storedLevel === undefinedType) {\n              try {\n                  var cookie = window.document.cookie;\n                  var location = cookie.indexOf(\n                      encodeURIComponent(storageKey) + \"=\");\n                  if (location !== -1) {\n                      storedLevel = /^([^;]+)/.exec(cookie.slice(location))[1];\n                  }\n              } catch (ignore) {}\n          }\n\n          // If the stored level is not valid, treat it as if nothing was stored.\n          if (self.levels[storedLevel] === undefined) {\n              storedLevel = undefined;\n          }\n\n          return storedLevel;\n      }\n\n      function clearPersistedLevel() {\n          if (typeof window === undefinedType || !storageKey) return;\n\n          // Use localStorage if available\n          try {\n              window.localStorage.removeItem(storageKey);\n              return;\n          } catch (ignore) {}\n\n          // Use session cookie as fallback\n          try {\n              window.document.cookie =\n                encodeURIComponent(storageKey) + \"=; expires=Thu, 01 Jan 1970 00:00:00 UTC\";\n          } catch (ignore) {}\n      }\n\n      /*\n       *\n       * Public logger API - see https://github.com/pimterry/loglevel for details\n       *\n       */\n\n      self.name = name;\n\n      self.levels = { \"TRACE\": 0, \"DEBUG\": 1, \"INFO\": 2, \"WARN\": 3,\n          \"ERROR\": 4, \"SILENT\": 5};\n\n      self.methodFactory = factory || defaultMethodFactory;\n\n      self.getLevel = function () {\n          return currentLevel;\n      };\n\n      self.setLevel = function (level, persist) {\n          if (typeof level === \"string\" && self.levels[level.toUpperCase()] !== undefined) {\n              level = self.levels[level.toUpperCase()];\n          }\n          if (typeof level === \"number\" && level >= 0 && level <= self.levels.SILENT) {\n              currentLevel = level;\n              if (persist !== false) {  // defaults to true\n                  persistLevelIfPossible(level);\n              }\n              replaceLoggingMethods.call(self, level, name);\n              if (typeof console === undefinedType && level < self.levels.SILENT) {\n                  return \"No console available for logging\";\n              }\n          } else {\n              throw \"log.setLevel() called with invalid level: \" + level;\n          }\n      };\n\n      self.setDefaultLevel = function (level) {\n          defaultLevel = level;\n          if (!getPersistedLevel()) {\n              self.setLevel(level, false);\n          }\n      };\n\n      self.resetLevel = function () {\n          self.setLevel(defaultLevel, false);\n          clearPersistedLevel();\n      };\n\n      self.enableAll = function(persist) {\n          self.setLevel(self.levels.TRACE, persist);\n      };\n\n      self.disableAll = function(persist) {\n          self.setLevel(self.levels.SILENT, persist);\n      };\n\n      // Initialize with the right level\n      var initialLevel = getPersistedLevel();\n      if (initialLevel == null) {\n          initialLevel = defaultLevel;\n      }\n      self.setLevel(initialLevel, false);\n    }\n\n    /*\n     *\n     * Top-level API\n     *\n     */\n\n    var defaultLogger = new Logger();\n\n    var _loggersByName = {};\n    defaultLogger.getLogger = function getLogger(name) {\n        if ((typeof name !== \"symbol\" && typeof name !== \"string\") || name === \"\") {\n          throw new TypeError(\"You must supply a name when creating a logger.\");\n        }\n\n        var logger = _loggersByName[name];\n        if (!logger) {\n          logger = _loggersByName[name] = new Logger(\n            name, defaultLogger.getLevel(), defaultLogger.methodFactory);\n        }\n        return logger;\n    };\n\n    // Grab the current global log variable in case of overwrite\n    var _log = (typeof window !== undefinedType) ? window.log : undefined;\n    defaultLogger.noConflict = function() {\n        if (typeof window !== undefinedType &&\n               window.log === defaultLogger) {\n            window.log = _log;\n        }\n\n        return defaultLogger;\n    };\n\n    defaultLogger.getLoggers = function getLoggers() {\n        return _loggersByName;\n    };\n\n    // ES6 default export, for compatibility\n    defaultLogger['default'] = defaultLogger;\n\n    return defaultLogger;\n}));\n","/*! *****************************************************************************\nCopyright (C) Microsoft. All rights reserved.\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\nthis file except in compliance with the License. You may obtain a copy of the\nLicense at http://www.apache.org/licenses/LICENSE-2.0\n\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\nMERCHANTABLITY OR NON-INFRINGEMENT.\n\nSee the Apache Version 2.0 License for specific language governing permissions\nand limitations under the License.\n***************************************************************************** */\nvar Reflect;\n(function (Reflect) {\n    // Metadata Proposal\n    // https://rbuckton.github.io/reflect-metadata/\n    (function (factory) {\n        var root = typeof global === \"object\" ? global :\n            typeof self === \"object\" ? self :\n                typeof this === \"object\" ? this :\n                    Function(\"return this;\")();\n        var exporter = makeExporter(Reflect);\n        if (typeof root.Reflect === \"undefined\") {\n            root.Reflect = Reflect;\n        }\n        else {\n            exporter = makeExporter(root.Reflect, exporter);\n        }\n        factory(exporter);\n        function makeExporter(target, previous) {\n            return function (key, value) {\n                if (typeof target[key] !== \"function\") {\n                    Object.defineProperty(target, key, { configurable: true, writable: true, value: value });\n                }\n                if (previous)\n                    previous(key, value);\n            };\n        }\n    })(function (exporter) {\n        var hasOwn = Object.prototype.hasOwnProperty;\n        // feature test for Symbol support\n        var supportsSymbol = typeof Symbol === \"function\";\n        var toPrimitiveSymbol = supportsSymbol && typeof Symbol.toPrimitive !== \"undefined\" ? Symbol.toPrimitive : \"@@toPrimitive\";\n        var iteratorSymbol = supportsSymbol && typeof Symbol.iterator !== \"undefined\" ? Symbol.iterator : \"@@iterator\";\n        var supportsCreate = typeof Object.create === \"function\"; // feature test for Object.create support\n        var supportsProto = { __proto__: [] } instanceof Array; // feature test for __proto__ support\n        var downLevel = !supportsCreate && !supportsProto;\n        var HashMap = {\n            // create an object in dictionary mode (a.k.a. \"slow\" mode in v8)\n            create: supportsCreate\n                ? function () { return MakeDictionary(Object.create(null)); }\n                : supportsProto\n                    ? function () { return MakeDictionary({ __proto__: null }); }\n                    : function () { return MakeDictionary({}); },\n            has: downLevel\n                ? function (map, key) { return hasOwn.call(map, key); }\n                : function (map, key) { return key in map; },\n            get: downLevel\n                ? function (map, key) { return hasOwn.call(map, key) ? map[key] : undefined; }\n                : function (map, key) { return map[key]; },\n        };\n        // Load global or shim versions of Map, Set, and WeakMap\n        var functionPrototype = Object.getPrototypeOf(Function);\n        var usePolyfill = typeof process === \"object\" && process.env && process.env[\"REFLECT_METADATA_USE_MAP_POLYFILL\"] === \"true\";\n        var _Map = !usePolyfill && typeof Map === \"function\" && typeof Map.prototype.entries === \"function\" ? Map : CreateMapPolyfill();\n        var _Set = !usePolyfill && typeof Set === \"function\" && typeof Set.prototype.entries === \"function\" ? Set : CreateSetPolyfill();\n        var _WeakMap = !usePolyfill && typeof WeakMap === \"function\" ? WeakMap : CreateWeakMapPolyfill();\n        // [[Metadata]] internal slot\n        // https://rbuckton.github.io/reflect-metadata/#ordinary-object-internal-methods-and-internal-slots\n        var Metadata = new _WeakMap();\n        /**\n         * Applies a set of decorators to a property of a target object.\n         * @param decorators An array of decorators.\n         * @param target The target object.\n         * @param propertyKey (Optional) The property key to decorate.\n         * @param attributes (Optional) The property descriptor for the target key.\n         * @remarks Decorators are applied in reverse order.\n         * @example\n         *\n         *     class Example {\n         *         // property declarations are not part of ES6, though they are valid in TypeScript:\n         *         // static staticProperty;\n         *         // property;\n         *\n         *         constructor(p) { }\n         *         static staticMethod(p) { }\n         *         method(p) { }\n         *     }\n         *\n         *     // constructor\n         *     Example = Reflect.decorate(decoratorsArray, Example);\n         *\n         *     // property (on constructor)\n         *     Reflect.decorate(decoratorsArray, Example, \"staticProperty\");\n         *\n         *     // property (on prototype)\n         *     Reflect.decorate(decoratorsArray, Example.prototype, \"property\");\n         *\n         *     // method (on constructor)\n         *     Object.defineProperty(Example, \"staticMethod\",\n         *         Reflect.decorate(decoratorsArray, Example, \"staticMethod\",\n         *             Object.getOwnPropertyDescriptor(Example, \"staticMethod\")));\n         *\n         *     // method (on prototype)\n         *     Object.defineProperty(Example.prototype, \"method\",\n         *         Reflect.decorate(decoratorsArray, Example.prototype, \"method\",\n         *             Object.getOwnPropertyDescriptor(Example.prototype, \"method\")));\n         *\n         */\n        function decorate(decorators, target, propertyKey, attributes) {\n            if (!IsUndefined(propertyKey)) {\n                if (!IsArray(decorators))\n                    throw new TypeError();\n                if (!IsObject(target))\n                    throw new TypeError();\n                if (!IsObject(attributes) && !IsUndefined(attributes) && !IsNull(attributes))\n                    throw new TypeError();\n                if (IsNull(attributes))\n                    attributes = undefined;\n                propertyKey = ToPropertyKey(propertyKey);\n                return DecorateProperty(decorators, target, propertyKey, attributes);\n            }\n            else {\n                if (!IsArray(decorators))\n                    throw new TypeError();\n                if (!IsConstructor(target))\n                    throw new TypeError();\n                return DecorateConstructor(decorators, target);\n            }\n        }\n        exporter(\"decorate\", decorate);\n        // 4.1.2 Reflect.metadata(metadataKey, metadataValue)\n        // https://rbuckton.github.io/reflect-metadata/#reflect.metadata\n        /**\n         * A default metadata decorator factory that can be used on a class, class member, or parameter.\n         * @param metadataKey The key for the metadata entry.\n         * @param metadataValue The value for the metadata entry.\n         * @returns A decorator function.\n         * @remarks\n         * If `metadataKey` is already defined for the target and target key, the\n         * metadataValue for that key will be overwritten.\n         * @example\n         *\n         *     // constructor\n         *     @Reflect.metadata(key, value)\n         *     class Example {\n         *     }\n         *\n         *     // property (on constructor, TypeScript only)\n         *     class Example {\n         *         @Reflect.metadata(key, value)\n         *         static staticProperty;\n         *     }\n         *\n         *     // property (on prototype, TypeScript only)\n         *     class Example {\n         *         @Reflect.metadata(key, value)\n         *         property;\n         *     }\n         *\n         *     // method (on constructor)\n         *     class Example {\n         *         @Reflect.metadata(key, value)\n         *         static staticMethod() { }\n         *     }\n         *\n         *     // method (on prototype)\n         *     class Example {\n         *         @Reflect.metadata(key, value)\n         *         method() { }\n         *     }\n         *\n         */\n        function metadata(metadataKey, metadataValue) {\n            function decorator(target, propertyKey) {\n                if (!IsObject(target))\n                    throw new TypeError();\n                if (!IsUndefined(propertyKey) && !IsPropertyKey(propertyKey))\n                    throw new TypeError();\n                OrdinaryDefineOwnMetadata(metadataKey, metadataValue, target, propertyKey);\n            }\n            return decorator;\n        }\n        exporter(\"metadata\", metadata);\n        /**\n         * Define a unique metadata entry on the target.\n         * @param metadataKey A key used to store and retrieve metadata.\n         * @param metadataValue A value that contains attached metadata.\n         * @param target The target object on which to define metadata.\n         * @param propertyKey (Optional) The property key for the target.\n         * @example\n         *\n         *     class Example {\n         *         // property declarations are not part of ES6, though they are valid in TypeScript:\n         *         // static staticProperty;\n         *         // property;\n         *\n         *         constructor(p) { }\n         *         static staticMethod(p) { }\n         *         method(p) { }\n         *     }\n         *\n         *     // constructor\n         *     Reflect.defineMetadata(\"custom:annotation\", options, Example);\n         *\n         *     // property (on constructor)\n         *     Reflect.defineMetadata(\"custom:annotation\", options, Example, \"staticProperty\");\n         *\n         *     // property (on prototype)\n         *     Reflect.defineMetadata(\"custom:annotation\", options, Example.prototype, \"property\");\n         *\n         *     // method (on constructor)\n         *     Reflect.defineMetadata(\"custom:annotation\", options, Example, \"staticMethod\");\n         *\n         *     // method (on prototype)\n         *     Reflect.defineMetadata(\"custom:annotation\", options, Example.prototype, \"method\");\n         *\n         *     // decorator factory as metadata-producing annotation.\n         *     function MyAnnotation(options): Decorator {\n         *         return (target, key?) => Reflect.defineMetadata(\"custom:annotation\", options, target, key);\n         *     }\n         *\n         */\n        function defineMetadata(metadataKey, metadataValue, target, propertyKey) {\n            if (!IsObject(target))\n                throw new TypeError();\n            if (!IsUndefined(propertyKey))\n                propertyKey = ToPropertyKey(propertyKey);\n            return OrdinaryDefineOwnMetadata(metadataKey, metadataValue, target, propertyKey);\n        }\n        exporter(\"defineMetadata\", defineMetadata);\n        /**\n         * Gets a value indicating whether the target object or its prototype chain has the provided metadata key defined.\n         * @param metadataKey A key used to store and retrieve metadata.\n         * @param target The target object on which the metadata is defined.\n         * @param propertyKey (Optional) The property key for the target.\n         * @returns `true` if the metadata key was defined on the target object or its prototype chain; otherwise, `false`.\n         * @example\n         *\n         *     class Example {\n         *         // property declarations are not part of ES6, though they are valid in TypeScript:\n         *         // static staticProperty;\n         *         // property;\n         *\n         *         constructor(p) { }\n         *         static staticMethod(p) { }\n         *         method(p) { }\n         *     }\n         *\n         *     // constructor\n         *     result = Reflect.hasMetadata(\"custom:annotation\", Example);\n         *\n         *     // property (on constructor)\n         *     result = Reflect.hasMetadata(\"custom:annotation\", Example, \"staticProperty\");\n         *\n         *     // property (on prototype)\n         *     result = Reflect.hasMetadata(\"custom:annotation\", Example.prototype, \"property\");\n         *\n         *     // method (on constructor)\n         *     result = Reflect.hasMetadata(\"custom:annotation\", Example, \"staticMethod\");\n         *\n         *     // method (on prototype)\n         *     result = Reflect.hasMetadata(\"custom:annotation\", Example.prototype, \"method\");\n         *\n         */\n        function hasMetadata(metadataKey, target, propertyKey) {\n            if (!IsObject(target))\n                throw new TypeError();\n            if (!IsUndefined(propertyKey))\n                propertyKey = ToPropertyKey(propertyKey);\n            return OrdinaryHasMetadata(metadataKey, target, propertyKey);\n        }\n        exporter(\"hasMetadata\", hasMetadata);\n        /**\n         * Gets a value indicating whether the target object has the provided metadata key defined.\n         * @param metadataKey A key used to store and retrieve metadata.\n         * @param target The target object on which the metadata is defined.\n         * @param propertyKey (Optional) The property key for the target.\n         * @returns `true` if the metadata key was defined on the target object; otherwise, `false`.\n         * @example\n         *\n         *     class Example {\n         *         // property declarations are not part of ES6, though they are valid in TypeScript:\n         *         // static staticProperty;\n         *         // property;\n         *\n         *         constructor(p) { }\n         *         static staticMethod(p) { }\n         *         method(p) { }\n         *     }\n         *\n         *     // constructor\n         *     result = Reflect.hasOwnMetadata(\"custom:annotation\", Example);\n         *\n         *     // property (on constructor)\n         *     result = Reflect.hasOwnMetadata(\"custom:annotation\", Example, \"staticProperty\");\n         *\n         *     // property (on prototype)\n         *     result = Reflect.hasOwnMetadata(\"custom:annotation\", Example.prototype, \"property\");\n         *\n         *     // method (on constructor)\n         *     result = Reflect.hasOwnMetadata(\"custom:annotation\", Example, \"staticMethod\");\n         *\n         *     // method (on prototype)\n         *     result = Reflect.hasOwnMetadata(\"custom:annotation\", Example.prototype, \"method\");\n         *\n         */\n        function hasOwnMetadata(metadataKey, target, propertyKey) {\n            if (!IsObject(target))\n                throw new TypeError();\n            if (!IsUndefined(propertyKey))\n                propertyKey = ToPropertyKey(propertyKey);\n            return OrdinaryHasOwnMetadata(metadataKey, target, propertyKey);\n        }\n        exporter(\"hasOwnMetadata\", hasOwnMetadata);\n        /**\n         * Gets the metadata value for the provided metadata key on the target object or its prototype chain.\n         * @param metadataKey A key used to store and retrieve metadata.\n         * @param target The target object on which the metadata is defined.\n         * @param propertyKey (Optional) The property key for the target.\n         * @returns The metadata value for the metadata key if found; otherwise, `undefined`.\n         * @example\n         *\n         *     class Example {\n         *         // property declarations are not part of ES6, though they are valid in TypeScript:\n         *         // static staticProperty;\n         *         // property;\n         *\n         *         constructor(p) { }\n         *         static staticMethod(p) { }\n         *         method(p) { }\n         *     }\n         *\n         *     // constructor\n         *     result = Reflect.getMetadata(\"custom:annotation\", Example);\n         *\n         *     // property (on constructor)\n         *     result = Reflect.getMetadata(\"custom:annotation\", Example, \"staticProperty\");\n         *\n         *     // property (on prototype)\n         *     result = Reflect.getMetadata(\"custom:annotation\", Example.prototype, \"property\");\n         *\n         *     // method (on constructor)\n         *     result = Reflect.getMetadata(\"custom:annotation\", Example, \"staticMethod\");\n         *\n         *     // method (on prototype)\n         *     result = Reflect.getMetadata(\"custom:annotation\", Example.prototype, \"method\");\n         *\n         */\n        function getMetadata(metadataKey, target, propertyKey) {\n            if (!IsObject(target))\n                throw new TypeError();\n            if (!IsUndefined(propertyKey))\n                propertyKey = ToPropertyKey(propertyKey);\n            return OrdinaryGetMetadata(metadataKey, target, propertyKey);\n        }\n        exporter(\"getMetadata\", getMetadata);\n        /**\n         * Gets the metadata value for the provided metadata key on the target object.\n         * @param metadataKey A key used to store and retrieve metadata.\n         * @param target The target object on which the metadata is defined.\n         * @param propertyKey (Optional) The property key for the target.\n         * @returns The metadata value for the metadata key if found; otherwise, `undefined`.\n         * @example\n         *\n         *     class Example {\n         *         // property declarations are not part of ES6, though they are valid in TypeScript:\n         *         // static staticProperty;\n         *         // property;\n         *\n         *         constructor(p) { }\n         *         static staticMethod(p) { }\n         *         method(p) { }\n         *     }\n         *\n         *     // constructor\n         *     result = Reflect.getOwnMetadata(\"custom:annotation\", Example);\n         *\n         *     // property (on constructor)\n         *     result = Reflect.getOwnMetadata(\"custom:annotation\", Example, \"staticProperty\");\n         *\n         *     // property (on prototype)\n         *     result = Reflect.getOwnMetadata(\"custom:annotation\", Example.prototype, \"property\");\n         *\n         *     // method (on constructor)\n         *     result = Reflect.getOwnMetadata(\"custom:annotation\", Example, \"staticMethod\");\n         *\n         *     // method (on prototype)\n         *     result = Reflect.getOwnMetadata(\"custom:annotation\", Example.prototype, \"method\");\n         *\n         */\n        function getOwnMetadata(metadataKey, target, propertyKey) {\n            if (!IsObject(target))\n                throw new TypeError();\n            if (!IsUndefined(propertyKey))\n                propertyKey = ToPropertyKey(propertyKey);\n            return OrdinaryGetOwnMetadata(metadataKey, target, propertyKey);\n        }\n        exporter(\"getOwnMetadata\", getOwnMetadata);\n        /**\n         * Gets the metadata keys defined on the target object or its prototype chain.\n         * @param target The target object on which the metadata is defined.\n         * @param propertyKey (Optional) The property key for the target.\n         * @returns An array of unique metadata keys.\n         * @example\n         *\n         *     class Example {\n         *         // property declarations are not part of ES6, though they are valid in TypeScript:\n         *         // static staticProperty;\n         *         // property;\n         *\n         *         constructor(p) { }\n         *         static staticMethod(p) { }\n         *         method(p) { }\n         *     }\n         *\n         *     // constructor\n         *     result = Reflect.getMetadataKeys(Example);\n         *\n         *     // property (on constructor)\n         *     result = Reflect.getMetadataKeys(Example, \"staticProperty\");\n         *\n         *     // property (on prototype)\n         *     result = Reflect.getMetadataKeys(Example.prototype, \"property\");\n         *\n         *     // method (on constructor)\n         *     result = Reflect.getMetadataKeys(Example, \"staticMethod\");\n         *\n         *     // method (on prototype)\n         *     result = Reflect.getMetadataKeys(Example.prototype, \"method\");\n         *\n         */\n        function getMetadataKeys(target, propertyKey) {\n            if (!IsObject(target))\n                throw new TypeError();\n            if (!IsUndefined(propertyKey))\n                propertyKey = ToPropertyKey(propertyKey);\n            return OrdinaryMetadataKeys(target, propertyKey);\n        }\n        exporter(\"getMetadataKeys\", getMetadataKeys);\n        /**\n         * Gets the unique metadata keys defined on the target object.\n         * @param target The target object on which the metadata is defined.\n         * @param propertyKey (Optional) The property key for the target.\n         * @returns An array of unique metadata keys.\n         * @example\n         *\n         *     class Example {\n         *         // property declarations are not part of ES6, though they are valid in TypeScript:\n         *         // static staticProperty;\n         *         // property;\n         *\n         *         constructor(p) { }\n         *         static staticMethod(p) { }\n         *         method(p) { }\n         *     }\n         *\n         *     // constructor\n         *     result = Reflect.getOwnMetadataKeys(Example);\n         *\n         *     // property (on constructor)\n         *     result = Reflect.getOwnMetadataKeys(Example, \"staticProperty\");\n         *\n         *     // property (on prototype)\n         *     result = Reflect.getOwnMetadataKeys(Example.prototype, \"property\");\n         *\n         *     // method (on constructor)\n         *     result = Reflect.getOwnMetadataKeys(Example, \"staticMethod\");\n         *\n         *     // method (on prototype)\n         *     result = Reflect.getOwnMetadataKeys(Example.prototype, \"method\");\n         *\n         */\n        function getOwnMetadataKeys(target, propertyKey) {\n            if (!IsObject(target))\n                throw new TypeError();\n            if (!IsUndefined(propertyKey))\n                propertyKey = ToPropertyKey(propertyKey);\n            return OrdinaryOwnMetadataKeys(target, propertyKey);\n        }\n        exporter(\"getOwnMetadataKeys\", getOwnMetadataKeys);\n        /**\n         * Deletes the metadata entry from the target object with the provided key.\n         * @param metadataKey A key used to store and retrieve metadata.\n         * @param target The target object on which the metadata is defined.\n         * @param propertyKey (Optional) The property key for the target.\n         * @returns `true` if the metadata entry was found and deleted; otherwise, false.\n         * @example\n         *\n         *     class Example {\n         *         // property declarations are not part of ES6, though they are valid in TypeScript:\n         *         // static staticProperty;\n         *         // property;\n         *\n         *         constructor(p) { }\n         *         static staticMethod(p) { }\n         *         method(p) { }\n         *     }\n         *\n         *     // constructor\n         *     result = Reflect.deleteMetadata(\"custom:annotation\", Example);\n         *\n         *     // property (on constructor)\n         *     result = Reflect.deleteMetadata(\"custom:annotation\", Example, \"staticProperty\");\n         *\n         *     // property (on prototype)\n         *     result = Reflect.deleteMetadata(\"custom:annotation\", Example.prototype, \"property\");\n         *\n         *     // method (on constructor)\n         *     result = Reflect.deleteMetadata(\"custom:annotation\", Example, \"staticMethod\");\n         *\n         *     // method (on prototype)\n         *     result = Reflect.deleteMetadata(\"custom:annotation\", Example.prototype, \"method\");\n         *\n         */\n        function deleteMetadata(metadataKey, target, propertyKey) {\n            if (!IsObject(target))\n                throw new TypeError();\n            if (!IsUndefined(propertyKey))\n                propertyKey = ToPropertyKey(propertyKey);\n            var metadataMap = GetOrCreateMetadataMap(target, propertyKey, /*Create*/ false);\n            if (IsUndefined(metadataMap))\n                return false;\n            if (!metadataMap.delete(metadataKey))\n                return false;\n            if (metadataMap.size > 0)\n                return true;\n            var targetMetadata = Metadata.get(target);\n            targetMetadata.delete(propertyKey);\n            if (targetMetadata.size > 0)\n                return true;\n            Metadata.delete(target);\n            return true;\n        }\n        exporter(\"deleteMetadata\", deleteMetadata);\n        function DecorateConstructor(decorators, target) {\n            for (var i = decorators.length - 1; i >= 0; --i) {\n                var decorator = decorators[i];\n                var decorated = decorator(target);\n                if (!IsUndefined(decorated) && !IsNull(decorated)) {\n                    if (!IsConstructor(decorated))\n                        throw new TypeError();\n                    target = decorated;\n                }\n            }\n            return target;\n        }\n        function DecorateProperty(decorators, target, propertyKey, descriptor) {\n            for (var i = decorators.length - 1; i >= 0; --i) {\n                var decorator = decorators[i];\n                var decorated = decorator(target, propertyKey, descriptor);\n                if (!IsUndefined(decorated) && !IsNull(decorated)) {\n                    if (!IsObject(decorated))\n                        throw new TypeError();\n                    descriptor = decorated;\n                }\n            }\n            return descriptor;\n        }\n        function GetOrCreateMetadataMap(O, P, Create) {\n            var targetMetadata = Metadata.get(O);\n            if (IsUndefined(targetMetadata)) {\n                if (!Create)\n                    return undefined;\n                targetMetadata = new _Map();\n                Metadata.set(O, targetMetadata);\n            }\n            var metadataMap = targetMetadata.get(P);\n            if (IsUndefined(metadataMap)) {\n                if (!Create)\n                    return undefined;\n                metadataMap = new _Map();\n                targetMetadata.set(P, metadataMap);\n            }\n            return metadataMap;\n        }\n        // 3.1.1.1 OrdinaryHasMetadata(MetadataKey, O, P)\n        // https://rbuckton.github.io/reflect-metadata/#ordinaryhasmetadata\n        function OrdinaryHasMetadata(MetadataKey, O, P) {\n            var hasOwn = OrdinaryHasOwnMetadata(MetadataKey, O, P);\n            if (hasOwn)\n                return true;\n            var parent = OrdinaryGetPrototypeOf(O);\n            if (!IsNull(parent))\n                return OrdinaryHasMetadata(MetadataKey, parent, P);\n            return false;\n        }\n        // 3.1.2.1 OrdinaryHasOwnMetadata(MetadataKey, O, P)\n        // https://rbuckton.github.io/reflect-metadata/#ordinaryhasownmetadata\n        function OrdinaryHasOwnMetadata(MetadataKey, O, P) {\n            var metadataMap = GetOrCreateMetadataMap(O, P, /*Create*/ false);\n            if (IsUndefined(metadataMap))\n                return false;\n            return ToBoolean(metadataMap.has(MetadataKey));\n        }\n        // 3.1.3.1 OrdinaryGetMetadata(MetadataKey, O, P)\n        // https://rbuckton.github.io/reflect-metadata/#ordinarygetmetadata\n        function OrdinaryGetMetadata(MetadataKey, O, P) {\n            var hasOwn = OrdinaryHasOwnMetadata(MetadataKey, O, P);\n            if (hasOwn)\n                return OrdinaryGetOwnMetadata(MetadataKey, O, P);\n            var parent = OrdinaryGetPrototypeOf(O);\n            if (!IsNull(parent))\n                return OrdinaryGetMetadata(MetadataKey, parent, P);\n            return undefined;\n        }\n        // 3.1.4.1 OrdinaryGetOwnMetadata(MetadataKey, O, P)\n        // https://rbuckton.github.io/reflect-metadata/#ordinarygetownmetadata\n        function OrdinaryGetOwnMetadata(MetadataKey, O, P) {\n            var metadataMap = GetOrCreateMetadataMap(O, P, /*Create*/ false);\n            if (IsUndefined(metadataMap))\n                return undefined;\n            return metadataMap.get(MetadataKey);\n        }\n        // 3.1.5.1 OrdinaryDefineOwnMetadata(MetadataKey, MetadataValue, O, P)\n        // https://rbuckton.github.io/reflect-metadata/#ordinarydefineownmetadata\n        function OrdinaryDefineOwnMetadata(MetadataKey, MetadataValue, O, P) {\n            var metadataMap = GetOrCreateMetadataMap(O, P, /*Create*/ true);\n            metadataMap.set(MetadataKey, MetadataValue);\n        }\n        // 3.1.6.1 OrdinaryMetadataKeys(O, P)\n        // https://rbuckton.github.io/reflect-metadata/#ordinarymetadatakeys\n        function OrdinaryMetadataKeys(O, P) {\n            var ownKeys = OrdinaryOwnMetadataKeys(O, P);\n            var parent = OrdinaryGetPrototypeOf(O);\n            if (parent === null)\n                return ownKeys;\n            var parentKeys = OrdinaryMetadataKeys(parent, P);\n            if (parentKeys.length <= 0)\n                return ownKeys;\n            if (ownKeys.length <= 0)\n                return parentKeys;\n            var set = new _Set();\n            var keys = [];\n            for (var _i = 0, ownKeys_1 = ownKeys; _i < ownKeys_1.length; _i++) {\n                var key = ownKeys_1[_i];\n                var hasKey = set.has(key);\n                if (!hasKey) {\n                    set.add(key);\n                    keys.push(key);\n                }\n            }\n            for (var _a = 0, parentKeys_1 = parentKeys; _a < parentKeys_1.length; _a++) {\n                var key = parentKeys_1[_a];\n                var hasKey = set.has(key);\n                if (!hasKey) {\n                    set.add(key);\n                    keys.push(key);\n                }\n            }\n            return keys;\n        }\n        // 3.1.7.1 OrdinaryOwnMetadataKeys(O, P)\n        // https://rbuckton.github.io/reflect-metadata/#ordinaryownmetadatakeys\n        function OrdinaryOwnMetadataKeys(O, P) {\n            var keys = [];\n            var metadataMap = GetOrCreateMetadataMap(O, P, /*Create*/ false);\n            if (IsUndefined(metadataMap))\n                return keys;\n            var keysObj = metadataMap.keys();\n            var iterator = GetIterator(keysObj);\n            var k = 0;\n            while (true) {\n                var next = IteratorStep(iterator);\n                if (!next) {\n                    keys.length = k;\n                    return keys;\n                }\n                var nextValue = IteratorValue(next);\n                try {\n                    keys[k] = nextValue;\n                }\n                catch (e) {\n                    try {\n                        IteratorClose(iterator);\n                    }\n                    finally {\n                        throw e;\n                    }\n                }\n                k++;\n            }\n        }\n        // 6 ECMAScript Data Typ0es and Values\n        // https://tc39.github.io/ecma262/#sec-ecmascript-data-types-and-values\n        function Type(x) {\n            if (x === null)\n                return 1 /* Null */;\n            switch (typeof x) {\n                case \"undefined\": return 0 /* Undefined */;\n                case \"boolean\": return 2 /* Boolean */;\n                case \"string\": return 3 /* String */;\n                case \"symbol\": return 4 /* Symbol */;\n                case \"number\": return 5 /* Number */;\n                case \"object\": return x === null ? 1 /* Null */ : 6 /* Object */;\n                default: return 6 /* Object */;\n            }\n        }\n        // 6.1.1 The Undefined Type\n        // https://tc39.github.io/ecma262/#sec-ecmascript-language-types-undefined-type\n        function IsUndefined(x) {\n            return x === undefined;\n        }\n        // 6.1.2 The Null Type\n        // https://tc39.github.io/ecma262/#sec-ecmascript-language-types-null-type\n        function IsNull(x) {\n            return x === null;\n        }\n        // 6.1.5 The Symbol Type\n        // https://tc39.github.io/ecma262/#sec-ecmascript-language-types-symbol-type\n        function IsSymbol(x) {\n            return typeof x === \"symbol\";\n        }\n        // 6.1.7 The Object Type\n        // https://tc39.github.io/ecma262/#sec-object-type\n        function IsObject(x) {\n            return typeof x === \"object\" ? x !== null : typeof x === \"function\";\n        }\n        // 7.1 Type Conversion\n        // https://tc39.github.io/ecma262/#sec-type-conversion\n        // 7.1.1 ToPrimitive(input [, PreferredType])\n        // https://tc39.github.io/ecma262/#sec-toprimitive\n        function ToPrimitive(input, PreferredType) {\n            switch (Type(input)) {\n                case 0 /* Undefined */: return input;\n                case 1 /* Null */: return input;\n                case 2 /* Boolean */: return input;\n                case 3 /* String */: return input;\n                case 4 /* Symbol */: return input;\n                case 5 /* Number */: return input;\n            }\n            var hint = PreferredType === 3 /* String */ ? \"string\" : PreferredType === 5 /* Number */ ? \"number\" : \"default\";\n            var exoticToPrim = GetMethod(input, toPrimitiveSymbol);\n            if (exoticToPrim !== undefined) {\n                var result = exoticToPrim.call(input, hint);\n                if (IsObject(result))\n                    throw new TypeError();\n                return result;\n            }\n            return OrdinaryToPrimitive(input, hint === \"default\" ? \"number\" : hint);\n        }\n        // 7.1.1.1 OrdinaryToPrimitive(O, hint)\n        // https://tc39.github.io/ecma262/#sec-ordinarytoprimitive\n        function OrdinaryToPrimitive(O, hint) {\n            if (hint === \"string\") {\n                var toString_1 = O.toString;\n                if (IsCallable(toString_1)) {\n                    var result = toString_1.call(O);\n                    if (!IsObject(result))\n                        return result;\n                }\n                var valueOf = O.valueOf;\n                if (IsCallable(valueOf)) {\n                    var result = valueOf.call(O);\n                    if (!IsObject(result))\n                        return result;\n                }\n            }\n            else {\n                var valueOf = O.valueOf;\n                if (IsCallable(valueOf)) {\n                    var result = valueOf.call(O);\n                    if (!IsObject(result))\n                        return result;\n                }\n                var toString_2 = O.toString;\n                if (IsCallable(toString_2)) {\n                    var result = toString_2.call(O);\n                    if (!IsObject(result))\n                        return result;\n                }\n            }\n            throw new TypeError();\n        }\n        // 7.1.2 ToBoolean(argument)\n        // https://tc39.github.io/ecma262/2016/#sec-toboolean\n        function ToBoolean(argument) {\n            return !!argument;\n        }\n        // 7.1.12 ToString(argument)\n        // https://tc39.github.io/ecma262/#sec-tostring\n        function ToString(argument) {\n            return \"\" + argument;\n        }\n        // 7.1.14 ToPropertyKey(argument)\n        // https://tc39.github.io/ecma262/#sec-topropertykey\n        function ToPropertyKey(argument) {\n            var key = ToPrimitive(argument, 3 /* String */);\n            if (IsSymbol(key))\n                return key;\n            return ToString(key);\n        }\n        // 7.2 Testing and Comparison Operations\n        // https://tc39.github.io/ecma262/#sec-testing-and-comparison-operations\n        // 7.2.2 IsArray(argument)\n        // https://tc39.github.io/ecma262/#sec-isarray\n        function IsArray(argument) {\n            return Array.isArray\n                ? Array.isArray(argument)\n                : argument instanceof Object\n                    ? argument instanceof Array\n                    : Object.prototype.toString.call(argument) === \"[object Array]\";\n        }\n        // 7.2.3 IsCallable(argument)\n        // https://tc39.github.io/ecma262/#sec-iscallable\n        function IsCallable(argument) {\n            // NOTE: This is an approximation as we cannot check for [[Call]] internal method.\n            return typeof argument === \"function\";\n        }\n        // 7.2.4 IsConstructor(argument)\n        // https://tc39.github.io/ecma262/#sec-isconstructor\n        function IsConstructor(argument) {\n            // NOTE: This is an approximation as we cannot check for [[Construct]] internal method.\n            return typeof argument === \"function\";\n        }\n        // 7.2.7 IsPropertyKey(argument)\n        // https://tc39.github.io/ecma262/#sec-ispropertykey\n        function IsPropertyKey(argument) {\n            switch (Type(argument)) {\n                case 3 /* String */: return true;\n                case 4 /* Symbol */: return true;\n                default: return false;\n            }\n        }\n        // 7.3 Operations on Objects\n        // https://tc39.github.io/ecma262/#sec-operations-on-objects\n        // 7.3.9 GetMethod(V, P)\n        // https://tc39.github.io/ecma262/#sec-getmethod\n        function GetMethod(V, P) {\n            var func = V[P];\n            if (func === undefined || func === null)\n                return undefined;\n            if (!IsCallable(func))\n                throw new TypeError();\n            return func;\n        }\n        // 7.4 Operations on Iterator Objects\n        // https://tc39.github.io/ecma262/#sec-operations-on-iterator-objects\n        function GetIterator(obj) {\n            var method = GetMethod(obj, iteratorSymbol);\n            if (!IsCallable(method))\n                throw new TypeError(); // from Call\n            var iterator = method.call(obj);\n            if (!IsObject(iterator))\n                throw new TypeError();\n            return iterator;\n        }\n        // 7.4.4 IteratorValue(iterResult)\n        // https://tc39.github.io/ecma262/2016/#sec-iteratorvalue\n        function IteratorValue(iterResult) {\n            return iterResult.value;\n        }\n        // 7.4.5 IteratorStep(iterator)\n        // https://tc39.github.io/ecma262/#sec-iteratorstep\n        function IteratorStep(iterator) {\n            var result = iterator.next();\n            return result.done ? false : result;\n        }\n        // 7.4.6 IteratorClose(iterator, completion)\n        // https://tc39.github.io/ecma262/#sec-iteratorclose\n        function IteratorClose(iterator) {\n            var f = iterator[\"return\"];\n            if (f)\n                f.call(iterator);\n        }\n        // 9.1 Ordinary Object Internal Methods and Internal Slots\n        // https://tc39.github.io/ecma262/#sec-ordinary-object-internal-methods-and-internal-slots\n        // 9.1.1.1 OrdinaryGetPrototypeOf(O)\n        // https://tc39.github.io/ecma262/#sec-ordinarygetprototypeof\n        function OrdinaryGetPrototypeOf(O) {\n            var proto = Object.getPrototypeOf(O);\n            if (typeof O !== \"function\" || O === functionPrototype)\n                return proto;\n            // TypeScript doesn't set __proto__ in ES5, as it's non-standard.\n            // Try to determine the superclass constructor. Compatible implementations\n            // must either set __proto__ on a subclass constructor to the superclass constructor,\n            // or ensure each class has a valid `constructor` property on its prototype that\n            // points back to the constructor.\n            // If this is not the same as Function.[[Prototype]], then this is definately inherited.\n            // This is the case when in ES6 or when using __proto__ in a compatible browser.\n            if (proto !== functionPrototype)\n                return proto;\n            // If the super prototype is Object.prototype, null, or undefined, then we cannot determine the heritage.\n            var prototype = O.prototype;\n            var prototypeProto = prototype && Object.getPrototypeOf(prototype);\n            if (prototypeProto == null || prototypeProto === Object.prototype)\n                return proto;\n            // If the constructor was not a function, then we cannot determine the heritage.\n            var constructor = prototypeProto.constructor;\n            if (typeof constructor !== \"function\")\n                return proto;\n            // If we have some kind of self-reference, then we cannot determine the heritage.\n            if (constructor === O)\n                return proto;\n            // we have a pretty good guess at the heritage.\n            return constructor;\n        }\n        // naive Map shim\n        function CreateMapPolyfill() {\n            var cacheSentinel = {};\n            var arraySentinel = [];\n            var MapIterator = /** @class */ (function () {\n                function MapIterator(keys, values, selector) {\n                    this._index = 0;\n                    this._keys = keys;\n                    this._values = values;\n                    this._selector = selector;\n                }\n                MapIterator.prototype[\"@@iterator\"] = function () { return this; };\n                MapIterator.prototype[iteratorSymbol] = function () { return this; };\n                MapIterator.prototype.next = function () {\n                    var index = this._index;\n                    if (index >= 0 && index < this._keys.length) {\n                        var result = this._selector(this._keys[index], this._values[index]);\n                        if (index + 1 >= this._keys.length) {\n                            this._index = -1;\n                            this._keys = arraySentinel;\n                            this._values = arraySentinel;\n                        }\n                        else {\n                            this._index++;\n                        }\n                        return { value: result, done: false };\n                    }\n                    return { value: undefined, done: true };\n                };\n                MapIterator.prototype.throw = function (error) {\n                    if (this._index >= 0) {\n                        this._index = -1;\n                        this._keys = arraySentinel;\n                        this._values = arraySentinel;\n                    }\n                    throw error;\n                };\n                MapIterator.prototype.return = function (value) {\n                    if (this._index >= 0) {\n                        this._index = -1;\n                        this._keys = arraySentinel;\n                        this._values = arraySentinel;\n                    }\n                    return { value: value, done: true };\n                };\n                return MapIterator;\n            }());\n            return /** @class */ (function () {\n                function Map() {\n                    this._keys = [];\n                    this._values = [];\n                    this._cacheKey = cacheSentinel;\n                    this._cacheIndex = -2;\n                }\n                Object.defineProperty(Map.prototype, \"size\", {\n                    get: function () { return this._keys.length; },\n                    enumerable: true,\n                    configurable: true\n                });\n                Map.prototype.has = function (key) { return this._find(key, /*insert*/ false) >= 0; };\n                Map.prototype.get = function (key) {\n                    var index = this._find(key, /*insert*/ false);\n                    return index >= 0 ? this._values[index] : undefined;\n                };\n                Map.prototype.set = function (key, value) {\n                    var index = this._find(key, /*insert*/ true);\n                    this._values[index] = value;\n                    return this;\n                };\n                Map.prototype.delete = function (key) {\n                    var index = this._find(key, /*insert*/ false);\n                    if (index >= 0) {\n                        var size = this._keys.length;\n                        for (var i = index + 1; i < size; i++) {\n                            this._keys[i - 1] = this._keys[i];\n                            this._values[i - 1] = this._values[i];\n                        }\n                        this._keys.length--;\n                        this._values.length--;\n                        if (key === this._cacheKey) {\n                            this._cacheKey = cacheSentinel;\n                            this._cacheIndex = -2;\n                        }\n                        return true;\n                    }\n                    return false;\n                };\n                Map.prototype.clear = function () {\n                    this._keys.length = 0;\n                    this._values.length = 0;\n                    this._cacheKey = cacheSentinel;\n                    this._cacheIndex = -2;\n                };\n                Map.prototype.keys = function () { return new MapIterator(this._keys, this._values, getKey); };\n                Map.prototype.values = function () { return new MapIterator(this._keys, this._values, getValue); };\n                Map.prototype.entries = function () { return new MapIterator(this._keys, this._values, getEntry); };\n                Map.prototype[\"@@iterator\"] = function () { return this.entries(); };\n                Map.prototype[iteratorSymbol] = function () { return this.entries(); };\n                Map.prototype._find = function (key, insert) {\n                    if (this._cacheKey !== key) {\n                        this._cacheIndex = this._keys.indexOf(this._cacheKey = key);\n                    }\n                    if (this._cacheIndex < 0 && insert) {\n                        this._cacheIndex = this._keys.length;\n                        this._keys.push(key);\n                        this._values.push(undefined);\n                    }\n                    return this._cacheIndex;\n                };\n                return Map;\n            }());\n            function getKey(key, _) {\n                return key;\n            }\n            function getValue(_, value) {\n                return value;\n            }\n            function getEntry(key, value) {\n                return [key, value];\n            }\n        }\n        // naive Set shim\n        function CreateSetPolyfill() {\n            return /** @class */ (function () {\n                function Set() {\n                    this._map = new _Map();\n                }\n                Object.defineProperty(Set.prototype, \"size\", {\n                    get: function () { return this._map.size; },\n                    enumerable: true,\n                    configurable: true\n                });\n                Set.prototype.has = function (value) { return this._map.has(value); };\n                Set.prototype.add = function (value) { return this._map.set(value, value), this; };\n                Set.prototype.delete = function (value) { return this._map.delete(value); };\n                Set.prototype.clear = function () { this._map.clear(); };\n                Set.prototype.keys = function () { return this._map.keys(); };\n                Set.prototype.values = function () { return this._map.values(); };\n                Set.prototype.entries = function () { return this._map.entries(); };\n                Set.prototype[\"@@iterator\"] = function () { return this.keys(); };\n                Set.prototype[iteratorSymbol] = function () { return this.keys(); };\n                return Set;\n            }());\n        }\n        // naive WeakMap shim\n        function CreateWeakMapPolyfill() {\n            var UUID_SIZE = 16;\n            var keys = HashMap.create();\n            var rootKey = CreateUniqueKey();\n            return /** @class */ (function () {\n                function WeakMap() {\n                    this._key = CreateUniqueKey();\n                }\n                WeakMap.prototype.has = function (target) {\n                    var table = GetOrCreateWeakMapTable(target, /*create*/ false);\n                    return table !== undefined ? HashMap.has(table, this._key) : false;\n                };\n                WeakMap.prototype.get = function (target) {\n                    var table = GetOrCreateWeakMapTable(target, /*create*/ false);\n                    return table !== undefined ? HashMap.get(table, this._key) : undefined;\n                };\n                WeakMap.prototype.set = function (target, value) {\n                    var table = GetOrCreateWeakMapTable(target, /*create*/ true);\n                    table[this._key] = value;\n                    return this;\n                };\n                WeakMap.prototype.delete = function (target) {\n                    var table = GetOrCreateWeakMapTable(target, /*create*/ false);\n                    return table !== undefined ? delete table[this._key] : false;\n                };\n                WeakMap.prototype.clear = function () {\n                    // NOTE: not a real clear, just makes the previous data unreachable\n                    this._key = CreateUniqueKey();\n                };\n                return WeakMap;\n            }());\n            function CreateUniqueKey() {\n                var key;\n                do\n                    key = \"@@WeakMap@@\" + CreateUUID();\n                while (HashMap.has(keys, key));\n                keys[key] = true;\n                return key;\n            }\n            function GetOrCreateWeakMapTable(target, create) {\n                if (!hasOwn.call(target, rootKey)) {\n                    if (!create)\n                        return undefined;\n                    Object.defineProperty(target, rootKey, { value: HashMap.create() });\n                }\n                return target[rootKey];\n            }\n            function FillRandomBytes(buffer, size) {\n                for (var i = 0; i < size; ++i)\n                    buffer[i] = Math.random() * 0xff | 0;\n                return buffer;\n            }\n            function GenRandomBytes(size) {\n                if (typeof Uint8Array === \"function\") {\n                    if (typeof crypto !== \"undefined\")\n                        return crypto.getRandomValues(new Uint8Array(size));\n                    if (typeof msCrypto !== \"undefined\")\n                        return msCrypto.getRandomValues(new Uint8Array(size));\n                    return FillRandomBytes(new Uint8Array(size), size);\n                }\n                return FillRandomBytes(new Array(size), size);\n            }\n            function CreateUUID() {\n                var data = GenRandomBytes(UUID_SIZE);\n                // mark as random - RFC 4122 § 4.4\n                data[6] = data[6] & 0x4f | 0x40;\n                data[8] = data[8] & 0xbf | 0x80;\n                var result = \"\";\n                for (var offset = 0; offset < UUID_SIZE; ++offset) {\n                    var byte = data[offset];\n                    if (offset === 4 || offset === 6 || offset === 8)\n                        result += \"-\";\n                    if (byte < 16)\n                        result += \"0\";\n                    result += byte.toString(16).toLowerCase();\n                }\n                return result;\n            }\n        }\n        // uses a heuristic used by v8 and chakra to force an object into dictionary mode.\n        function MakeDictionary(obj) {\n            obj.__ = undefined;\n            delete obj.__;\n            return obj;\n        }\n    });\n})(Reflect || (Reflect = {}));\n","import { inject, injectable } from \"inversify\";\nimport { Debouncer } from \"./util/Debouncer\";\nimport { IDebouncerFactory, IDebouncerManager } from \"./interfaces\";\nimport { TYPES } from \"./di/container-types\";\n\n@injectable()\nexport class DebouncerManager implements IDebouncerManager {\n    private debouncers: { [key: string]: Debouncer } = {};\n\n    constructor(\n        @inject(TYPES.DebouncerFactory)\n        private readonly _debounceFactory: IDebouncerFactory\n    ) {\n        console.log(\"DebouncerManager constructor\");\n    }\n\n    getDebouncerForControl(controlName: string): Debouncer {\n        if (!this.debouncers[controlName]) {\n            this.debouncers[controlName] = this._debounceFactory.create();\n        }\n        return this.debouncers[controlName];\n    }\n\n    clearDebouncersForControl(controlName: string): void {\n        const debouncer = this.debouncers[controlName];\n        if (debouncer) {\n            debouncer.cancel(); // Assuming the debouncer has a cancel method\n            delete this.debouncers[controlName];\n        }\n    }\n    clearDebouncersForControls(controlNames: string[]): void {\n        controlNames.forEach((controlName) => {\n            if (\n                Object.prototype.hasOwnProperty.call(\n                    this.debouncers,\n                    controlName\n                )\n            ) {\n                this.debouncers[controlName].cancel();\n                delete this.debouncers[controlName];\n            }\n        });\n    }\n}\n","import { injectable } from \"inversify\";\nimport { IDebouncer, IDebouncerFactory } from \"./interfaces\";\nimport { Debouncer } from \"./util/Debouncer\";\n/**\n * A factory for creating instances of `Debouncer`.\n *\n * The `DebouncerFactory` class implements the `IDebouncerFactory` interface\n * and is responsible for providing a method to create new `Debouncer` objects.\n * This class uses the `@injectable` decorator to allow it to be injected into\n * other components, enhancing modularity and testability.\n *\n * @see {@link IDebouncerFactory} for interface documentation.\n */\n@injectable()\nexport class DebouncerFactory implements IDebouncerFactory {\n    constructor() {\n        console.log(\"DebouncerFactory constructor\");\n    }\n    /**\n     * Creates a new instance of `Debouncer`.\n     *\n     * This method implements the `create` method from the `IDebouncerFactory` interface.\n     * It allows consumers to obtain a fresh instance of `Debouncer` without needing to know\n     * the details of how the `Debouncer` is constructed.\n     *\n     * @returns {IDebouncer} An instance of `Debouncer` which can be used to debounce function calls.\n     */\n    create(): IDebouncer {\n        return new Debouncer();\n    }\n}\n","import { injectable } from \"inversify\";\nimport { IEventEmitter } from \"./interfaces\";\n@injectable()\nexport class EventEmitter<TEvents> implements IEventEmitter<TEvents> {\n    private listeners: {\n        [K in keyof TEvents]?: ((data: TEvents[K]) => void)[];\n    } = {};\n    constructor() {\n        console.log(\"EventEmitter constructor\");\n    }\n    on<K extends keyof TEvents>(\n        event: K,\n        listener: (data: TEvents[K]) => void\n    ): void {\n        if (!this.listeners[event]) {\n            this.listeners[event] = [];\n        }\n        this.listeners[event]!.push(listener);\n    }\n\n    off<K extends keyof TEvents>(\n        event: K,\n        listener: (data: TEvents[K]) => void\n    ): void {\n        if (!this.listeners[event]) return;\n        const callbackIndex = this.listeners[event]!.indexOf(listener);\n        if (callbackIndex >= 0) this.listeners[event]!.splice(callbackIndex, 1);\n    }\n\n    emit<K extends keyof TEvents>(event: K, data: TEvents[K]): void {\n        if (!this.listeners[event]) return;\n        for (const listener of this.listeners[event]!) {\n            listener(data);\n        }\n    }\n}\n","import { IForm } from \"./interfaces\";\n\nexport class Form implements IForm {\n    formElement: HTMLFormElement;\n    isAjax: boolean = false;\n    attributes: NamedNodeMap;\n    elements: HTMLFormControlsCollection;\n    element: Element;\n    buttons: HTMLButtonElement[];\n    constructor(formElement: HTMLFormElement) {\n        this.formElement = formElement;\n        this.attributes = formElement.attributes;\n        this.elements = formElement.elements;\n        this.element = Array.from(this.elements).find(\n            (el) => el instanceof Element\n        ) as Element;\n        this.buttons = Array.from(this.elements).filter(\n            (el) => el instanceof HTMLButtonElement\n        ) as HTMLButtonElement[];\n        this.init();\n    }\n\n    init(): void {\n        // Check the attriubes to see if the form is ajax\n        this.isAjax = this.formElement.hasAttribute(\"data-ajax\");\n        if (this.isAjax) {\n            this.setupAjax();\n        }\n    }\n\n    setupAjax(): void {\n        // Get the update target\n        const updateTarget = this.attributes.getNamedItem(\"data-ajax-update\");\n        if (updateTarget === undefined) {\n            throw new Error(\"data-ajax-update attribute is undefined\");\n        }\n    }\n}\n","import { injectable } from \"inversify\";\nimport { IForm, IFormFactory } from \"./interfaces\";\nimport { Result } from \"./Result\";\nimport { Form } from \"./Form\";\n\n@injectable()\nexport class FormFactory implements IFormFactory {\n    constructor() {}\n    create(formElement: HTMLFormElement): Result<IForm> {\n        try {\n            if (formElement === undefined) {\n                return new Result<IForm>(\n                    new Error(\"Form Element Is Undefined\")\n                );\n            }\n            const form = new Form(formElement);\n\n            return new Result<IForm>(form);\n        } catch (error: unknown) {\n            return new Result<IForm>(error as Error);\n        }\n    }\n}\n","import { inject, injectable } from \"inversify\";\r\nimport {\r\n    IDecoratedLogger,\r\n    IEventEmitter,\r\n    IForm,\r\n    IFormFactory,\r\n    IFormManager,\r\n    IObservableCollection\r\n} from \"./interfaces\";\r\nimport { TYPES } from \"./di/container-types\";\r\nimport { Result } from \"./Result\";\r\n\r\n@injectable()\r\n/**\r\n * Manages form instances within the application, including the creation\r\n * of form objects and the observation of DOM mutations for dynamically\r\n * added forms.\r\n * @class\r\n * @implements {IFormManager}\r\n */\r\nexport class FormManager implements IFormManager {\r\n    private mutationObserver: MutationObserver | null = null;\r\n    /**\r\n     * Constructs the FormManager instance responsible for managing form instances.\r\n     * It utilizes dependency injection to incorporate various services such as\r\n     * form collection management, form creation, event emission, and logging.\r\n     * @param {IObservableCollection<IForm>} _formsCollection - An observable collection that maintains the forms.\r\n     * @param {IFormFactory} _formFactory - A factory service for creating new form instances.\r\n     * @param {IEventEmitter<any>} _eventEmitter - An event emitter service to handle form-related events.\r\n     * @param {IDecoratedLogger} _logger - A logging service for error and debug reporting.\r\n     */\r\n    constructor(\r\n        @inject(TYPES.ObservableFormsCollection)\r\n        private readonly _formsCollection: IObservableCollection<IForm>,\r\n        @inject(TYPES.FormFactory) private readonly _formFactory: IFormFactory,\r\n        @inject(TYPES.EventEmitter)\r\n        private readonly _eventEmitter: IEventEmitter<any>,\r\n        @inject(TYPES.DebuggingLogger)\r\n        private readonly _logger: IDecoratedLogger\r\n    ) {\r\n        console.log(\"FormManager: constructor\");\r\n    }\r\n    /**\r\n     * Initializes form management by creating form instances from existing DOM\r\n     * and setting up a mutation observer for new forms added to the DOM.\r\n     */\r\n    init(): void {\r\n        this.createForms();\r\n    }\r\n    /**\r\n     * Processes mutation records from a `MutationObserver` and adds any detected new form elements to the form manager.\r\n     * It distinguishes between forms added directly under the observed node and forms nested within other elements.\r\n     * @param {MutationRecord[]} mutationsList - An array of `MutationRecord` objects representing individual mutations.\r\n     * The method iterates over this list, looking for mutations of the `childList` type, which indicate added or removed nodes.\r\n     * @example\r\n     * // Typically not called directly, but used as a callback for MutationObserver:\r\n     * const observer = new MutationObserver(handleFormMutations);\r\n     * observer.observe(document.body, { childList: true, subtree: true });\r\n     *\r\n     * // Could also be called manually in a testing context:\r\n     * handleFormMutations([\r\n     *   {\r\n     *     type: 'childList',\r\n     *     addedNodes: [document.createElement('form')],\r\n     *     removedNodes: [],\r\n     *     // other MutationRecord properties...\r\n     *   }\r\n     * ]);\r\n     * @see {@link https://developer.mozilla.org/en-US/docs/Web/API/MutationObserver} for more information on `MutationObserver`.\r\n     * @see {@link https://developer.mozilla.org/en-US/docs/Web/API/MutationRecord} for details on `MutationRecord`.\r\n     */\r\n    handleFormMutations(mutationsList: MutationRecord[]): void {\r\n        try {\r\n            for (const mutation of mutationsList) {\r\n                if (mutation.type === \"childList\") {\r\n                    // Process direct forms\r\n                    const directForms = Array.from(mutation.addedNodes).filter(\r\n                        (node): node is HTMLFormElement =>\r\n                            node instanceof HTMLFormElement\r\n                    );\r\n                    for (const form of directForms) {\r\n                        this.addForm(form);\r\n                    }\r\n\r\n                    // Process nested forms\r\n                    const nestedForms = Array.from(mutation.addedNodes)\r\n                        .filter(\r\n                            (node): node is HTMLElement =>\r\n                                node instanceof HTMLElement\r\n                        )\r\n                        .flatMap((node) =>\r\n                            Array.from(node.querySelectorAll(\"form\"))\r\n                        );\r\n                    for (const form of nestedForms) {\r\n                        this.addForm(form);\r\n                    }\r\n                }\r\n            }\r\n        } catch (error) {\r\n            // If error is an instance of Error, log its message; otherwise, log the error directly\r\n            const errorMessage =\r\n                error instanceof Error ? error.message : String(error);\r\n            this._logger\r\n                .getLogger()\r\n                .error(`Error in handleFormMutations: ${errorMessage}`);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Attempts to add a form to the forms collection.\r\n     * If the form is successfully created and added to the collection,\r\n     * a \"formAdded\" event is emitted.\r\n     * @param {HTMLFormElement} formElement - The HTML form element to be added to the collection.\r\n     * @throws Will log an error to the injected logger if the form creation fails or an unexpected error occurs.\r\n     */\r\n    addForm(formElement: HTMLFormElement): void {\r\n        try {\r\n            const formResults = this._formFactory.create(formElement);\r\n            if (!formResults.isSuccess) {\r\n                const error = Result.handleError(formResults);\r\n                this._logger\r\n                    .getLogger()\r\n                    .error(`FormManager: addForm: ${error}`);\r\n                return;\r\n            }\r\n\r\n            const formResult = Result.handleSuccess(formResults) as IForm;\r\n            if (formResult === undefined) {\r\n                this._logger\r\n                    .getLogger()\r\n                    .error(\"FormManager: addForm: formResult is undefined\");\r\n                return;\r\n            }\r\n\r\n            this._formsCollection.addItem(formResult);\r\n            this._eventEmitter.emit(\"formAdded\", formResult);\r\n        } catch (error) {\r\n            const errorMessage =\r\n                error instanceof Error ? error.message : String(error);\r\n            this._logger\r\n                .getLogger()\r\n                .error(\r\n                    `FormManager: addForm: Unexpected error: ${errorMessage}`\r\n                );\r\n        }\r\n    }\r\n    /**\r\n     * Iterates over all form elements present in the document and attempts\r\n     * to add each one to the forms collection using the addForm method.\r\n     * Errors during the addition of individual forms are logged and do not\r\n     * halt the process for subsequent forms.\r\n     */\r\n    createForms(): void {\r\n        const forms = document.querySelectorAll(\"form\");\r\n        const formsArray = Array.from(forms);\r\n\r\n        for (const formElement of formsArray) {\r\n            try {\r\n                this.addForm(formElement as HTMLFormElement);\r\n            } catch (error) {\r\n                const errorMessage =\r\n                    error instanceof Error ? error.message : String(error);\r\n                this._logger\r\n                    .getLogger()\r\n                    .error(\r\n                        `FormManager: createForms: Error when adding form: ${errorMessage}`\r\n                    );\r\n                // Optionally continue to next form or handle the error accordingly\r\n            }\r\n        }\r\n    }\r\n}\r\n","import { inject, injectable } from \"inversify\";\nimport { IDecoratedLogger, IFormManager } from \"./interfaces\";\nimport { TYPES } from \"./di/container-types\";\n@injectable()\nexport class FormObserver {\n    private mutationObserver: MutationObserver | null = null;\n    constructor(\n        @inject(TYPES.FormManager) private readonly _formManager: IFormManager,\n        @inject(TYPES.DebuggingLogger)\n        private readonly _logger: IDecoratedLogger\n    ) {\n        _logger.getLogger().info(\"FormObserver: constructor\");\n    }\n\n    startObserving(): void {\n        if (this.mutationObserver) {\n            this.mutationObserver.disconnect();\n        }\n        this.mutationObserver = new MutationObserver((mutationsList) => {\n            // Let the FormManager handle the mutations\n            this._formManager.handleFormMutations(mutationsList);\n        });\n        this._logger.getLogger().info(\"FormObserver: Is Observing\");\n        this.mutationObserver.observe(document.body, {\n            childList: true,\n            subtree: true\n        });\n    }\n\n    public stopObserving(): void {\n        this.mutationObserver?.disconnect();\n    }\n}\n","import { injectable } from \"inversify\";\r\nimport { ValidationParams } from \"./Types\";\r\nimport { IFormParser, IValidationInformation, IValidationRule } from \"./interfaces\";\r\nimport { Result } from \"./Result\";\r\n\r\n\r\n@injectable()\r\nexport class FormParser implements IFormParser {\r\n    private rulePriorities = new Map<string, number>([\r\n        [\"required\", 1],\r\n        [\"regex\", 2],\r\n        [\"length\", 3],\r\n        [\"range\", 4],\r\n        [\"remote-url\", 5]\r\n        // ... other rules with their respective priorities\r\n    ]);\r\n    ruleParamAttributes: Record<string, string[]> = {\r\n        length: [\"min\", \"max\"],\r\n        range: [\"min\", \"max\"],\r\n        regex: [\"pattern\"]\r\n        // ... other rules can be mapped similarly\r\n    };\r\n    constructor() {\r\n\r\n    }\r\n\r\n\r\n    parse(formElement: HTMLFormElement): Record<string, IValidationRule[]> {\r\n        const validationRules: Record<string, IValidationRule[]> = {};\r\n\r\n        const inputs = Array.from(formElement.elements) as HTMLElement[];\r\n\r\n        inputs.forEach(input => {\r\n            if ((input instanceof HTMLInputElement || input instanceof HTMLSelectElement || input instanceof HTMLTextAreaElement) && input.name) {\r\n                const rules: IValidationRule[] = this.getValidationRules(input);\r\n                // Assuming you have a function to assign priorities based on the rule type\r\n\r\n                validationRules[input.name] = rules;\r\n            }\r\n        });\r\n\r\n        return validationRules;\r\n    }\r\n    getValidationRules(input: HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement): IValidationRule[] {\r\n        const rules: IValidationRule[] = [];\r\n        const rulesWithParams: Record<string, any> = {};\r\n\r\n        Array.from(input.attributes).forEach(attr => {\r\n            if (attr.name.startsWith(\"data-val\")) {\r\n                const match = /data-val-([^\\-]+)-?([^\\-]+)?/.exec(attr.name);\r\n                if (match) {\r\n                    const [, ruleType, paramName] = match;\r\n                    if (!rulesWithParams[ruleType]) {\r\n                        rulesWithParams[ruleType] = {\r\n                            type: ruleType,\r\n                            message: '',\r\n                            params: {},\r\n                            priority: this.rulePriorities.get(ruleType) || 99\r\n                        };\r\n                    }\r\n                    // If it's a parameter of the rule, add it to the params object\r\n                    if (paramName) {\r\n                        rulesWithParams[ruleType].params[paramName] = attr.value;\r\n                    } else {\r\n                        // It's the main rule attribute, set the message\r\n                        rulesWithParams[ruleType].message = attr.value;\r\n                    }\r\n                }\r\n            }\r\n        });\r\n\r\n        // Convert the aggregated rule objects back into an array\r\n        Object.values(rulesWithParams).forEach(rule => {\r\n            rules.push(rule);\r\n        });\r\n\r\n        // Sort the rules based on their assigned priority\r\n        return rules.sort((a, b) => a.priority - b.priority);\r\n    }\r\n\r\n\r\n    getValidationRules1(input: HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement): IValidationRule[] {\r\n        const rules: IValidationRule[] = [];\r\n\r\n        Array.from(input.attributes).forEach(attr => {\r\n            if (attr.name.startsWith(\"data-val\") && attr.name !== \"data-val\") {\r\n                // Extract the rule type, e.g., 'length', 'regex', 'required'\r\n                const ruleType = attr.name.match(/data-val-([a-z]+)(?:-[a-z]+)?/i)?.[1] || \"\";\r\n                // Check if it's a parameter for an existing rule or a standalone rule\r\n                if (ruleType && !attr.name.endsWith(ruleType)) {\r\n                    // If it's a parameter, find the rule and add the parameter to it\r\n                    const rule = rules.find(r => r.type === ruleType);\r\n                    if (rule) {\r\n                        const paramName = attr.name.split(ruleType + \"-\")[1];\r\n                        rule.params[paramName] = attr.value;\r\n                    }\r\n                } else {\r\n                    // It's a standalone rule, create it and set its priority\r\n                    const priority = this.rulePriorities.get(ruleType) || 99;\r\n                    rules.push({ type: ruleType, message: attr.value, params: {}, priority });\r\n                }\r\n            }\r\n        });\r\n\r\n        // Sort the rules based on their assigned priority\r\n        return rules.sort((a, b) => a.priority - b.priority);\r\n    }\r\n\r\n\r\n    getValidationInformation(input: HTMLElement): Result<IValidationInformation> {\r\n        const rules: IValidationRule[] = this.getValidationRules(input as HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement);\r\n        const validationInformation: IValidationInformation = {\r\n            rules: rules,\r\n            input: input as HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement,\r\n            parentNode: input.parentNode\r\n        } as IValidationInformation;\r\n\r\n        return new Result<IValidationInformation>(validationInformation);\r\n    }\r\n    private extractParams(input: HTMLElement, ruleType: string): ValidationParams {\r\n        const params: ValidationParams = {};\r\n        // Use the already existing `ruleParamAttributes` map to determine which attributes are parameters\r\n        const paramAttributes = this.ruleParamAttributes[ruleType];\r\n\r\n        if (paramAttributes) {\r\n            paramAttributes.forEach(param => {\r\n                // The attribute name is constructed from the rule type and the parameter name\r\n                const attributeName = `data-val-${ruleType}-${param}`;\r\n                const value = input.getAttribute(attributeName);\r\n                if (value !== null) {\r\n                    params[param] = value;\r\n                }\r\n            });\r\n        }\r\n\r\n        return params;\r\n    }\r\n\r\n\r\n\r\n}\r\n\r\n// Usage\r\n//const formParser = new FormParser(\".form-create-account\");\r\n////const validationRules = formParser.parse();\r\n//console.log(validationRules);\r\n","import { inject, injectable } from \"inversify\";\nimport {\n    IAppEvents,\n    IEventEmitter,\n    IEventService,\n    IFormManager,\n    IFormObserver,\n    IInitializer,\n    IOptions,\n    IStateManager\n} from \"./interfaces\";\nimport { TYPES } from \"./di/container-types\";\n\n@injectable()\nexport class Initializer implements IInitializer {\n    constructor(\n        @inject(TYPES.Options) private readonly _options: IOptions,\n        @inject(TYPES.FormManager) private readonly _formManager: IFormManager,\n        @inject(TYPES.FormObserver)\n        private readonly _formObserver: IFormObserver,\n        @inject(TYPES.EventService)\n        private readonly _eventService: IEventService,\n        @inject(TYPES.StateManager)\n        private readonly _stateManager: IStateManager,\n        @inject(TYPES.EventEmitter)\n        private readonly _eventEmitter: IEventEmitter<IAppEvents>\n    ) {}\n\n    async init(): Promise<void> {\n        // If the DOM is already loaded\n        if (document.readyState === \"loading\") {\n            // The document is still loading, add an event listener\n            document.addEventListener(\"DOMContentLoaded\", () => {\n                this.onDOMLoaded();\n            });\n        } else {\n            // The DOM is already loaded\n            this.onDOMLoaded();\n        }\n\n        this._eventEmitter.emit(\"Initialized\", {\n            source: \"Initializer\",\n            message: \"System Intialized\"\n        });\n    }\n\n    private async onDOMLoaded(): Promise<void> {\n        // Your logic for when the DOM is loaded\n        this._formObserver.startObserving();\n        this._formManager.init();\n    }\n}\n","import {\n    IBulkChange,\n    IChange,\n    IObservableCollection,\n    IObserver\n} from \"./interfaces\";\nimport { injectable } from \"inversify\";\n/**\n * The ObservableCollection class implements an observable collection\n * that allows adding and removing observers, as well as notifying them\n * of changes.\n *\n * @template T The type of items that this collection holds.\n */\n@injectable()\nexport class ObservableCollection<T> implements IObservableCollection<T> {\n    private items: T[] = [];\n    private observers: IObserver<T>[] = [];\n\n    /**\n     * Adds an observer to the collection.\n     *\n     * If the observer is already added to the collection, it won't be added again.\n     *\n     * @param {IObserver<T>} observer - The observer to be added.\n     * @returns {boolean} Returns true if the observer is successfully added; otherwise, if the observer is already in the collection, returns false.\n     */\n    addObserver(observer: IObserver<T>): boolean {\n        if (this.observers.includes(observer)) {\n            return false; // Observer already exists, so don't add again\n        }\n        this.observers.push(observer);\n        return true;\n    }\n    /**\n     * Removes an observer from the collection.\n     *\n     * @param {IObserver<T>} observer - The observer to be removed.\n     * @returns {boolean} Returns true if the observer is found and removed; otherwise, false.\n     */\n    removeObserver(observer: IObserver<T>): boolean {\n        const index = this.observers.indexOf(observer);\n        if (index > -1) {\n            this.observers.splice(index, 1);\n            return true;\n        }\n        return false;\n    }\n    /**\n     * Adds an item to the collection and notifies the observers of the addition.\n     *\n     * @param {T} item - The item to be added to the collection.\n     */\n    addItem(item: T): void {\n        this.items.push(item);\n        this.notifyObservers({ type: \"add\", item });\n    }\n    /**\n     * Adds multiple items to the collection and notifies the observers of the bulk addition.\n     *\n     * Observers are notified once, irrespective of the number of items added.\n     *\n     * @param {T[]} items - An array of items to be added to the collection.\n     */\n    addItems(items: T[]): void {\n        this.items.push(...items);\n        this.notifyObservers({ type: \"bulk-add\", items: items }); // Pass items\n    }\n    /**\n     * Finds an item in the collection that satisfies the provided function.\n     *\n     * @param {(item: T) => boolean} conditionFunc - The function that new items must satisfy.\n     * @returns {T | undefined} The first item in the collection that satisfies the provided function; otherwise, undefined.\n     */\n    findItem(conditionFunc: (item: T) => boolean): T | undefined {\n        return this.items.find(conditionFunc);\n    }\n    /**\n     * Removes an item from the collection and notifies the observers of the removal.\n     *\n     * @param {T} item - The item to be removed from the collection.\n     */\n    removeItem(item: T): void {\n        const index = this.items.indexOf(item);\n        if (index > -1) {\n            this.items.splice(index, 1);\n            this.notifyObservers({ type: \"remove\", item });\n        }\n    }\n    /**\n     * Removes multiple items from the collection and notifies the observers of the bulk removal.\n     *\n     * This method leverages the Set data structure to efficiently identify and remove items from the collection.\n     * Observers are notified once, irrespective of the number of items removed.\n     * If an item is not found in the collection, it is simply ignored.\n     *\n     * @param {T[]} itemsToRemove - An array of items to be removed from the collection.\n     */\n    removeItems(itemsToRemove: T[]): void {\n        const itemsToRemoveSet = new Set(itemsToRemove);\n        this.items = this.items.filter((item) => !itemsToRemoveSet.has(item));\n        this.notifyObservers({ type: \"bulk-remove\", items: itemsToRemove });\n    }\n    /**\n     * Notifies all the observers about a change in the collection.\n     *\n     * This method accepts changes that can either be of type `IChange` (a single item change)\n     * or `IBulkChange` (multiple items change). Depending on the type of change, appropriate\n     * logs are printed to the console.\n     *\n     * @private\n     * @param {IChange<T> | IBulkChange<T>} change - The change that occurred in the collection.\n     */\n    private notifyObservers(change: IChange<T> | IBulkChange<T>): void {\n        for (const observer of this.observers) {\n            observer.notify(change as IChange<T>); // Here, we're casting it to 'any' to satisfy the type system.\n        }\n        if (\"item\" in change) {\n            // This block handles IChange\n        } else if (\"items\" in change) {\n            // This block handles IBulkChange\n        }\n    }\n    /**\n     * Retrieves a copy of all items in the collection.\n     *\n     * @returns {T[]} An array containing all items currently in the collection.\n     */\n    getItems(): T[] {\n        return [...this.items];\n    }\n}\n","export class Result<A> {\n    private readonly value?: A;\n    private readonly error?: Error;\n\n    get isSuccess(): boolean {\n        return this.error === undefined;\n    }\n\n    get isFaulted(): boolean {\n        return this.error !== undefined;\n    }\n\n    constructor(valueOrError: A | Error) {\n        if (valueOrError instanceof Error) {\n            this.error = valueOrError;\n        } else {\n            this.value = valueOrError;\n        }\n    }\n\n    ifFail(defaultValue: A): A {\n        return this.isFaulted ? defaultValue : this.value!;\n    }\n\n    ifFailWithFunction(func: (err: Error) => A): A {\n        return this.isFaulted ? func(this.error!) : this.value!;\n    }\n\n    ifSucc(func: (val: A) => void): void {\n        if (this.isSuccess) {\n            func(this.value!);\n        }\n    }\n\n    match<R>(succ: (val: A) => R, fail: (err: Error) => R): R {\n        return this.isFaulted ? fail(this.error!) : succ(this.value!);\n    }\n\n    map<B>(func: (val: A) => B): Result<B> {\n        if (this.isSuccess) {\n            try {\n                const newValue = func(this.value!);\n                return new Result<B>(newValue);\n            } catch (error) {\n                // Ensure the error is of type Error\n                if (error instanceof Error) {\n                    return new Result<B>(error);\n                } else {\n                    // Create a new error from the caught exception if it's not an instance of Error\n                    return new Result<B>(new Error(String(error)));\n                }\n            }\n        }\n        return new Result<B>(this.error!);\n    }\n\n    async mapAsync<B>(func: (val: A) => Promise<B>): Promise<Result<B>> {\n        if (this.isSuccess) {\n            try {\n                const newValue = await func(this.value!);\n                return new Result<B>(newValue);\n            } catch (error) {\n                // Ensure the error is of type Error\n                if (error instanceof Error) {\n                    return new Result<B>(error);\n                } else {\n                    // Create a new error from the caught exception if it's not an instance of Error\n                    return new Result<B>(new Error(String(error)));\n                }\n            }\n        }\n        return new Result<B>(this.error!);\n    }\n\n    equals(other: Result<A>): boolean {\n        if (this.isFaulted && other.isFaulted) {\n            return this.error!.message === other.error!.message;\n        }\n        if (this.isSuccess && other.isSuccess) {\n            return this.value === other.value; // Nothing fancy here\n        }\n        return false;\n    }\n\n    toString(): string {\n        return this.isFaulted\n            ? `(Error: ${this.error!.message})`\n            : `(Value: ${this.value})`;\n    }\n\n    static handleError<T>(result: Result<T>): Error | undefined {\n        if (!result.isSuccess) {\n            return result.error;\n        }\n        return undefined;\n    }\n\n    static handleSuccess<T>(result: Result<T>): T | undefined {\n        if (result.isSuccess) {\n            return result.value;\n        }\n        return undefined;\n    }\n}\n","import { inject, injectable } from \"inversify\";\nimport { TYPES } from \"./di/container-types\";\nimport { IDecoratedLogger, IStateManager } from \"./interfaces\";\n@injectable()\nexport class StateManager implements IStateManager {\n    private dirtyMap: { [key: string]: boolean } = {};\n    constructor(\n        @inject(TYPES.DebuggingLogger)\n        private readonly _logger: IDecoratedLogger\n    ) {\n        console.log(\"StateManager constructor\");\n    }\n    makeControlDirty(controlName: string): void {\n        this.dirtyMap[controlName] = true;\n        this._logger.getLogger().info(`Control ${controlName} is now dirty`);\n    }\n\n    isControlDirty(controlName: string): boolean {\n        this._logger\n            .getLogger()\n            .info(`Checking if control ${controlName} is dirty`);\n        return !!this.dirtyMap[controlName];\n    }\n\n    clearControlDirtyState(controlName: string): void {\n        this._logger\n            .getLogger()\n            .info(`Clearing dirty state for control ${controlName}`);\n        delete this.dirtyMap[controlName];\n    }\n    clearControlsDirtyState(controlNames: string[]): void {\n        controlNames.forEach((controlName) => {\n            if (\n                Object.prototype.hasOwnProperty.call(this.dirtyMap, controlName)\n            ) {\n                this._logger\n                    .getLogger()\n                    .info(`Clearing dirty state for control ${controlName}`);\n                delete this.dirtyMap[controlName];\n            }\n        });\n    }\n}\n","import { Result } from \"./Result\";\r\nimport { IValidationControl, IValidationResult, IValidationRule } from \"./interfaces\";\r\n\r\n\r\n\r\nexport class ValidationControl implements IValidationControl {\r\n    control: HTMLInputElement | HTMLTextAreaElement | HTMLSelectElement;\r\n    isInteracted: boolean = false;\r\n    validationRules: IValidationRule[] = [];\r\n    isValid: boolean = false;\r\n    //rules: ValidationRule[];\r\n\r\n    constructor(\r\n        control: HTMLInputElement | HTMLTextAreaElement | HTMLSelectElement\r\n    ) {\r\n        this.control = control;\r\n        //this.rules = this.extractRules(control);\r\n    }\r\n\r\n\r\n    /* private extractRules(\r\n        control: HTMLInputElement | HTMLTextAreaElement | HTMLSelectElement\r\n    ): ValidationRule[] {\r\n        const rules: ValidationRule[] = [];\r\n        const attributesArray = Array.from(control.attributes);\r\n\r\n        // Loop over all attributes\r\n        for (const attr of attributesArray) {\r\n            // Check if attribute starts with 'data-val-'\r\n            if (attr.name.startsWith(\"data-val-\")) {\r\n                // For required rule\r\n                if (attr.name === \"data-val-required\") {\r\n                    rules.push({\r\n                        type: \"required\",\r\n                        message: attr.value,\r\n                        priority: 0\r\n                    });\r\n                }\r\n\r\n                // For length rule\r\n                else if (attr.name === \"data-val-length\") {\r\n                    rules.push({\r\n                        type: \"length\",\r\n                        message: attr.value,\r\n                        maxLength: control.getAttribute(\"data-val-length-max\")\r\n                            ? parseInt(\r\n                                  control.getAttribute(\"data-val-length-max\")!\r\n                            )\r\n                            : undefined,\r\n                        minLength: control.getAttribute(\"data-val-length-min\")\r\n                            ? parseInt(\r\n                                  control.getAttribute(\"data-val-length-min\")!\r\n                            )\r\n                            : undefined,\r\n                        priority: 1\r\n                    });\r\n                }\r\n\r\n                // For range rule\r\n                else if (attr.name === \"data-val-range\") {\r\n                    rules.push({\r\n                        type: \"range\",\r\n                        message: attr.value,\r\n                        maxRange: control.getAttribute(\"data-val-range-max\")\r\n                            ? parseInt(\r\n                                  control.getAttribute(\"data-val-range-max\")!\r\n                            )\r\n                            : undefined,\r\n                        minRange: control.getAttribute(\"data-val-range-min\")\r\n                            ? parseInt(\r\n                                  control.getAttribute(\"data-val-range-min\")!\r\n                            )\r\n                            : undefined,\r\n                        priority: 2\r\n                    });\r\n                }\r\n\r\n                // For regex rule\r\n                else if (attr.name === \"data-val-regex\") {\r\n                    rules.push({\r\n                        type: \"regex\",\r\n                        message: attr.value,\r\n                        pattern:\r\n                            control.getAttribute(\"data-val-regex-pattern\") ??\r\n                            undefined,\r\n                        priority: 3\r\n                    });\r\n                } else if (attr.name === \"data-val-equalto\") {\r\n                    const compareToControlName = control.getAttribute(\r\n                        \"data-val-equalto-other\"\r\n                    );\r\n                    if (compareToControlName) {\r\n                        const nameToSearch = compareToControlName.replace(\r\n                            \"*.\",\r\n                            \"\"\r\n                        ); // Removes \"*.\" if present\r\n                        rules.push({\r\n                            type: \"compare\",\r\n                            message: attr.value,\r\n                            compareTo: nameToSearch,\r\n                            priority: 4\r\n                        });\r\n                    }\r\n                } else if (attr.name === \"data-val-minlength\") {\r\n                    rules.push({\r\n                        type: \"minlength\",\r\n                        message: attr.value,\r\n                        minLength: control.getAttribute(\r\n                            \"data-val-minlength-min\"\r\n                        )\r\n                            ? parseInt(\r\n                                  control.getAttribute(\r\n                                      \"data-val-minlength-min\"\r\n                                  )!\r\n                            )\r\n                            : undefined,\r\n                        priority: 5 // Assign appropriate priority\r\n                    });\r\n                } else if (attr.name === \"data-val-phone\") {\r\n                    rules.push({\r\n                        type: \"phone\",\r\n                        message: attr.value,\r\n                        priority: 6\r\n                    });\r\n                } else if (attr.name === \"data-val-url\") {\r\n                    rules.push({\r\n                        type: \"url\",\r\n                        message: attr.value,\r\n                        priority: 7\r\n                    });\r\n                } else if (attr.name === \"data-val-creditcard\") {\r\n                    rules.push({\r\n                        type: \"creditcard\",\r\n                        message: attr.value,\r\n                        priority: 8\r\n                    });\r\n                } else if (attr.name === \"data-val-fileextensions\") {\r\n                    rules.push({\r\n                        type: \"fileextensions\",\r\n                        message: attr.value,\r\n                        extensions:\r\n                            control.getAttribute(\r\n                                \"data-val-fileextensions-extensions\"\r\n                            ) ?? undefined,\r\n                        priority: 9\r\n                    });\r\n                } else if (attr.name === \"data-val-remote\") {\r\n                    rules.push({\r\n                        type: \"remote\",\r\n                        message: attr.value,\r\n                        remote:\r\n                            control.getAttribute(\"data-val-remote-url\") ??\r\n                            undefined,\r\n                        additionalFields:\r\n                            control.getAttribute(\r\n                                \"data-val-remote-additionalfields\"\r\n                            ) ?? undefined,\r\n                        priority: 11\r\n                    });\r\n                } else if (attr.name === \"data-val-email\") {\r\n                    rules.push({\r\n                        type: \"email\",\r\n                        message: attr.value,\r\n                        priority: 10\r\n                    });\r\n                }\r\n            }\r\n        }\r\n        // Sort on Priority\r\n        return rules.sort((a, b) => a.priority - b.priority);\r\n    } */\r\n    async validate(rules: IValidationRule[]): Promise<Result<IValidationResult>> {\r\n        let errorMessage = \"\";\r\n        let isValid: boolean = true;\r\n        for (const rule of rules) {\r\n            const value = this.control.value.trim();\r\n            switch (rule.type) {\r\n            case \"required\":\r\n                if (!value) {\r\n                    errorMessage = rule.message;\r\n                    isValid = false;\r\n                }\r\n                break;\r\n            }\r\n        }\r\n        // Sort rules based on priority before processing\r\n        //const sortedRules = this.rules.sort((a, b) => a.priority - b.priority);\r\n\r\n        /*  for (const rule of rules) {\r\n            const value = this.control.value.trim();\r\n\r\n            switch (rule.type) {\r\n            case \"required\":\r\n                if (!value) {\r\n                    errorMessage = rule.message;\r\n                    isValid = false;\r\n                }\r\n                break;\r\n            case \"length\":\r\n                if (\r\n                    (rule.maxLength !== undefined &&\r\n                            value.length > rule.maxLength) ||\r\n                        (rule.minLength !== undefined &&\r\n                            value.length < rule.minLength)\r\n                ) {\r\n                    errorMessage = rule.message;\r\n                    isValid = false;\r\n                }\r\n                break;\r\n            case \"range\": {\r\n                const numValue = parseFloat(value);\r\n                if (!isNaN(numValue)) {\r\n                    if (\r\n                        (rule.maxRange !== undefined &&\r\n                                numValue > rule.maxRange) ||\r\n                            (rule.minRange !== undefined &&\r\n                                numValue < rule.minRange)\r\n                    ) {\r\n                        errorMessage = rule.message;\r\n                        isValid = false;\r\n                    }\r\n                }\r\n                break;\r\n            }\r\n            case \"regex\":\r\n                if (rule.pattern && !new RegExp(rule.pattern).test(value)) {\r\n                    errorMessage = rule.message;\r\n                    isValid = false;\r\n                }\r\n                break;\r\n            case \"compare\": {\r\n                const compareToControlName = rule.compareTo;\r\n                if (compareToControlName) {\r\n                    const compareControl = document.querySelector(\r\n                        `[name='${compareToControlName}']`\r\n                    ) as HTMLInputElement;\r\n                    if (\r\n                        compareControl &&\r\n                            value !== compareControl.value.trim()\r\n                    ) {\r\n                        errorMessage = rule.message;\r\n                        isValid = false;\r\n                    }\r\n                }\r\n\r\n                break;\r\n            }\r\n            case \"minlength\":\r\n                if (\r\n                    rule.minLength !== undefined &&\r\n                        value.length < rule.minLength\r\n                ) {\r\n                    errorMessage = rule.message;\r\n                    isValid = false;\r\n                }\r\n                break;\r\n            case \"phone\": {\r\n                const phonePattern =\r\n                        /^(\\+\\d{1,2}\\s)?\\(?\\d{3}\\)?[\\s.-]\\d{3}[\\s.-]\\d{4}$/; // Simple pattern for US phone numbers\r\n                if (!phonePattern.test(value)) {\r\n                    errorMessage = rule.message;\r\n                    isValid = false;\r\n                }\r\n                break;\r\n            }\r\n\r\n            case \"url\": {\r\n                // This pattern checks for a basic valid URL (http, https, ftp)\r\n                const urlPattern = new RegExp(\r\n                    \"^(https?:\\\\/\\\\/)?\" + // Protocol\r\n                            \"((([a-z\\\\d]([a-z\\\\d-]*[a-z\\\\d])*)\\\\.)+[a-z]{2,}|\" + // Domain name\r\n                            \"((\\\\d{1,3}\\\\.){3}\\\\d{1,3}))\" + // OR ip (v4) address\r\n                            \"(\\\\:\\\\d+)?(\\\\/[-a-z\\\\d%_.~+]*)*\" + // Port and path\r\n                            \"(\\\\?[;&a-z\\\\d%_.~+=-]*)?\" + // Query string\r\n                            \"(\\\\#[-a-z\\\\d_]*)?$\",\r\n                    \"i\" // Fragment locator\r\n                );\r\n\r\n                if (!urlPattern.test(value)) {\r\n                    errorMessage = rule.message;\r\n                    isValid = false;\r\n                }\r\n                break;\r\n            }\r\n            case \"creditcard\":\r\n                if (!this.isValidCreditCard(value)) {\r\n                    errorMessage = rule.message;\r\n                    isValid = false;\r\n                }\r\n                break;\r\n            case \"fileextensions\": {\r\n                const extensionsError = this.control.getAttribute(\r\n                    \"data-val-fileextensions\"\r\n                );\r\n                const allowedExtensionsAttribute =\r\n                        this.control.getAttribute(\r\n                            \"data-val-fileextensions-extensions\"\r\n                        );\r\n\r\n                if (extensionsError && allowedExtensionsAttribute) {\r\n                    const allowedExtensions = allowedExtensionsAttribute\r\n                        .split(\",\")\r\n                        .map((ext) => ext.trim().toLowerCase());\r\n                    const files = (this.control as HTMLInputElement).files;\r\n                    const fileArray = files ? Array.from(files) : [];\r\n                    const invalidFiles = fileArray.filter((file) => {\r\n                        const fileExtension = file.name\r\n                            .split(\".\")\r\n                            .pop()\r\n                            ?.toLowerCase();\r\n                        return (\r\n                            !fileExtension ||\r\n                                !allowedExtensions.includes(fileExtension)\r\n                        );\r\n                    });\r\n\r\n                    if (invalidFiles.length > 0) {\r\n                        const invalidFileNames = invalidFiles\r\n                            .map((file) => file.name)\r\n                            .join(\", \");\r\n                        errorMessage = `${extensionsError}. The following files have invalid extensions: ${invalidFileNames}`;\r\n                        isValid = false;\r\n                    }\r\n                }\r\n                break;\r\n            }\r\n            case \"remote\": {\r\n                const url = rule.remote;\r\n                if (url && this.control && this.control.value) {\r\n                    //const paramName = this.control.value;\r\n                    const encodedURI = encodeURIComponent(\r\n                        this.control.value\r\n                    );\r\n                    const validationUrl = `${url}?${this.control.name}=${encodedURI}`;\r\n\r\n                    try {\r\n                        console.log(\r\n                            \"Remote validation started with url: \",\r\n                            validationUrl\r\n                        );\r\n                        const response = await fetch(validationUrl, {\r\n                            method: \"GET\",\r\n                            headers: {\r\n                                \"Content-Type\": \"application/json\"\r\n                            }\r\n                        });\r\n\r\n                        if (response.ok) {\r\n                            const responseData = await response.json();\r\n                            isValid = responseData.isValid;\r\n                            errorMessage = rule.message;\r\n                        } else {\r\n                            throw new Error(\"Failed to validate remotely\");\r\n                        }\r\n                    } catch (error) {\r\n                        console.error(\"Remote validation error:\", error);\r\n                        isValid = false;\r\n                        errorMessage = \"Error during remote validation.\";\r\n                    }\r\n                }\r\n                break;\r\n            }\r\n            case \"email\": {\r\n                // A common regex pattern for validating an email address\r\n                const emailPattern = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\r\n\r\n                // Perform regex email validation\r\n                if (!emailPattern.test(this.control.value)) {\r\n                    errorMessage = rule.message || \"Invalid email address.\";\r\n                    isValid = false;\r\n                }\r\n                break;\r\n            }\r\n            }\r\n\r\n            if (!isValid) break;\r\n        } */\r\n\r\n        return new Result<IValidationResult>({\r\n            isValid: isValid,\r\n            errorMessage: errorMessage,\r\n            control: this.control as any\r\n        });\r\n    }\r\n\r\n    isValidCreditCard(value: string): boolean {\r\n        // Remove all non-digit characters from the string\r\n        const numericOnly = value.replace(/\\D/g, \"\");\r\n\r\n        // Luhn's algorithm begins with the rightmost digit and moves left\r\n        let sum = 0;\r\n        let shouldDouble = false;\r\n\r\n        // Loop through values starting from the rightmost side\r\n        for (let i = numericOnly.length - 1; i >= 0; i--) {\r\n            let digit = parseInt(numericOnly.charAt(i), 10);\r\n\r\n            if (shouldDouble) {\r\n                // If double of digit is more than 9, add the digits\r\n                // Otherwise, just double the value\r\n                if ((digit *= 2) > 9) digit -= 9;\r\n            }\r\n\r\n            sum += digit;\r\n            // Alternate the value of shouldDouble\r\n            shouldDouble = !shouldDouble;\r\n        }\r\n\r\n        // If the sum modulo 10 is equal to 0, the number is valid\r\n        return sum % 10 === 0;\r\n    }\r\n}\r\n","import { Container } from \"inversify\";\nimport { TYPES } from \"./container-types\";\nimport {\n    IAppEvents,\n    IDebouncerFactory,\n    IDebouncerManager,\n    IDecoratedLogger,\n    IEventEmitter,\n    IEventService,\n    IForm,\n    IFormFactory,\n    IFormManager,\n    IFormObserver,\n    IFormParser,\n    IInitializer,\n    ILoggerService,\n    IObservableCollection,\n    IStateManager,\n    IValidationRuleRegistry,\n    IValidationService\n} from \"../interfaces\";\nimport { DebuggingLogger } from \"../logger/debuggingLogger\";\nimport { LoggerService } from \"../services/loggerService\";\nimport { Initializer } from \"../Initializer\";\nimport { EventEmitter } from \"../EventEmitter\";\nimport { FormFactory } from \"../FormFactory\";\nimport { ObservableCollection } from \"../ObservableCollection\";\nimport { DebouncerFactory } from \"../DebouncerFactory\";\nimport { FormManager } from \"../FormManager\";\nimport { EventService } from \"../services/EventService\";\nimport { StateManager } from \"../StateManager\";\nimport { DebouncerManager } from \"../DebounceManager\";\nimport { ValidationService } from \"../services/ValidationService\";\nimport { FormObserver } from \"../FormObserver\";\nimport { ValidationRuleRegistry } from \"../ValidationRuleResgistry\";\nimport { FormParser } from \"../FormParser\";\n\nconst container = new Container();\n\ncontainer\n    .bind<ILoggerService>(TYPES.Logger)\n    .to(LoggerService)\n    .inSingletonScope();\ncontainer\n    .bind<IEventEmitter<IAppEvents>>(TYPES.EventEmitter)\n    .to(EventEmitter<IAppEvents>)\n    .inRequestScope();\ncontainer.bind<IEventService>(TYPES.EventService).to(EventService)\n    .inSingletonScope;\ncontainer\n    .bind<IStateManager>(TYPES.StateManager)\n    .to(StateManager)\n    .inSingletonScope();\ncontainer\n    .bind<IDecoratedLogger>(TYPES.DebuggingLogger)\n    .to(DebuggingLogger)\n    .inRequestScope();\ncontainer\n    .bind<IInitializer>(TYPES.Initializer)\n    .to(Initializer)\n    .inSingletonScope();\ncontainer\n    .bind<IFormManager>(TYPES.FormManager)\n    .to(FormManager)\n    .inSingletonScope();\ncontainer\n    .bind<IFormParser>(TYPES.FormParser)\n    .to(FormParser)\n    .inSingletonScope();\ncontainer\n    .bind<IFormObserver>(TYPES.FormObserver)\n    .to(FormObserver)\n    .inSingletonScope();\ncontainer\n    .bind<IFormFactory>(TYPES.FormFactory)\n    .to(FormFactory)\n    .inSingletonScope();\ncontainer\n    .bind<IObservableCollection<IForm>>(TYPES.ObservableFormsCollection)\n    .to(ObservableCollection<IForm>)\n    .inSingletonScope();\ncontainer\n    .bind<IDebouncerManager>(TYPES.DebouncerManager)\n    .to(DebouncerManager)\n    .inSingletonScope();\ncontainer\n    .bind<IDebouncerFactory>(TYPES.DebouncerFactory)\n    .to(DebouncerFactory)\n    .inSingletonScope();\n//container\n//    .bind<IValidationRuleRegistry>(TYPES.ValidationRulesRegistry)\n//    .to(ValidationRuleRegistry)\n//    .inSingletonScope();\ncontainer\n    .bind<IValidationService>(TYPES.ValidationService)\n    .to(ValidationService)\n    .inSingletonScope();\n\nexport { container };\n","\nconst TYPES = {\n    Options: Symbol.for(\"IOptions\"),\n    Logger: Symbol.for(\"ILoggerService\"),\n    EventService: Symbol.for(\"IEventService\"),\n    StateManager: Symbol.for(\"IStateManager\"),\n    DebouncerManager: Symbol.for(\"IDebouncerManager\"),\n    EventEmitter: Symbol.for(\"IEventEmitter\"),\n    DebuggingLogger: Symbol.for(\"IDecoratedLogger\"),\n    Initializer: Symbol.for(\"IInitializer\"),\n    DebouncerFactory: Symbol.for(\"IDebouncerFactory\"),\n    FormManager: Symbol.for(\"IFormManager\"),\n    FormObserver: Symbol.for(\"IFormObserver\"),\n    FormFactory: Symbol.for(\"IFormFactory\"),\n    FormParser: Symbol.for(\"IFormParser\"),\n    ObservableFormsCollection: Symbol.for(\"IObservableCollection\"),\n    ValidationRulesRegistry: Symbol.for(\"IValidationRulesRegistry\"),\n    ValidationService: Symbol.for(\"IValidationService\")\n};\nexport { TYPES };\n","import { inject, injectable } from \"inversify\";\nimport { TYPES } from \"../di/container-types\";\nimport { IDecoratedLogger, ILoggerService, IOptions } from \"../interfaces\";\n\n@injectable()\nexport class DebuggingLogger implements IDecoratedLogger {\n    private readonly loggerProxy: ILoggerService;\n\n    constructor(\n        @inject(TYPES.Logger) private readonly _logger: ILoggerService,\n        @inject(TYPES.Options) private readonly _options: IOptions\n    ) {\n        const handler: ProxyHandler<ILoggerService> = {\n            get: (target, propertyKey: string | symbol) => {\n                if (typeof propertyKey === \"symbol\") {\n                    return undefined;\n                }\n\n                const actualKey = propertyKey as keyof ILoggerService;\n                const originalProperty = target[actualKey];\n\n                if (typeof originalProperty === \"function\") {\n                    // Asserting the function type more clearly for TypeScript\n                    const originalMethod = originalProperty as (\n                        ...args: any[]\n                    ) => any;\n\n                    // If 'info' method, and debug is true, we want to intercept and change its behavior.\n                    if (propertyKey === \"info\" && !this._options.debug) {\n                        return (...args: any[]): void => {};\n                    }\n\n                    // For methods other than 'info' or if debug is true, we keep the original behavior.\n                    return originalMethod.bind(target); // now TypeScript recognizes the 'bind' method\n                }\n\n                // If dealing with non-function properties (like 'levels'), we return them as is.\n                return originalProperty;\n            }\n        };\n\n        this.loggerProxy = new Proxy(_logger, handler);\n    }\n\n    getLogger(): ILoggerService {\n        return this.loggerProxy;\n    }\n}\n","import { inject, injectable } from \"inversify\";\nimport { TYPES } from \"../di/container-types\";\nimport {\n    IChange,\n    IDebouncerFactory,\n    IDebouncerManager,\n    IDecoratedLogger,\n    IEventService,\n    IForm,\n    IObservableCollection,\n    IStateManager,\n    IValidationService\n} from \"../interfaces\";\nimport { Debouncer } from \"../util/Debouncer\";\n@injectable()\n\n// TODO: Create Interface and setup container.\nexport class EventService implements IEventService {\n    eventListenersMap: WeakMap<Element, Record<string, EventListener>> =\n        new WeakMap();\n    dirtyMap: { [key: string]: boolean } = {};\n    debouncers: { [key: string]: Debouncer } = {};\n\n    constructor(\n        @inject(TYPES.ObservableFormsCollection)\n        private readonly _observableFormsCollection: IObservableCollection<IForm>,\n        @inject(TYPES.DebouncerFactory)\n        private readonly _debounceFactory: IDebouncerFactory,\n        @inject(TYPES.ValidationService)\n        private readonly _validationService: IValidationService,\n        @inject(TYPES.StateManager)\n        private readonly _stateManager: IStateManager,\n        @inject(TYPES.DebouncerManager)\n        private readonly _debouncerManager: IDebouncerManager,\n        @inject(TYPES.DebuggingLogger)\n        private readonly _logger: IDecoratedLogger\n    ) {\n        console.log(\"EventService constructor\");\n        this._observableFormsCollection.addObserver(this);\n    }\n\n    // Add Listeners When We Get a Notification of a New Form\n    async notify(change: IChange<IForm>): Promise<void> {\n        console.log(\"EventService notify\");\n        const { type: changeType, item: form } = change;\n\n        if (changeType !== \"add\" || !form.formElement) {\n            return;\n        }\n        // Cleanup any previous resources for the form.\n        // This might be required to handle re-adding a form that was removed without proper cleanup.\n        await this.cleanupResourcesForForm(form.formElement);\n\n        // Setup the handlers for the form\n        this.setupHandlers(form);\n\n        // Add the listeners to the form.\n        // Note: It might be a good idea to check if the form element has already listeners attached.\n        // If listeners exist, you may not need to add them again or you might want to update them.\n        const listeners = this.eventListenersMap.get(change.item.formElement);\n        if (listeners) {\n            await this.addListeners(form, listeners);\n        }\n    }\n\n    setupHandlers(form: IForm): void {\n        // Loop over each control in the form\n        const controls = Array.from(form.elements);\n\n        // Initialize listeners outside the loop\n        const listeners: Record<string, EventListener> = {};\n\n        controls.forEach((element) => {\n            if (\n                element instanceof HTMLInputElement ||\n                element instanceof HTMLTextAreaElement ||\n                element instanceof HTMLSelectElement\n            ) {\n                // Add the event handlers for the control\n                const inputEventHandler = this.createInputHandler(500);\n                const blurEventHandler = this.createBlurHandler();\n                const focusEventHandler = this.focusEventHandler;\n\n                // Accumulate listeners instead of re-initializing them\n                listeners[\"input\"] = inputEventHandler as EventListener;\n                listeners[\"focus\"] = focusEventHandler as EventListener;\n                listeners[\"blur\"] = blurEventHandler as EventListener;\n            }\n        });\n\n        // Set the accumulated listeners for the form element after the loop\n        this.eventListenersMap.set(form.formElement, listeners);\n    }\n\n    createInputHandler(debounceTime: number): EventListener {\n        return (event: Event) => {\n            const control = event.target as\n                | HTMLInputElement\n                | HTMLTextAreaElement\n                | HTMLSelectElement;\n            this._stateManager.makeControlDirty(control.name);\n            this.debouncedValidate(control, debounceTime);\n        };\n    }\n\n    createBlurHandler(): EventListener {\n        return (event: Event) => {\n            // Immediately Invoked Function Expression (IIFE)\n            (async (event: Event) => {\n                const focusEvent = event as FocusEvent;\n                const target = focusEvent.target as\n                    | HTMLInputElement\n                    | HTMLTextAreaElement\n                    | HTMLSelectElement;\n                const relatedTarget = focusEvent.relatedTarget as HTMLElement;\n\n                if (\n                    relatedTarget &&\n                    (relatedTarget.tagName === \"INPUT\" ||\n                        relatedTarget.tagName === \"SELECT\" ||\n                        relatedTarget.tagName === \"TEXTAREA\" ||\n                        relatedTarget.isContentEditable)\n                ) {\n                    this._stateManager.makeControlDirty(target.name);\n                    try {\n                        await this._validationService.validateControl(\n                            target as HTMLInputElement\n                        );\n                    } catch (error) {\n                        this._logger\n                            .getLogger()\n                            .error(\n                                error instanceof Error\n                                    ? error\n                                    : new Error(\n                                        \"Error in blurEventHandler: \" + error\n                                    )\n                            );\n                    }\n                }\n            })(event).catch((e) => {\n                // Handle any errors that occurred during initialization\n                this._logger.getLogger().error(\"Error in IIFE: \" + e);\n            });\n        };\n    }\n    // Non-debounced focus event handler (\"Useful for adding some CSS stuff.\")\n    focusEventHandler(event: Event): void {}\n\n    debouncedValidate(\n        input: HTMLInputElement | HTMLTextAreaElement | HTMLSelectElement,\n        debounceTime: number\n    ): void {\n        this._debouncerManager\n            .getDebouncerForControl(input.name)\n            .debounce(async () => {\n                try {\n                    console.log(`Debouncing ${input.name}`);\n                    await this._validationService.validateControl(\n                        input as HTMLInputElement\n                    );\n                } catch (error) {\n                    this._logger\n                        .getLogger()\n                        .error(\n                            error instanceof Error\n                                ? error\n                                : new Error(\n                                    `Error in debouncedValidate for control ${input.name}: ${error}`\n                                )\n                        );\n                }\n            }, debounceTime);\n    }\n\n    // Add the listeners to the form\n    private async addListeners(\n        form: IForm,\n        eventListeners: Record<string, EventListener>\n    ): Promise<IForm> {\n        // Add event listeners and store them in the map\n        for (const [eventType, listener] of Object.entries(eventListeners)) {\n            if (eventType === \"focus\") {\n                // For focus, you might want to listen to focusin event instead\n                form.formElement.addEventListener(\"focusin\", listener);\n            } else if (eventType === \"blur\") {\n                // For blur, you might want to listen to focusout event instead\n                form.formElement.addEventListener(\"focusout\", listener);\n            } else {\n                // For other events, add them normally\n                form.formElement.addEventListener(eventType, listener);\n            }\n        }\n        return form;\n    }\n    async removeListeners(formElement: HTMLFormElement): Promise<void> {\n        const listeners = this.eventListenersMap.get(formElement);\n        if (listeners) {\n            for (const [eventType, listener] of Object.entries(listeners)) {\n                // Ensure the listener is a function before attempting to remove\n                if (typeof listener === \"function\") {\n                    // Correctly map the event type for focus and blur\n                    const domEventType =\n                        eventType === \"focus\"\n                            ? \"focusin\"\n                            : eventType === \"blur\"\n                                ? \"focusout\"\n                                : eventType;\n                    formElement.removeEventListener(domEventType, listener);\n                }\n            }\n            this.eventListenersMap.delete(formElement);\n        }\n    }\n\n    async cleanupResourcesForForm(formElement: HTMLFormElement): Promise<void> {\n        await this.removeListeners(formElement);\n        const controls = formElement.elements;\n        const namesToClear = Array.from(controls)\n            .filter(isNamedControlElement)\n            .map((control) => control.name);\n\n        this._stateManager.clearControlsDirtyState(namesToClear);\n        this._debouncerManager.clearDebouncersForControls(namesToClear);\n    }\n}\n\n/**\n *\n * @param element\n */\nfunction isNamedControlElement(\n    element: Element\n): element is HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement {\n    return (\n        \"name\" in element &&\n        (element instanceof HTMLInputElement ||\n            element instanceof HTMLSelectElement ||\n            element instanceof HTMLTextAreaElement)\n    );\n}\n","import { inject, injectable } from \"inversify\";\nimport { TYPES } from \"../di/container-types\";\nimport { ValidationControl } from \"../ValidationControl\";\nimport {\n\n    IDecoratedLogger,\r\n    IFormParser,\n\n\n    IValidationService\n} from \"../interfaces\";\nimport { Result } from \"../Result\";\r\n\n@injectable()\nexport class ValidationService implements IValidationService {\n    constructor(\n        @inject(TYPES.DebuggingLogger) private readonly _logger: IDecoratedLogger,\n        @inject(TYPES.FormParser) private readonly _formParser: IFormParser\n    ) { }\n\n    async validateControl(control: HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement): Promise<void> {\n        const validationControl = new ValidationControl(control);\n        const getValidationInformationResults = this._formParser.getValidationInformation(control);\n\n        if (!getValidationInformationResults.isSuccess) {\n            const error = Result.handleError(getValidationInformationResults);\n            this._logger.getLogger().error(error);\n\n        }\n        const getValidationRulesResult = Result.handleSuccess(getValidationInformationResults);\n        if (getValidationRulesResult === undefined) {\n            this._logger.getLogger().error(\"Validation rules are undefined\");\r\n            return;\r\n        }\n\n        // Destructure the getValidationRulesResult\n        const { rules } = getValidationRulesResult;\n        console.log(rules);\n\n        const validationResults = await validationControl.validate(rules);\n        if (!validationResults.isSuccess) {\n            const error = Result.handleError(validationResults);\n            this._logger.getLogger().error(error);\n            return;\n        }\n\n        const validationResult = Result.handleSuccess(validationResults);\n        if (validationResult === undefined) {\n            this._logger.getLogger().error(\"Validation result is undefined\");\n            return;\n        }\n        console.log(validationResult.control.parentNode);\n\n    }\n}\n","import * as log from \"loglevel\";\nimport { injectable } from \"inversify\";\nimport { ILoggerService } from \"../interfaces\";\n\n@injectable()\nexport class LoggerService implements ILoggerService {\n    constructor() {\n        console.log(\"LoggerService constructor\");\n        log.setLevel(log.levels.INFO);\n    }\n\n    get levels(): log.LogLevel {\n        return log.levels; // Assuming 'levels' is accessible and refers to the corresponding property in 'loglevel'.\n    }\n\n    get methodFactory(): log.MethodFactory {\n        return log.methodFactory; // Delegates to the actual 'methodFactory' in 'loglevel'.\n    }\n\n    getLevel(): 0 | 2 | 1 | 3 | 4 | 5 {\n        return log.getLevel();\n    }\n\n    trace(...msg: any[]): void {\n        log.trace(...msg);\n    }\n\n    debug(...msg: any[]): void {\n        log.debug(...msg);\n    }\n\n    log(...msg: any[]): void {\n        // 'log' method is not standard in 'loglevel'. If you need a generic log, you could map to a specific level, or remove this.\n        log.info(...msg); // Example mapping to 'info' level.\n    }\n\n    info(...msg: any[]): void {\n        log.info(...msg);\n    }\n\n    warn(...msg: any[]): void {\n        log.warn(...msg);\n    }\n\n    error(...msg: any[]): void {\n        log.error(...msg);\n    }\n\n    setLevel(level: log.LogLevelDesc, persist?: boolean): void {\n        log.setLevel(level, persist);\n    }\n\n    setDefaultLevel(level: log.LogLevelDesc): void {\n        log.setDefaultLevel(level);\n    }\n\n    resetLevel(): void {\n        log.setDefaultLevel(log.levels.SILENT); // or another appropriate default\n    }\n\n    enableAll(persist?: boolean): void {\n        log.enableAll(persist);\n    }\n\n    disableAll(persist?: boolean): void {\n        log.disableAll(persist);\n    }\n}\n","import { injectable } from \"inversify\";\nimport { IDebouncer } from \"../interfaces\";\n/**\n * Provides a mechanism to debounce function execution.\n *\n * The `Debouncer` class is responsible for delaying the execution of a function until after a certain time\n * has elapsed since the last time it was invoked. This is useful in situations where you want to\n * limit the rate at which a function is called, such as when responding to user input or window resizing.\n *\n * The class is marked with `@injectable`, allowing it to be used with dependency injection frameworks.\n */\n@injectable()\nexport class Debouncer implements IDebouncer {\n    constructor() {}\n    private timeoutId?: ReturnType<typeof setTimeout>;\n    /**\n     * Debounces the provided function.\n     *\n     * This method takes a function and a wait time in milliseconds. It will delay the execution of the function\n     * until after the wait time has elapsed since the last call to debounce. Subsequent calls to debounce\n     * with a new function will cancel any pending execution from previous calls.\n     *\n     * @template T - The type of the function to debounce.\n     * @param {T} func - The function to be debounced.\n     * @param {number} waitMilliseconds - The number of milliseconds to wait before calling the function.\n     */\n    debounce<T extends (...args: any[]) => void>(\n        func: T,\n        waitMilliseconds: number\n    ): void {\n        // Clear the existing timeout, if there is one\n        if (this.timeoutId !== undefined) {\n            clearTimeout(this.timeoutId);\n        }\n\n        // Start a new timeout\n        this.timeoutId = setTimeout(() => {\n            func();\n            this.timeoutId = undefined;\n        }, waitMilliseconds);\n    }\n    /**\n     * Cancels any pending debounced function calls.\n     *\n     * If there is a debounced function that has not yet been executed, calling this method will prevent\n     * that function from being called.\n     */\n    cancel(): void {\n        clearTimeout(this.timeoutId);\n    }\n}\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","import \"reflect-metadata\";\nimport { IDecoratedLogger, IInitializer, IOptions } from \"./interfaces\";\nimport { container } from \"./di/container-config\";\nimport { TYPES } from \"./di/container-types\";\n\nexport default class UnobtrusiveValidation {\n    private static _currentInstance: UnobtrusiveValidation | null = null;\n    private _options: IOptions;\n    private _logger: IDecoratedLogger | undefined;\n    private _initializer: IInitializer | undefined;\n    private _initialized: boolean = false;\n\n    private static defaultOptions: IOptions = {\n        debug: true,\n        logLevel: \"info\",\n        autoInit: true\n    };\n\n    constructor(options: Partial<IOptions>) {\n        this._options = { ...UnobtrusiveValidation.defaultOptions, ...options };\n        if (this._options.autoInit !== false) {\n            this.init().catch((err) =>\n                console.error(\"Initialization failed\", err)\n            );\n        }\n    }\n\n    async init(force = false): Promise<void> {\n        if (this._initialized && !force) {\n            this._logger\n                ?.getLogger()\n                .info(\"UnobtrusiveValidation already initialized, skipping...\");\n            return;\n        }\n        // ...existing initialization logic...\n        this._initialized = true;\n        console.log(\"UnobtrusiveValidation init\");\n        // Initialization logic here\n        if (container.isBound(TYPES.Options)) {\n            container.unbind(TYPES.Options);\n        }\n        // Bind the options to the container\n        container.bind<IOptions>(TYPES.Options).toConstantValue(this._options);\n\n        //const t = container.get<IEventService>(TYPES.EventService);\n\n        // Get the logger from the container\n        this._logger = container.get<IDecoratedLogger>(TYPES.DebuggingLogger);\n\n        // Get the initializer from the container\n        this._initializer = container.get<IInitializer>(TYPES.Initializer);\n\n        this._logger.getLogger().info(\"UnobtrusiveValidation initialized\");\n        // Initialize the initializer\n        await this._initializer.init();\n        this._initialized = true;\n    }\n\n    static getInstance(options: Partial<IOptions> = {}): UnobtrusiveValidation {\n        const effectiveOptions =\n            Object.keys(options).length === 0\n                ? UnobtrusiveValidation.defaultOptions\n                : { ...UnobtrusiveValidation.defaultOptions, ...options };\n\n        if (!this._currentInstance) {\n            this._currentInstance = new UnobtrusiveValidation(effectiveOptions);\n        } else {\n            // Handle case when options are passed after the instance was created.\n            // This can be a full reconfiguration, or you might want to ignore it,\n            // or handle specific properties like autoInit, based on your application's needs.\n            this._currentInstance.configure(effectiveOptions);\n        }\n\n        return this._currentInstance;\n    }\n    configure(options: Partial<IOptions>): void {\n        // First, check if options actually need updating to prevent unnecessary re-initialization.\n        const optionsChanged = Object.keys(options).some(\n            (key) => this._options[key] !== options[key]\n        );\n        if (!optionsChanged) {\n            return; // No changes, so no need to re-initialize.\n        }\n\n        // Update the internal options with the new settings.\n        this._options = { ...this._options, ...options };\n\n        // You may want to check for specific options that require re-initialization.\n        if (options.autoInit !== undefined) {\n            if (options.autoInit) {\n                // Call the init method to re-initialize.\n                this.init().catch((err) =>\n                    console.error(\"Re-initialization failed\", err)\n                );\n            } else {\n                // Handle the case where autoInit is false, such as cleaning up resources.\n                this.deinit().catch((err) =>\n                    console.error(\"De-initialization failed\", err)\n                );\n            }\n        }\n\n        // Other options can be handled here as well if they require special logic when changed.\n    }\n    async deinit(): Promise<void> {\n        // De-initialization logic here\n        // Nothing to do here for now\n    }\n}\n"],"names":[],"sourceRoot":""}