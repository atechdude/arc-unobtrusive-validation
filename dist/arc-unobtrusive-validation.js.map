{"version":3,"file":"arc-unobtrusive-validation.js","mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD,O;;;;;;;;;;;;;;;;;;;;ACVsD;AACK;AACN;AACrD;AACA;AACA;AACA;AACA;AACA,wBAAwB,8EAAsC;AAC9D;AACA;AACA;AACA;AACA,4BAA4B,4DAAmB;AAC/C;AACA;AACA;AACA,wBAAwB,8EAAsC;AAC9D;AACA,4BAA4B,iEAAwB;AACpD;AACA;AACA;AACA;AACA;AACA,wBAAwB,iEAAsB,+BAA+B,gBAAgB;AAC7F;AACA,4BAA4B,sEAA8B;AAC1D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+CAA+C,0BAA0B;AACzE,gCAAgC,sEAA8B;AAC9D;AACA;AACA,8EAA8E,uCAAuC;AACrH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oCAAoC;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACsE;;;;;;;;;;;;;;;;;;ACvFX;AAChB;AAC3C,aAAa,wDAAU,CAAC,gEAAuB;AAC7B;;;;;;;;;;;;;;;;;;;ACHoD;AACtB;AACU;AACnD;AACP;AACA;AACA;AACA;AACA,gCAAgC,kFAA2B;AAC3D;AACA,mBAAmB,uEAAqB,KAAK,wDAAQ;AACrD;AACA;AACA;;;;;;;;;;;;;;;;;;ACbuD;AACI;AAC3D;AACA;AACA,mCAAmC,iEAAwB;AAC3D,4BAA4B,kFAA2C;AACvE;AACA,wCAAwC,wEAA+B;AACvE,+BAA+B,iEAAwB;AACvD;AACA;AACA;AACsB;;;;;;;;;;;;;;;;ACZtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACgC;;;;;;;;;;;;;;;;;;ACT8C;AAC9C;AACjC;AACA;AACA,kBAAkB,6CAAE;AACpB;AACA;AACA;AACA,oBAAoB,qEAAe;AACnC,+CAA+C;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2CAA2C,sEAAgB;AAC3D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACkB;;;;;;;;;;;;;;;;ACnCZ;AACP;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACJO;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACP;AACA;AACA;AACA;AACO;AACA;AACA;AACA;AACA;AACA;AACA,oCAAoC;AACpC;AACP;AACO;AACP;AACO;AACP;AACA,qBAAqB,uBAAuB;AAC5C;AACA;AACA;AACA;AACA;AACO;AACP;AACO;AACP;AACO;AACP;AACO;AACP;AACO;AACA;AACA;AACA,4DAA4D;AAC5D,yDAAyD;AACzD,6DAA6D;AAC7D;AACP;AACA;AACA;AACO;;;;;;;;;;;;;;;;;;ACnDP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAC6D;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACpBtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACtBP,gBAAgB,SAAI,IAAI,SAAI;AAC5B;AACA,iDAAiD,OAAO;AACxD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,SAAI,IAAI,SAAI;AAC7B,4BAA4B,+DAA+D,iBAAiB;AAC5G;AACA,oCAAoC,MAAM,+BAA+B,YAAY;AACrF,mCAAmC,MAAM,mCAAmC,YAAY;AACxF,gCAAgC;AAChC;AACA,KAAK;AACL;AACA,mBAAmB,SAAI,IAAI,SAAI;AAC/B,cAAc,6BAA6B,0BAA0B,cAAc,qBAAqB;AACxG,iBAAiB,oDAAoD,qEAAqE,cAAc;AACxJ,uBAAuB,sBAAsB;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA,wCAAwC;AACxC,mCAAmC,SAAS;AAC5C,mCAAmC,WAAW,UAAU;AACxD,0CAA0C,cAAc;AACxD;AACA,8GAA8G,OAAO;AACrH,iFAAiF,iBAAiB;AAClG,yDAAyD,gBAAgB,QAAQ;AACjF,+CAA+C,gBAAgB,gBAAgB;AAC/E;AACA,kCAAkC;AAClC;AACA;AACA,UAAU,YAAY,aAAa,SAAS,UAAU;AACtD,oCAAoC,SAAS;AAC7C;AACA;AACA,qBAAqB,SAAI,IAAI,SAAI;AACjC,6EAA6E,OAAO;AACpF;AACA;AACA;AACA;AACA;AACA;AACA;AAC8C;AACQ;AACwB;AACnB;AACE;AACuB;AACnC;AACa;AACS;AACtC;AACqC;AACb;AACvB;AACgC;AAClE;AACA;AACA;AACA;AACA,iCAAiC,sFAA8C;AAC/E;AACA;AACA,mCAAmC,sEAAgB;AACnD;AACA,0CAA0C,sEAAgB;AAC1D,qCAAqC,sEAAgB;AACrD,qCAAqC,sEAAgB;AACrD,iCAAiC,0FAAkD;AACnF;AACA;AACA;AACA;AACA;AACA,iCAAiC,iGAAyD;AAC1F;AACA;AACA;AACA;AACA;AACA,iCAAiC,4FAAoD;AACrF;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB,6CAAE;AACpB,sCAAsC,2CAAM;AAC5C;AACA;AACA,gCAAgC,2CAAM;AACtC,kCAAkC,2CAAM;AACxC;AACA,mCAAmC,qEAAc;AACjD,0CAA0C,2EAAqB;AAC/D;AACA;AACA;AACA,yBAAyB,uBAAuB;AAChD;AACA;AACA;AACA,0HAA0H,OAAO,uEAAoB,oBAAoB;AACzK,gCAAgC,uEAAoB;AACpD;AACA;AACA;AACA;AACA,iBAAiB;AACjB,aAAa;AACb;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,yBAAyB,uBAAuB;AAChD;AACA;AACA;AACA,8CAA8C,uBAAuB;AACrE;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,uBAAuB;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA,yBAAyB,uBAAuB;AAChD;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,yBAAyB,uBAAuB;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA,iDAAiD,sEAAgB;AACjE,0BAA0B,sDAAO;AACjC;AACA,mBAAmB,sEAAe;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,sCAAsC,2CAAM;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA,sDAAsD,2CAAM;AAC5D;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qDAAqD,+DAAsB;AAC3E;AACA;AACA;AACA;AACA;AACA,4BAA4B,oEAAiB;AAC7C,iDAAiD,iCAAiC;AAClF;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B,mEAAiB;AAC9C;AACA;AACA;AACA;AACA,4BAA4B,8EAAsC;AAClE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,uBAAuB;AAChD;AACA;AACA;AACA,sEAAsE,oBAAoB;AAC1F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA,iDAAiD,+DAAsB;AACvE;AACA;AACA,sDAAsD,+DAAsB;AAC5E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oDAAoD,+DAAsB;AAC1E;AACA;AACA,yDAAyD,+DAAsB;AAC/E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC,iEAAwB;AACxD,2CAA2C,iEAAwB;AACnE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8EAA8E,uCAAuC;AACrH;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,wDAAS;AAC7B,mFAAmF,4GAA4G;AAC/L;AACA;AACA;AACA,gBAAgB,wDAAS;AACzB;AACA;AACA;AACA;AACA;AACA,gCAAgC,wEAAgC;AAChE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4CAA4C,wEAAgC;AAC5E;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,wDAAS;AACzB;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,qDAAqD,cAAc,yCAAyC,iBAAiB,cAAc,oEAAc,WAAW;AACpK;AACA;AACA;AACA,gCAAgC,4EAAoC;AACpE;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,yEAA0B;AACtC,4BAA4B,+DAAuB;AACnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B,uDAAI;AAC9B;AACA,yBAAyB,8DAAO;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,wDAAS;AACrB,4DAA4D,8CAA8C;AAC1G;AACA;AACA;AACA;AACA,gDAAgD,wBAAwB;AACxE;AACA;AACA,gBAAgB,wDAAS;AACzB,gCAAgC,wEAAgC;AAChE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+EAA+E,yCAAyC;AACxH;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,gEAAwB,SAAS,mFAA4B;AACzF;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,wDAAS;AACzB,iDAAiD,kDAAkD;AACnG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA,CAAC;AACoB;;;;;;;;;;;;;;;;AClsBrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AAC4B;;;;;;;;;;;;;;;;;;ACdyB;AACP;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,gEAAwB;AACpD;AACA;AACA,4BAA4B,gEAAwB;AACpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,gEAAwB;AACpD;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,gEAAwB;AACpD;AACA;AACA;AACA;AACA,4BAA4B,gEAAwB;AACpD;AACA;AACA,4BAA4B,gEAAwB;AACpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iFAAiF,0CAA0C;AAC3H,iBAAiB;AACjB;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,kDAAkD,uBAAuB;AACzE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,4BAA4B,gEAAwB;AACpD;AACA;AACA;AACA;AACA;AACA;AACA,yCAAyC,qBAAqB,2DAAU,uBAAuB;AAC/F,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACiB;;;;;;;;;;;;;;;;;ACvGgB;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,2CAAM;AACrC,iCAAiC,2CAAM;AACvC;AACA;AACA;AACA;AACA,CAAC;AACgC;;;;;;;;;;;;;;;;;AChDA;AACjC;AACA;AACA,kBAAkB,6CAAE;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACkB;;;;;;;;;;;;;;;;;ACdwC;AAC3D;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,+DAAsB;AAC/C;AACA;AACA;AACA,8BAA8B,oEAAoE;AAClG;AACA;AACA;AACA,CAAC;AACmB;;;;;;;;;;;;;;;;;AChBuC;AAC3D;AACA;AACA;AACA;AACA,4DAA4D,iEAAwB;AACpF,wDAAwD,4DAAmB;AAC3E;AACA;AACA;AACA;AACA;AACA;AACA,wDAAwD,iEAAwB;AAChF;AACA;AACA;AACA,CAAC;AACyB;;;;;;;;;;;;;;;;AClB1B;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACe;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACPyC;AACH;AACuB;AAClB;AACG;AAC0G;AACpI;AACE;AACR;AACqE;AAC/D;AACF;AAClC;AACA;AACA;AACA;AACA,sCAAsC,sEAA6B,GAAG,gEAAuB;AAC7F,6BAA6B,+CAAQ;AACrC,qBAAqB,2CAAM;AAC3B;AACA,8BAA8B,+CAAQ;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,iEAAY;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B,6CAAO;AACrC;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,iEAAY;AACzB;AACA;AACA;AACA;AACA,8CAA8C,kFAA4B;AAC1E,0BAA0B,iEAAyB;AACnD,uBAAuB,2EAAqB;AAC5C,uBAAuB,gGAA0C;AACjE;AACA;AACA,aAAa,iEAAY;AACzB;AACA,aAAa,iEAAY;AACzB;AACA;AACA,8CAA8C,kFAA4B;AAC1E,0BAA0B,kEAA0B;AACpD,uBAAuB,gGAA0C;AACjE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,6CAAO;AAClC,0BAA0B,uCAAI;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B,qEAAe;AAC5C,+BAA+B,kEAAe;AAC9C;AACA,+CAA+C,8EAA2B;AAC1E;AACA,gCAAgC,4EAAoC,CAAC,qEAAe;AACpF;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uCAAuC;AACvC,sBAAsB,8CAAO;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,2EAAuB;AACnC,YAAY,mFAA6B;AACzC;AACA;AACA;AACA;AACA;AACA,qBAAqB,2CAAM,CAAC,oEAAc,sCAAsC,+CAAQ;AACxF,sBAAsB,8CAAO;AAC7B,sBAAsB,6CAAO;AAC7B;AACA;AACyD;;;;;;;;;;;;;;;;AClJzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sCAAsC,oBAAoB;AAC1D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AAC0B;;;;;;;;;;;;;;;;;;;;;;;;ACxB3B,qBAAqB,SAAI,IAAI,SAAI;AACjC,6EAA6E,OAAO;AACpF;AACA;AACA;AACA;AACA;AACA;AACA;AAC8E;AACxB;AACM;AACD;AACF;AACvB;AAClC;AACA,0BAA0B,qEAAe;AACzC;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB,gFAAwC;AAC1D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC,sFAAqB;AAC1D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,4EAAoC;AAC1D;AACA;AACA,yBAAyB,2CAAM,CAAC,oEAAc;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,gBAAgB;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB,gFAAwC;AAC1D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oCAAoC,oBAAoB;AACxD;AACA;AACA;AACA;AACA;AACA,yBAAyB,2CAAM,CAAC,oEAAc;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC,qEAAe;AACjD;AACA,kDAAkD,wCAAwC,iBAAiB,mEAA0B,GAAG,IAAI;AAC5I;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA,kCAAkC,gEAAuB;AACzD,uCAAuC,sEAA6B;AACpE,sCAAsC,8DAAqB;AAC3D,qCAAqC,mEAA0B;AAC/D;AACA;AACyE;;;;;;;;;;;;;;;;;ACtIxC;AACjC;AACA;AACA,kBAAkB,6CAAE;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACkB;;;;;;;;;;;;;;;;;;;;;ACrBwC;AAC1B;AAC6B;AACxB;AACe;AACrD;AACA;AACA,kBAAkB,6CAAE;AACpB;AACA;AACA,6DAA6D,0EAAoB;AACjF,wBAAwB,8DAAe;AACvC;AACA;AACA;AACA;AACA,+BAA+B,+CAAQ,CAAC,+DAAsB;AAC9D;AACA,0CAA0C,+CAAQ;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6CAA6C,gBAAgB;AAC7D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,sEAA6B;AACxD;AACA;AACA,+BAA+B,sEAA6B;AAC5D;AACA;AACA,2BAA2B,+DAAsB;AACjD;AACA;AACA,wDAAwD,OAAO,yEAAgC,wBAAwB,8BAA8B,IAAI;AACzJ;AACA;AACA,+BAA+B,kEAAyB;AACxD;AACA;AACA;AACA,uDAAuD,iBAAiB,+DAAsB,GAAG;AACjG;AACA;AACA;AACA;AACA;AACA,8DAA8D,OAAO,yEAAgC,wBAAwB,8BAA8B,IAAI;AAC/J;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,+DAAsB;AACrD;AACA;AACA;AACA;AACA,kDAAkD,gBAAgB;AAClE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACiB;;;;;;;;;;;;;;;;;;;;AChFlB,gBAAgB,SAAI,IAAI,SAAI;AAC5B;AACA,iDAAiD,OAAO;AACxD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,SAAI,IAAI,SAAI;AAC7B,4BAA4B,+DAA+D,iBAAiB;AAC5G;AACA,oCAAoC,MAAM,+BAA+B,YAAY;AACrF,mCAAmC,MAAM,mCAAmC,YAAY;AACxF,gCAAgC;AAChC;AACA,KAAK;AACL;AACA,mBAAmB,SAAI,IAAI,SAAI;AAC/B,cAAc,6BAA6B,0BAA0B,cAAc,qBAAqB;AACxG,iBAAiB,oDAAoD,qEAAqE,cAAc;AACxJ,uBAAuB,sBAAsB;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA,wCAAwC;AACxC,mCAAmC,SAAS;AAC5C,mCAAmC,WAAW,UAAU;AACxD,0CAA0C,cAAc;AACxD;AACA,8GAA8G,OAAO;AACrH,iFAAiF,iBAAiB;AAClG,yDAAyD,gBAAgB,QAAQ;AACjF,+CAA+C,gBAAgB,gBAAgB;AAC/E;AACA,kCAAkC;AAClC;AACA;AACA,UAAU,YAAY,aAAa,SAAS,UAAU;AACtD,oCAAoC,SAAS;AAC7C;AACA;AACA,qBAAqB,SAAI,IAAI,SAAI;AACjC,6EAA6E,OAAO;AACpF;AACA;AACA;AACA;AACA;AACA;AACA;AACyG;AAC3B;AACnB;AACY;AACvE;AACA;AACA;AACA;AACA,2BAA2B,oEAAc;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uCAAuC,wEAA0B;AACjE;AACA;AACA,KAAK,IAAI,yFAAyF;AAClG;AACA;AACA;AACA;AACA;AACA,kEAAkE,eAAe,gBAAgB;AACjG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gFAAgF,WAAW,sFAAsF;AACjL;AACA,SAAS;AACT,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,kFAAkF,yCAAyC;AAC3H;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,KAAK;AACL;AACA;AACA;AACA,QAAQ,uDAAS;AACjB,sDAAsD,gBAAgB;AACtE;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,oEAA2B;AACvD,uCAAuC,oEAA2B;AAClE;AACA;AACA;AACA;AACA;AACA,gCAAgC,2EAAoB;AACpD;AACA;AACA;AACA;AACA;AACA,0BAA0B,sEAAgB;AAC1C;AACA;AACA;AACA;AACA,oFAAoF,sEAAgB;AACpG;AACA;AACA;AACA,wBAAwB,4EAAqB;AAC7C;AACA,4BAA4B,iEAAwB;AACpD,wBAAwB,wEAAiB;AACzC;AACA;AACA;AACA;AACA;AACA,QAAQ,uDAAS;AACjB,uDAAuD,gEAAgE;AACvH;AACA;AACA;AACA;AACA;AAC2B;;;;;;;;;;;;;;;;;;;;;;;;AC7L3B,iBAAiB,SAAI,IAAI,SAAI;AAC7B,4BAA4B,+DAA+D,iBAAiB;AAC5G;AACA,oCAAoC,MAAM,+BAA+B,YAAY;AACrF,mCAAmC,MAAM,mCAAmC,YAAY;AACxF,gCAAgC;AAChC;AACA,KAAK;AACL;AACA,mBAAmB,SAAI,IAAI,SAAI;AAC/B,cAAc,6BAA6B,0BAA0B,cAAc,qBAAqB;AACxG,iBAAiB,oDAAoD,qEAAqE,cAAc;AACxJ,uBAAuB,sBAAsB;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA,wCAAwC;AACxC,mCAAmC,SAAS;AAC5C,mCAAmC,WAAW,UAAU;AACxD,0CAA0C,cAAc;AACxD;AACA,8GAA8G,OAAO;AACrH,iFAAiF,iBAAiB;AAClG,yDAAyD,gBAAgB,QAAQ;AACjF,+CAA+C,gBAAgB,gBAAgB;AAC/E;AACA,kCAAkC;AAClC;AACA;AACA,UAAU,YAAY,aAAa,SAAS,UAAU;AACtD,oCAAoC,SAAS;AAC7C;AACA;AACsD;AACO;AACF;AACG;AACnB;AACkC;AACP;AACpB;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,uEAAiB;AAC1C,WAAW,kFAA+B,eAAe,uDAAuD,gBAAgB,iBAAiB,iFAAyC,qFAAqF;AAC/Q;AACA;AACA;AACA;AACA,IAAI,sEAAgB;AACpB;AACA,aAAa,qEAAe;AAC5B,aAAa,qEAAe;AAC5B;AACA;AACA,aAAa,qEAAe;AAC5B;AACA;AACA,aAAa,qEAAe;AAC5B,qBAAqB,+DAAe;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,6DAAe;AAChC;AACA;AACA;AACA;AACA,IAAI,yDAAW;AACf;AACA;AACA;AACA;AACA;AACA,YAAY,uDAAS;AACrB,uDAAuD,mDAAmD;AAC1G;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,uDAAS;AACrB;AACA;AACA;AACA;AACA;AACA;AACA,MAAM,kDAAkD,uEAAoB;AAC5E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,uDAAS;AACrB;AACA;AACA;AACA;AACA;AACA;AACA,uFAAuF;AACvF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACmB;;;;;;;;;;;;;;;;;;;AC5MnB,iBAAiB,SAAI,IAAI,SAAI;AAC7B,4BAA4B,+DAA+D,iBAAiB;AAC5G;AACA,oCAAoC,MAAM,+BAA+B,YAAY;AACrF,mCAAmC,MAAM,mCAAmC,YAAY;AACxF,gCAAgC;AAChC;AACA,KAAK;AACL;AACA,mBAAmB,SAAI,IAAI,SAAI;AAC/B,cAAc,6BAA6B,0BAA0B,cAAc,qBAAqB;AACxG,iBAAiB,oDAAoD,qEAAqE,cAAc;AACxJ,uBAAuB,sBAAsB;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA,wCAAwC;AACxC,mCAAmC,SAAS;AAC5C,mCAAmC,WAAW,UAAU;AACxD,0CAA0C,cAAc;AACxD;AACA,8GAA8G,OAAO;AACrH,iFAAiF,iBAAiB;AAClG,yDAAyD,gBAAgB,QAAQ;AACjF,+CAA+C,gBAAgB,gBAAgB;AAC/E;AACA,kCAAkC;AAClC;AACA;AACA,UAAU,YAAY,aAAa,SAAS,UAAU;AACtD,oCAAoC,SAAS;AAC7C;AACA;AAC8D;AACnB;AACpC;AACP,2BAA2B,sEAAgB;AAC3C;AACA;AACA,0BAA0B,sEAAgB;AAC1C;AACA;AACA;AACA;AACA;AACO;AACP,0BAA0B,sEAAgB;AAC1C;AACA;AACA,0BAA0B,sEAAgB;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,uDAAS;AACjB;AACA;AACA;AACA,yEAAyE;AACzE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL,CAAC;;;;;;;;;;;;;;;;;;ACvF6D;AACC;AAC/D;AACA;AACA;AACA;AACA;AACA,8BAA8B,sEAAgB;AAC9C,mBAAmB,wEAAmB;AACtC;AACA;AACA,8BAA8B,sEAAgB;AAC9C,mBAAmB,wEAAmB;AACtC;AACA;AACA,8BAA8B,sEAAgB;AAC9C,mBAAmB,wEAAmB;AACtC;AACA;AACA,CAAC;AAC0B;;;;;;;;;;;;;;;;;;;ACpB2B;AACA;AACI;AAC1D;AACA;AACA;AACA,sCAAsC,mEAAiB;AACvD,oCAAoC,+DAAe;AACnD,oCAAoC,+DAAe;AACnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACgC;;;;;;;;;;;;;;;;;ACxEyB;AAC1D;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,mEAAiB;AACpC;AACA;AACA;AACA,mBAAmB,mEAAiB;AACpC;AACA;AACA,CAAC;AAC0B;;;;;;;;;;;;;;;;;;;;ACf2B;AACyB;AACX;AACL;AAC/D;AACA;AACA;AACA;AACA;AACA,6BAA6B,qEAAe;AAC5C;AACA,mBAAmB,6EAAqB;AACxC;AACA;AACA;AACA,iCAAiC,wEAAgC;AACjE;AACA;AACA;AACA;AACA;AACA,6BAA6B,qEAAe;AAC5C;AACA;AACA;AACA,8BAA8B,sEAAgB;AAC9C,mBAAmB,wEAAmB;AACtC;AACA;AACA,6BAA6B,qEAAe;AAC5C;AACA;AACA;AACA,mBAAmB,6EAAqB;AACxC;AACA;AACA,6BAA6B,qEAAe;AAC5C;AACA,8BAA8B,sEAAgB;AAC9C,mBAAmB,wEAAmB;AACtC;AACA;AACA,6BAA6B,qEAAe;AAC5C;AACA,8BAA8B,sEAAgB;AAC9C,mBAAmB,wEAAmB;AACtC;AACA;AACA;AACA,4BAA4B,2EAAmC;AAC/D;AACA;AACA,6BAA6B,qEAAe;AAC5C,8BAA8B,sEAAgB;AAC9C;AACA;AACA;AACA,6BAA6B,qEAAe;AAC5C;AACA,4CAA4C;AAC5C;AACA;AACA,8BAA8B,sEAAgB;AAC9C,mBAAmB,wEAAmB;AACtC;AACA;AACA,6BAA6B,qEAAe;AAC5C;AACA,sCAAsC;AACtC;AACA,mBAAmB,wEAAmB;AACtC;AACA;AACA,6BAA6B,qEAAe;AAC5C;AACA,8BAA8B,sEAAgB;AAC9C,mBAAmB,wEAAmB;AACtC;AACA;AACA,iDAAiD,wCAAwC;AACzF;AACA;AACA,CAAC;AAC0B;;;;;;;;;;;;;;;;;;ACnF2B;AACI;AAC1D;AACA;AACA;AACA,sCAAsC,mEAAiB;AACvD,oCAAoC,+DAAe;AACnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AAC8B;;;;;;;;;;;;;;;;;;AC7DuB;AACuD;AAC7G;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,+DAAe;AAClC;AACA;AACA,mCAAmC,oEAAe;AAClD,mBAAmB,+DAAe;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,+DAAe;AAClC;AACA;AACA,mCAAmC,qEAAgB;AACnD,mBAAmB,+DAAe;AAClC;AACA;AACA;AACA,uCAAuC,mEAAc;AACrD;AACA,mBAAmB,+DAAe;AAClC;AACA;AACA;AACA,uCAAuC,oEAAe;AACtD;AACA,mBAAmB,+DAAe;AAClC;AACA;AACA;AACA,uCAAuC,qEAAgB;AACvD;AACA,mBAAmB,+DAAe;AAClC;AACA;AACA;AACA,uCAAuC,uEAAkB,UAAU,mEAAc;AACjF;AACA,mBAAmB,+DAAe;AAClC;AACA;AACA;AACA,wCAAwC,uEAAkB,UAAU,mEAAc;AAClF;AACA,mBAAmB,+DAAe;AAClC;AACA;AACA;AACA,uCAAuC,uEAAkB,UAAU,oEAAe;AAClF;AACA,mBAAmB,+DAAe;AAClC;AACA;AACA;AACA,wCAAwC,uEAAkB,UAAU,oEAAe;AACnF;AACA,mBAAmB,+DAAe;AAClC;AACA;AACA;AACA,uCAAuC,uEAAkB,UAAU,qEAAgB;AACnF;AACA,mBAAmB,+DAAe;AAClC;AACA;AACA;AACA,wCAAwC,uEAAkB,UAAU,qEAAgB;AACpF;AACA,mBAAmB,+DAAe;AAClC;AACA;AACA;AACA,uCAAuC,uEAAkB;AACzD;AACA,mBAAmB,+DAAe;AAClC;AACA;AACA;AACA,wCAAwC,uEAAkB;AAC1D;AACA,mBAAmB,+DAAe;AAClC;AACA;AACA,CAAC;AAC4B;;;;;;;;;;;;;;;;;;;;;AClG8B;AACX;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wCAAwC;AACxC;AACA;AACA;AACA,8BAA8B,wDAAQ;AACtC;AACA;AACA,uCAAuC,+DAAsB;AAC7D,uCAAuC;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACiF;;;;;;;;;;;;;;;;;AClCjF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACiD;;;;;;;;;;;;;;;;;;;;;;ACVqB;AAChB;AACO;AAChB;AACtC;AACP;AACA;AACA;AACA,6BAA6B,uBAAuB;AACpD;AACA;AACA,gDAAgD,8CAA8C;AAC9F;AACA;AACA;AACO;AACP;AACA;AACA,aAAa,qEAAe;AAC5B,aAAa,qEAAe;AAC5B;AACA;AACA,aAAa,qEAAe;AAC5B,aAAa,qEAAe;AAC5B;AACA;AACA,aAAa,qEAAe;AAC5B;AACA;AACA,aAAa,qEAAe;AAC5B;AACA;AACA,aAAa,qEAAe;AAC5B;AACA;AACA;AACA;AACA,wCAAwC,kFAA4B;AACpE,wBAAwB,uEAA+B;AACvD;AACA;AACO;AACP;AACA,aAAa,qEAAe;AAC5B,qBAAqB,uCAAuC,sDAAW;AACvE,aAAa,qEAAe;AAC5B,qBAAqB,wCAAwC,sDAAW;AACxE,aAAa,qEAAe;AAC5B,qBAAqB,4CAA4C,sDAAW;AAC5E;AACA;AACA;AACA;;;;;;;;;;;;;;;;ACpDA;AACA;AACA;AACA;AACA;AACA;AACsB;;;;;;;;;;;;;;;;;;ACNgC;AAC/C;AACP;AACA,0BAA0B,iEAAyB;AACnD;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;ACfO;AACP;AACA;AACA;AACA;AACA,CAAC,kCAAkC;;;;;;;;;;;;;;;;ACLnC;AACA;AACA;AACA;AACc;;;;;;;;;;;;;;;;ACJP;AACP;AACA,sCAAsC,qBAAqB;AAC3D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;ACZsD;AACtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,sEAA8B;AAC1D;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACiL;;;;;;;;;;;ACnGjL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,IAA0C;AAClD,QAAQ,oCAAO,UAAU;AAAA;AAAA;AAAA;AAAA,kGAAC;AAC1B,MAAM,KAAK,EAIN;AACL,CAAC;AACD;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,0BAA0B;AAC1B,UAAU;AACV;AACA,UAAU;AACV;AACA,UAAU;AACV;AACA,UAAU;AACV;AACA;AACA;;AAEA;;AAEA;AACA;AACA,wBAAwB,uBAAuB;AAC/C;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,QAAQ;AACR;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA,YAAY;;AAEZ;AACA;AACA;AACA,qEAAqE;AACrE,YAAY;AACZ;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA,YAAY;;AAEZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0CAA0C;AAC1C;AACA,gBAAgB;AAChB;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,YAAY;;AAEZ;AACA;AACA;AACA,qDAAqD;AACrD,YAAY;AACZ;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA,sBAAsB;AACtB;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,wCAAwC;AACxC;AACA;AACA;AACA;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA,CAAC;;;;;;;;;;;ACxSD;AACA;AACA,gEAAgE;AAChE;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B,qBAAM,gBAAgB,qBAAM;AACtD;AACA;AACA,0CAA0C;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yDAAyD,kDAAkD;AAC3G;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,kEAAkE;AAClE,8BAA8B,gBAAgB,kBAAkB;AAChE;AACA;AACA;AACA;AACA,gCAAgC;AAChC;AACA,oCAAoC,wBAAwB,iBAAiB;AAC7E,oCAAoC,wBAAwB,IAAI;AAChE;AACA,wCAAwC;AACxC,wCAAwC,oBAAoB;AAC5D;AACA,wCAAwC;AACxC,wCAAwC,kBAAkwGAAwG;AACxG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iFAAiF;AACjF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sEAAsE;AACtE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sEAAsE;AACtwEAAwE;AACxE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gDAAgD,QAAQ;AACxD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gDAAgD,QAAQ;AACxD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kDAAkD,uBAAuB;AACzE;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wDAAwD,0BAA0B;AACluCAAuC;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oEAAoE;AACpE,sEAAsE;AACtE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC;AACjC;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uCAAuC,2BAA2B;AAClE;AACA;AACA,iBAAiB;AACjB,qDAAqD;AACrD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gDAAgD,UAAU;AAC1D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mDAAmD;AACnD,qDAAqD;AACrD,sDAAsD;AACtD,4DAA4D;AAC5D,8DAA8D;AAC9D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uCAAuC,wBAAwB;AAC/D;AACA;AACA,iBAAiB;AACjB,uDAAuD;AACvD,uDAAuD;AACvD,0DAA0D;AAC1D,oDAAoD;AACpD,mDAAmD;AACnD,qDAAqD;AACrD,sDAAsD;AACtD,4DAA4D;AAC5D,8DAA8D;AAC9D;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6DAA6D,yBAAyB;AACtF;AACA;AACA;AACA;AACA,gCAAgC,UAAU;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC,oBAAoB;AACzD;AACA;AACA;AACA;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","sources":["webpack://arcvalidation/webpack/universalModuleDefinition","webpack://arcvalidation/./node_modules/inversify/es/annotation/decorator_utils.js","webpack://arcvalidation/./node_modules/inversify/es/annotation/inject.js","webpack://arcvalidation/./node_modules/inversify/es/annotation/inject_base.js","webpack://arcvalidation/./node_modules/inversify/es/annotation/injectable.js","webpack://arcvalidation/./node_modules/inversify/es/annotation/lazy_service_identifier.js","webpack://arcvalidation/./node_modules/inversify/es/bindings/binding.js","webpack://arcvalidation/./node_modules/inversify/es/bindings/binding_count.js","webpack://arcvalidation/./node_modules/inversify/es/constants/error_msgs.js","webpack://arcvalidation/./node_modules/inversify/es/constants/literal_types.js","webpack://arcvalidation/./node_modules/inversify/es/constants/metadata_keys.js","webpack://arcvalidation/./node_modules/inversify/es/container/container.js","webpack://arcvalidation/./node_modules/inversify/es/container/container_snapshot.js","webpack://arcvalidation/./node_modules/inversify/es/container/lookup.js","webpack://arcvalidation/./node_modules/inversify/es/container/module_activation_store.js","webpack://arcvalidation/./node_modules/inversify/es/planning/context.js","webpack://arcvalidation/./node_modules/inversify/es/planning/metadata.js","webpack://arcvalidation/./node_modules/inversify/es/planning/metadata_reader.js","webpack://arcvalidation/./node_modules/inversify/es/planning/plan.js","webpack://arcvalidation/./node_modules/inversify/es/planning/planner.js","webpack://arcvalidation/./node_modules/inversify/es/planning/queryable_string.js","webpack://arcvalidation/./node_modules/inversify/es/planning/reflection_utils.js","webpack://arcvalidation/./node_modules/inversify/es/planning/request.js","webpack://arcvalidation/./node_modules/inversify/es/planning/target.js","webpack://arcvalidation/./node_modules/inversify/es/resolution/instantiation.js","webpack://arcvalidation/./node_modules/inversify/es/resolution/resolver.js","webpack://arcvalidation/./node_modules/inversify/es/scope/scope.js","webpack://arcvalidation/./node_modules/inversify/es/syntax/binding_in_syntax.js","webpack://arcvalidation/./node_modules/inversify/es/syntax/binding_in_when_on_syntax.js","webpack://arcvalidation/./node_modules/inversify/es/syntax/binding_on_syntax.js","webpack://arcvalidation/./node_modules/inversify/es/syntax/binding_to_syntax.js","webpack://arcvalidation/./node_modules/inversify/es/syntax/binding_when_on_syntax.js","webpack://arcvalidation/./node_modules/inversify/es/syntax/binding_when_syntax.js","webpack://arcvalidation/./node_modules/inversify/es/syntax/constraint_helpers.js","webpack://arcvalidation/./node_modules/inversify/es/utils/async.js","webpack://arcvalidation/./node_modules/inversify/es/utils/binding_utils.js","webpack://arcvalidation/./node_modules/inversify/es/utils/clonable.js","webpack://arcvalidation/./node_modules/inversify/es/utils/exceptions.js","webpack://arcvalidation/./node_modules/inversify/es/utils/factory_type.js","webpack://arcvalidation/./node_modules/inversify/es/utils/id.js","webpack://arcvalidation/./node_modules/inversify/es/utils/js.js","webpack://arcvalidation/./node_modules/inversify/es/utils/serialization.js","webpack://arcvalidation/./node_modules/loglevel/lib/loglevel.js","webpack://arcvalidation/./node_modules/reflect-metadata/Reflect.js","webpack://arcvalidation/./src/DebouncerFactory.ts","webpack://arcvalidation/./src/EventEmitter.ts","webpack://arcvalidation/./src/Form.ts","webpack://arcvalidation/./src/FormFactory.ts","webpack://arcvalidation/./src/FormManager.ts","webpack://arcvalidation/./src/Initializer.ts","webpack://arcvalidation/./src/ObservableCollection.ts","webpack://arcvalidation/./src/Result.ts","webpack://arcvalidation/./src/RuleFactory.ts","webpack://arcvalidation/./src/ValidationRuleRegistry.ts","webpack://arcvalidation/./src/di/container-config.ts","webpack://arcvalidation/./src/di/container-types.ts","webpack://arcvalidation/./src/logger/debuggingLogger.ts","webpack://arcvalidation/./src/services/ValidationService.ts","webpack://arcvalidation/./src/services/loggerService.ts","webpack://arcvalidation/./src/util/Debouncer.ts","webpack://arcvalidation/webpack/bootstrap","webpack://arcvalidation/webpack/runtime/compat get default export","webpack://arcvalidation/webpack/runtime/define property getters","webpack://arcvalidation/webpack/runtime/global","webpack://arcvalidation/webpack/runtime/hasOwnProperty shorthand","webpack://arcvalidation/webpack/runtime/make namespace object","webpack://arcvalidation/./src/unobtrusviveValidation.ts"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"arcvalidation\"] = factory();\n\telse\n\t\troot[\"arcvalidation\"] = factory();\n})(this, () => {\nreturn ","import * as ERROR_MSGS from '../constants/error_msgs';\r\nimport * as METADATA_KEY from '../constants/metadata_keys';\r\nimport { getFirstArrayDuplicate } from '../utils/js';\r\nfunction targetIsConstructorFunction(target) {\r\n    return target.prototype !== undefined;\r\n}\r\nfunction _throwIfMethodParameter(parameterName) {\r\n    if (parameterName !== undefined) {\r\n        throw new Error(ERROR_MSGS.INVALID_DECORATOR_OPERATION);\r\n    }\r\n}\r\nfunction tagParameter(annotationTarget, parameterName, parameterIndex, metadata) {\r\n    _throwIfMethodParameter(parameterName);\r\n    _tagParameterOrProperty(METADATA_KEY.TAGGED, annotationTarget, parameterIndex.toString(), metadata);\r\n}\r\nfunction tagProperty(annotationTarget, propertyName, metadata) {\r\n    if (targetIsConstructorFunction(annotationTarget)) {\r\n        throw new Error(ERROR_MSGS.INVALID_DECORATOR_OPERATION);\r\n    }\r\n    _tagParameterOrProperty(METADATA_KEY.TAGGED_PROP, annotationTarget.constructor, propertyName, metadata);\r\n}\r\nfunction _ensureNoMetadataKeyDuplicates(metadata) {\r\n    var metadatas = [];\r\n    if (Array.isArray(metadata)) {\r\n        metadatas = metadata;\r\n        var duplicate = getFirstArrayDuplicate(metadatas.map(function (md) { return md.key; }));\r\n        if (duplicate !== undefined) {\r\n            throw new Error(ERROR_MSGS.DUPLICATED_METADATA + \" \" + duplicate.toString());\r\n        }\r\n    }\r\n    else {\r\n        metadatas = [metadata];\r\n    }\r\n    return metadatas;\r\n}\r\nfunction _tagParameterOrProperty(metadataKey, annotationTarget, key, metadata) {\r\n    var metadatas = _ensureNoMetadataKeyDuplicates(metadata);\r\n    var paramsOrPropertiesMetadata = {};\r\n    if (Reflect.hasOwnMetadata(metadataKey, annotationTarget)) {\r\n        paramsOrPropertiesMetadata = Reflect.getMetadata(metadataKey, annotationTarget);\r\n    }\r\n    var paramOrPropertyMetadata = paramsOrPropertiesMetadata[key];\r\n    if (paramOrPropertyMetadata === undefined) {\r\n        paramOrPropertyMetadata = [];\r\n    }\r\n    else {\r\n        var _loop_1 = function (m) {\r\n            if (metadatas.some(function (md) { return md.key === m.key; })) {\r\n                throw new Error(ERROR_MSGS.DUPLICATED_METADATA + \" \" + m.key.toString());\r\n            }\r\n        };\r\n        for (var _i = 0, paramOrPropertyMetadata_1 = paramOrPropertyMetadata; _i < paramOrPropertyMetadata_1.length; _i++) {\r\n            var m = paramOrPropertyMetadata_1[_i];\r\n            _loop_1(m);\r\n        }\r\n    }\r\n    paramOrPropertyMetadata.push.apply(paramOrPropertyMetadata, metadatas);\r\n    paramsOrPropertiesMetadata[key] = paramOrPropertyMetadata;\r\n    Reflect.defineMetadata(metadataKey, paramsOrPropertiesMetadata, annotationTarget);\r\n}\r\nfunction createTaggedDecorator(metadata) {\r\n    return function (target, targetKey, indexOrPropertyDescriptor) {\r\n        if (typeof indexOrPropertyDescriptor === 'number') {\r\n            tagParameter(target, targetKey, indexOrPropertyDescriptor, metadata);\r\n        }\r\n        else {\r\n            tagProperty(target, targetKey, metadata);\r\n        }\r\n    };\r\n}\r\nfunction _decorate(decorators, target) {\r\n    Reflect.decorate(decorators, target);\r\n}\r\nfunction _param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); };\r\n}\r\nfunction decorate(decorator, target, parameterIndexOrProperty) {\r\n    if (typeof parameterIndexOrProperty === 'number') {\r\n        _decorate([_param(parameterIndexOrProperty, decorator)], target);\r\n    }\r\n    else if (typeof parameterIndexOrProperty === 'string') {\r\n        Reflect.decorate([decorator], target, parameterIndexOrProperty);\r\n    }\r\n    else {\r\n        _decorate([decorator], target);\r\n    }\r\n}\r\nexport { decorate, tagParameter, tagProperty, createTaggedDecorator };\r\n","import * as METADATA_KEY from '../constants/metadata_keys';\r\nimport { injectBase } from './inject_base';\r\nvar inject = injectBase(METADATA_KEY.INJECT_TAG);\r\nexport { inject };\r\n","import { UNDEFINED_INJECT_ANNOTATION } from '../constants/error_msgs';\r\nimport { Metadata } from '../planning/metadata';\r\nimport { createTaggedDecorator } from './decorator_utils';\r\nexport function injectBase(metadataKey) {\r\n    return function (serviceIdentifier) {\r\n        return function (target, targetKey, indexOrPropertyDescriptor) {\r\n            if (serviceIdentifier === undefined) {\r\n                var className = typeof target === 'function' ? target.name : target.constructor.name;\r\n                throw new Error(UNDEFINED_INJECT_ANNOTATION(className));\r\n            }\r\n            return createTaggedDecorator(new Metadata(metadataKey, serviceIdentifier))(target, targetKey, indexOrPropertyDescriptor);\r\n        };\r\n    };\r\n}\r\n","import * as ERRORS_MSGS from '../constants/error_msgs';\r\nimport * as METADATA_KEY from '../constants/metadata_keys';\r\nfunction injectable() {\r\n    return function (target) {\r\n        if (Reflect.hasOwnMetadata(METADATA_KEY.PARAM_TYPES, target)) {\r\n            throw new Error(ERRORS_MSGS.DUPLICATED_INJECTABLE_DECORATOR);\r\n        }\r\n        var types = Reflect.getMetadata(METADATA_KEY.DESIGN_PARAM_TYPES, target) || [];\r\n        Reflect.defineMetadata(METADATA_KEY.PARAM_TYPES, types, target);\r\n        return target;\r\n    };\r\n}\r\nexport { injectable };\r\n","var LazyServiceIdentifier = (function () {\r\n    function LazyServiceIdentifier(cb) {\r\n        this._cb = cb;\r\n    }\r\n    LazyServiceIdentifier.prototype.unwrap = function () {\r\n        return this._cb();\r\n    };\r\n    return LazyServiceIdentifier;\r\n}());\r\nexport { LazyServiceIdentifier };\r\n","import { BindingScopeEnum, BindingTypeEnum } from '../constants/literal_types';\r\nimport { id } from '../utils/id';\r\nvar Binding = (function () {\r\n    function Binding(serviceIdentifier, scope) {\r\n        this.id = id();\r\n        this.activated = false;\r\n        this.serviceIdentifier = serviceIdentifier;\r\n        this.scope = scope;\r\n        this.type = BindingTypeEnum.Invalid;\r\n        this.constraint = function (request) { return true; };\r\n        this.implementationType = null;\r\n        this.cache = null;\r\n        this.factory = null;\r\n        this.provider = null;\r\n        this.onActivation = null;\r\n        this.onDeactivation = null;\r\n        this.dynamicValue = null;\r\n    }\r\n    Binding.prototype.clone = function () {\r\n        var clone = new Binding(this.serviceIdentifier, this.scope);\r\n        clone.activated = (clone.scope === BindingScopeEnum.Singleton) ? this.activated : false;\r\n        clone.implementationType = this.implementationType;\r\n        clone.dynamicValue = this.dynamicValue;\r\n        clone.scope = this.scope;\r\n        clone.type = this.type;\r\n        clone.factory = this.factory;\r\n        clone.provider = this.provider;\r\n        clone.constraint = this.constraint;\r\n        clone.onActivation = this.onActivation;\r\n        clone.onDeactivation = this.onDeactivation;\r\n        clone.cache = this.cache;\r\n        return clone;\r\n    };\r\n    return Binding;\r\n}());\r\nexport { Binding };\r\n","export var BindingCount = {\r\n    MultipleBindingsAvailable: 2,\r\n    NoBindingsAvailable: 0,\r\n    OnlyOneBindingAvailable: 1\r\n};\r\n","export var DUPLICATED_INJECTABLE_DECORATOR = 'Cannot apply @injectable decorator multiple times.';\r\nexport var DUPLICATED_METADATA = 'Metadata key was used more than once in a parameter:';\r\nexport var NULL_ARGUMENT = 'NULL argument';\r\nexport var KEY_NOT_FOUND = 'Key Not Found';\r\nexport var AMBIGUOUS_MATCH = 'Ambiguous match found for serviceIdentifier:';\r\nexport var CANNOT_UNBIND = 'Could not unbind serviceIdentifier:';\r\nexport var NOT_REGISTERED = 'No matching bindings found for serviceIdentifier:';\r\nexport var MISSING_INJECTABLE_ANNOTATION = 'Missing required @injectable annotation in:';\r\nexport var MISSING_INJECT_ANNOTATION = 'Missing required @inject or @multiInject annotation in:';\r\nexport var UNDEFINED_INJECT_ANNOTATION = function (name) {\r\n    return \"@inject called with undefined this could mean that the class \" + name + \" has \" +\r\n        'a circular dependency problem. You can use a LazyServiceIdentifier to  ' +\r\n        'overcome this limitation.';\r\n};\r\nexport var CIRCULAR_DEPENDENCY = 'Circular dependency found:';\r\nexport var NOT_IMPLEMENTED = 'Sorry, this feature is not fully implemented yet.';\r\nexport var INVALID_BINDING_TYPE = 'Invalid binding type:';\r\nexport var NO_MORE_SNAPSHOTS_AVAILABLE = 'No snapshot available to restore.';\r\nexport var INVALID_MIDDLEWARE_RETURN = 'Invalid return type in middleware. Middleware must return!';\r\nexport var INVALID_FUNCTION_BINDING = 'Value provided to function binding must be a function!';\r\nexport var LAZY_IN_SYNC = function (key) { return \"You are attempting to construct '\" + key + \"' in a synchronous way\\n but it has asynchronous dependencies.\"; };\r\nexport var INVALID_TO_SELF_VALUE = 'The toSelf function can only be applied when a constructor is ' +\r\n    'used as service identifier';\r\nexport var INVALID_DECORATOR_OPERATION = 'The @inject @multiInject @tagged and @named decorators ' +\r\n    'must be applied to the parameters of a class constructor or a class property.';\r\nexport var ARGUMENTS_LENGTH_MISMATCH = function () {\r\n    var values = [];\r\n    for (var _i = 0; _i < arguments.length; _i++) {\r\n        values[_i] = arguments[_i];\r\n    }\r\n    return 'The number of constructor arguments in the derived class ' +\r\n        (values[0] + \" must be >= than the number of constructor arguments of its base class.\");\r\n};\r\nexport var CONTAINER_OPTIONS_MUST_BE_AN_OBJECT = 'Invalid Container constructor argument. Container options ' +\r\n    'must be an object.';\r\nexport var CONTAINER_OPTIONS_INVALID_DEFAULT_SCOPE = 'Invalid Container option. Default scope must ' +\r\n    'be a string (\"singleton\" or \"transient\").';\r\nexport var CONTAINER_OPTIONS_INVALID_AUTO_BIND_INJECTABLE = 'Invalid Container option. Auto bind injectable must ' +\r\n    'be a boolean';\r\nexport var CONTAINER_OPTIONS_INVALID_SKIP_BASE_CHECK = 'Invalid Container option. Skip base check must ' +\r\n    'be a boolean';\r\nexport var MULTIPLE_PRE_DESTROY_METHODS = 'Cannot apply @preDestroy decorator multiple times in the same class';\r\nexport var MULTIPLE_POST_CONSTRUCT_METHODS = 'Cannot apply @postConstruct decorator multiple times in the same class';\r\nexport var ASYNC_UNBIND_REQUIRED = 'Attempting to unbind dependency with asynchronous destruction (@preDestroy or onDeactivation)';\r\nexport var POST_CONSTRUCT_ERROR = function (clazz, errorMessage) { return \"@postConstruct error in class \" + clazz + \": \" + errorMessage; };\r\nexport var PRE_DESTROY_ERROR = function (clazz, errorMessage) { return \"@preDestroy error in class \" + clazz + \": \" + errorMessage; };\r\nexport var ON_DEACTIVATION_ERROR = function (clazz, errorMessage) { return \"onDeactivation() error in class \" + clazz + \": \" + errorMessage; };\r\nexport var CIRCULAR_DEPENDENCY_IN_FACTORY = function (factoryType, serviceIdentifier) {\r\n    return \"It looks like there is a circular dependency in one of the '\" + factoryType + \"' bindings. Please investigate bindings with \" +\r\n        (\"service identifier '\" + serviceIdentifier + \"'.\");\r\n};\r\nexport var STACK_OVERFLOW = 'Maximum call stack size exceeded';\r\n","var BindingScopeEnum = {\r\n    Request: 'Request',\r\n    Singleton: 'Singleton',\r\n    Transient: 'Transient'\r\n};\r\nvar BindingTypeEnum = {\r\n    ConstantValue: 'ConstantValue',\r\n    Constructor: 'Constructor',\r\n    DynamicValue: 'DynamicValue',\r\n    Factory: 'Factory',\r\n    Function: 'Function',\r\n    Instance: 'Instance',\r\n    Invalid: 'Invalid',\r\n    Provider: 'Provider'\r\n};\r\nvar TargetTypeEnum = {\r\n    ClassProperty: 'ClassProperty',\r\n    ConstructorArgument: 'ConstructorArgument',\r\n    Variable: 'Variable'\r\n};\r\nexport { BindingScopeEnum, BindingTypeEnum, TargetTypeEnum };\r\n","export var NAMED_TAG = 'named';\r\nexport var NAME_TAG = 'name';\r\nexport var UNMANAGED_TAG = 'unmanaged';\r\nexport var OPTIONAL_TAG = 'optional';\r\nexport var INJECT_TAG = 'inject';\r\nexport var MULTI_INJECT_TAG = 'multi_inject';\r\nexport var TAGGED = 'inversify:tagged';\r\nexport var TAGGED_PROP = 'inversify:tagged_props';\r\nexport var PARAM_TYPES = 'inversify:paramtypes';\r\nexport var DESIGN_PARAM_TYPES = 'design:paramtypes';\r\nexport var POST_CONSTRUCT = 'post_construct';\r\nexport var PRE_DESTROY = 'pre_destroy';\r\nfunction getNonCustomTagKeys() {\r\n    return [\r\n        INJECT_TAG,\r\n        MULTI_INJECT_TAG,\r\n        NAME_TAG,\r\n        UNMANAGED_TAG,\r\n        NAMED_TAG,\r\n        OPTIONAL_TAG,\r\n    ];\r\n}\r\nexport var NON_CUSTOM_TAG_KEYS = getNonCustomTagKeys();\r\n","var __assign = (this && this.__assign) || function () {\r\n    __assign = Object.assign || function(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\r\n                t[p] = s[p];\r\n        }\r\n        return t;\r\n    };\r\n    return __assign.apply(this, arguments);\r\n};\r\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n};\r\nvar __generator = (this && this.__generator) || function (thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n};\r\nvar __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {\r\n    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\r\n        if (ar || !(i in from)) {\r\n            if (!ar) ar = Array.prototype.slice.call(from, 0, i);\r\n            ar[i] = from[i];\r\n        }\r\n    }\r\n    return to.concat(ar || Array.prototype.slice.call(from));\r\n};\r\nimport { Binding } from '../bindings/binding';\r\nimport * as ERROR_MSGS from '../constants/error_msgs';\r\nimport { BindingScopeEnum, TargetTypeEnum } from '../constants/literal_types';\r\nimport * as METADATA_KEY from '../constants/metadata_keys';\r\nimport { MetadataReader } from '../planning/metadata_reader';\r\nimport { createMockRequest, getBindingDictionary, plan } from '../planning/planner';\r\nimport { resolve } from '../resolution/resolver';\r\nimport { BindingToSyntax } from '../syntax/binding_to_syntax';\r\nimport { isPromise, isPromiseOrContainsPromise } from '../utils/async';\r\nimport { id } from '../utils/id';\r\nimport { getServiceIdentifierAsString } from '../utils/serialization';\r\nimport { ContainerSnapshot } from './container_snapshot';\r\nimport { Lookup } from './lookup';\r\nimport { ModuleActivationStore } from './module_activation_store';\r\nvar Container = (function () {\r\n    function Container(containerOptions) {\r\n        var options = containerOptions || {};\r\n        if (typeof options !== 'object') {\r\n            throw new Error(\"\" + ERROR_MSGS.CONTAINER_OPTIONS_MUST_BE_AN_OBJECT);\r\n        }\r\n        if (options.defaultScope === undefined) {\r\n            options.defaultScope = BindingScopeEnum.Transient;\r\n        }\r\n        else if (options.defaultScope !== BindingScopeEnum.Singleton &&\r\n            options.defaultScope !== BindingScopeEnum.Transient &&\r\n            options.defaultScope !== BindingScopeEnum.Request) {\r\n            throw new Error(\"\" + ERROR_MSGS.CONTAINER_OPTIONS_INVALID_DEFAULT_SCOPE);\r\n        }\r\n        if (options.autoBindInjectable === undefined) {\r\n            options.autoBindInjectable = false;\r\n        }\r\n        else if (typeof options.autoBindInjectable !== 'boolean') {\r\n            throw new Error(\"\" + ERROR_MSGS.CONTAINER_OPTIONS_INVALID_AUTO_BIND_INJECTABLE);\r\n        }\r\n        if (options.skipBaseClassChecks === undefined) {\r\n            options.skipBaseClassChecks = false;\r\n        }\r\n        else if (typeof options.skipBaseClassChecks !== 'boolean') {\r\n            throw new Error(\"\" + ERROR_MSGS.CONTAINER_OPTIONS_INVALID_SKIP_BASE_CHECK);\r\n        }\r\n        this.options = {\r\n            autoBindInjectable: options.autoBindInjectable,\r\n            defaultScope: options.defaultScope,\r\n            skipBaseClassChecks: options.skipBaseClassChecks\r\n        };\r\n        this.id = id();\r\n        this._bindingDictionary = new Lookup();\r\n        this._snapshots = [];\r\n        this._middleware = null;\r\n        this._activations = new Lookup();\r\n        this._deactivations = new Lookup();\r\n        this.parent = null;\r\n        this._metadataReader = new MetadataReader();\r\n        this._moduleActivationStore = new ModuleActivationStore();\r\n    }\r\n    Container.merge = function (container1, container2) {\r\n        var containers = [];\r\n        for (var _i = 2; _i < arguments.length; _i++) {\r\n            containers[_i - 2] = arguments[_i];\r\n        }\r\n        var container = new Container();\r\n        var targetContainers = __spreadArray([container1, container2], containers, true).map(function (targetContainer) { return getBindingDictionary(targetContainer); });\r\n        var bindingDictionary = getBindingDictionary(container);\r\n        function copyDictionary(origin, destination) {\r\n            origin.traverse(function (_key, value) {\r\n                value.forEach(function (binding) {\r\n                    destination.add(binding.serviceIdentifier, binding.clone());\r\n                });\r\n            });\r\n        }\r\n        targetContainers.forEach(function (targetBindingDictionary) {\r\n            copyDictionary(targetBindingDictionary, bindingDictionary);\r\n        });\r\n        return container;\r\n    };\r\n    Container.prototype.load = function () {\r\n        var modules = [];\r\n        for (var _i = 0; _i < arguments.length; _i++) {\r\n            modules[_i] = arguments[_i];\r\n        }\r\n        var getHelpers = this._getContainerModuleHelpersFactory();\r\n        for (var _a = 0, modules_1 = modules; _a < modules_1.length; _a++) {\r\n            var currentModule = modules_1[_a];\r\n            var containerModuleHelpers = getHelpers(currentModule.id);\r\n            currentModule.registry(containerModuleHelpers.bindFunction, containerModuleHelpers.unbindFunction, containerModuleHelpers.isboundFunction, containerModuleHelpers.rebindFunction, containerModuleHelpers.unbindAsyncFunction, containerModuleHelpers.onActivationFunction, containerModuleHelpers.onDeactivationFunction);\r\n        }\r\n    };\r\n    Container.prototype.loadAsync = function () {\r\n        var modules = [];\r\n        for (var _i = 0; _i < arguments.length; _i++) {\r\n            modules[_i] = arguments[_i];\r\n        }\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var getHelpers, _a, modules_2, currentModule, containerModuleHelpers;\r\n            return __generator(this, function (_b) {\r\n                switch (_b.label) {\r\n                    case 0:\r\n                        getHelpers = this._getContainerModuleHelpersFactory();\r\n                        _a = 0, modules_2 = modules;\r\n                        _b.label = 1;\r\n                    case 1:\r\n                        if (!(_a < modules_2.length)) return [3, 4];\r\n                        currentModule = modules_2[_a];\r\n                        containerModuleHelpers = getHelpers(currentModule.id);\r\n                        return [4, currentModule.registry(containerModuleHelpers.bindFunction, containerModuleHelpers.unbindFunction, containerModuleHelpers.isboundFunction, containerModuleHelpers.rebindFunction, containerModuleHelpers.unbindAsyncFunction, containerModuleHelpers.onActivationFunction, containerModuleHelpers.onDeactivationFunction)];\r\n                    case 2:\r\n                        _b.sent();\r\n                        _b.label = 3;\r\n                    case 3:\r\n                        _a++;\r\n                        return [3, 1];\r\n                    case 4: return [2];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    Container.prototype.unload = function () {\r\n        var _this = this;\r\n        var modules = [];\r\n        for (var _i = 0; _i < arguments.length; _i++) {\r\n            modules[_i] = arguments[_i];\r\n        }\r\n        modules.forEach(function (module) {\r\n            var deactivations = _this._removeModuleBindings(module.id);\r\n            _this._deactivateSingletons(deactivations);\r\n            _this._removeModuleHandlers(module.id);\r\n        });\r\n    };\r\n    Container.prototype.unloadAsync = function () {\r\n        var modules = [];\r\n        for (var _i = 0; _i < arguments.length; _i++) {\r\n            modules[_i] = arguments[_i];\r\n        }\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var _a, modules_3, module_1, deactivations;\r\n            return __generator(this, function (_b) {\r\n                switch (_b.label) {\r\n                    case 0:\r\n                        _a = 0, modules_3 = modules;\r\n                        _b.label = 1;\r\n                    case 1:\r\n                        if (!(_a < modules_3.length)) return [3, 4];\r\n                        module_1 = modules_3[_a];\r\n                        deactivations = this._removeModuleBindings(module_1.id);\r\n                        return [4, this._deactivateSingletonsAsync(deactivations)];\r\n                    case 2:\r\n                        _b.sent();\r\n                        this._removeModuleHandlers(module_1.id);\r\n                        _b.label = 3;\r\n                    case 3:\r\n                        _a++;\r\n                        return [3, 1];\r\n                    case 4: return [2];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    Container.prototype.bind = function (serviceIdentifier) {\r\n        var scope = this.options.defaultScope || BindingScopeEnum.Transient;\r\n        var binding = new Binding(serviceIdentifier, scope);\r\n        this._bindingDictionary.add(serviceIdentifier, binding);\r\n        return new BindingToSyntax(binding);\r\n    };\r\n    Container.prototype.rebind = function (serviceIdentifier) {\r\n        this.unbind(serviceIdentifier);\r\n        return this.bind(serviceIdentifier);\r\n    };\r\n    Container.prototype.rebindAsync = function (serviceIdentifier) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0: return [4, this.unbindAsync(serviceIdentifier)];\r\n                    case 1:\r\n                        _a.sent();\r\n                        return [2, this.bind(serviceIdentifier)];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    Container.prototype.unbind = function (serviceIdentifier) {\r\n        if (this._bindingDictionary.hasKey(serviceIdentifier)) {\r\n            var bindings = this._bindingDictionary.get(serviceIdentifier);\r\n            this._deactivateSingletons(bindings);\r\n        }\r\n        this._removeServiceFromDictionary(serviceIdentifier);\r\n    };\r\n    Container.prototype.unbindAsync = function (serviceIdentifier) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var bindings;\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0:\r\n                        if (!this._bindingDictionary.hasKey(serviceIdentifier)) return [3, 2];\r\n                        bindings = this._bindingDictionary.get(serviceIdentifier);\r\n                        return [4, this._deactivateSingletonsAsync(bindings)];\r\n                    case 1:\r\n                        _a.sent();\r\n                        _a.label = 2;\r\n                    case 2:\r\n                        this._removeServiceFromDictionary(serviceIdentifier);\r\n                        return [2];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    Container.prototype.unbindAll = function () {\r\n        var _this = this;\r\n        this._bindingDictionary.traverse(function (_key, value) {\r\n            _this._deactivateSingletons(value);\r\n        });\r\n        this._bindingDictionary = new Lookup();\r\n    };\r\n    Container.prototype.unbindAllAsync = function () {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var promises;\r\n            var _this = this;\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0:\r\n                        promises = [];\r\n                        this._bindingDictionary.traverse(function (_key, value) {\r\n                            promises.push(_this._deactivateSingletonsAsync(value));\r\n                        });\r\n                        return [4, Promise.all(promises)];\r\n                    case 1:\r\n                        _a.sent();\r\n                        this._bindingDictionary = new Lookup();\r\n                        return [2];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    Container.prototype.onActivation = function (serviceIdentifier, onActivation) {\r\n        this._activations.add(serviceIdentifier, onActivation);\r\n    };\r\n    Container.prototype.onDeactivation = function (serviceIdentifier, onDeactivation) {\r\n        this._deactivations.add(serviceIdentifier, onDeactivation);\r\n    };\r\n    Container.prototype.isBound = function (serviceIdentifier) {\r\n        var bound = this._bindingDictionary.hasKey(serviceIdentifier);\r\n        if (!bound && this.parent) {\r\n            bound = this.parent.isBound(serviceIdentifier);\r\n        }\r\n        return bound;\r\n    };\r\n    Container.prototype.isCurrentBound = function (serviceIdentifier) {\r\n        return this._bindingDictionary.hasKey(serviceIdentifier);\r\n    };\r\n    Container.prototype.isBoundNamed = function (serviceIdentifier, named) {\r\n        return this.isBoundTagged(serviceIdentifier, METADATA_KEY.NAMED_TAG, named);\r\n    };\r\n    Container.prototype.isBoundTagged = function (serviceIdentifier, key, value) {\r\n        var bound = false;\r\n        if (this._bindingDictionary.hasKey(serviceIdentifier)) {\r\n            var bindings = this._bindingDictionary.get(serviceIdentifier);\r\n            var request_1 = createMockRequest(this, serviceIdentifier, key, value);\r\n            bound = bindings.some(function (b) { return b.constraint(request_1); });\r\n        }\r\n        if (!bound && this.parent) {\r\n            bound = this.parent.isBoundTagged(serviceIdentifier, key, value);\r\n        }\r\n        return bound;\r\n    };\r\n    Container.prototype.snapshot = function () {\r\n        this._snapshots.push(ContainerSnapshot.of(this._bindingDictionary.clone(), this._middleware, this._activations.clone(), this._deactivations.clone(), this._moduleActivationStore.clone()));\r\n    };\r\n    Container.prototype.restore = function () {\r\n        var snapshot = this._snapshots.pop();\r\n        if (snapshot === undefined) {\r\n            throw new Error(ERROR_MSGS.NO_MORE_SNAPSHOTS_AVAILABLE);\r\n        }\r\n        this._bindingDictionary = snapshot.bindings;\r\n        this._activations = snapshot.activations;\r\n        this._deactivations = snapshot.deactivations;\r\n        this._middleware = snapshot.middleware;\r\n        this._moduleActivationStore = snapshot.moduleActivationStore;\r\n    };\r\n    Container.prototype.createChild = function (containerOptions) {\r\n        var child = new Container(containerOptions || this.options);\r\n        child.parent = this;\r\n        return child;\r\n    };\r\n    Container.prototype.applyMiddleware = function () {\r\n        var middlewares = [];\r\n        for (var _i = 0; _i < arguments.length; _i++) {\r\n            middlewares[_i] = arguments[_i];\r\n        }\r\n        var initial = (this._middleware) ? this._middleware : this._planAndResolve();\r\n        this._middleware = middlewares.reduce(function (prev, curr) { return curr(prev); }, initial);\r\n    };\r\n    Container.prototype.applyCustomMetadataReader = function (metadataReader) {\r\n        this._metadataReader = metadataReader;\r\n    };\r\n    Container.prototype.get = function (serviceIdentifier) {\r\n        var getArgs = this._getNotAllArgs(serviceIdentifier, false);\r\n        return this._getButThrowIfAsync(getArgs);\r\n    };\r\n    Container.prototype.getAsync = function (serviceIdentifier) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var getArgs;\r\n            return __generator(this, function (_a) {\r\n                getArgs = this._getNotAllArgs(serviceIdentifier, false);\r\n                return [2, this._get(getArgs)];\r\n            });\r\n        });\r\n    };\r\n    Container.prototype.getTagged = function (serviceIdentifier, key, value) {\r\n        var getArgs = this._getNotAllArgs(serviceIdentifier, false, key, value);\r\n        return this._getButThrowIfAsync(getArgs);\r\n    };\r\n    Container.prototype.getTaggedAsync = function (serviceIdentifier, key, value) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var getArgs;\r\n            return __generator(this, function (_a) {\r\n                getArgs = this._getNotAllArgs(serviceIdentifier, false, key, value);\r\n                return [2, this._get(getArgs)];\r\n            });\r\n        });\r\n    };\r\n    Container.prototype.getNamed = function (serviceIdentifier, named) {\r\n        return this.getTagged(serviceIdentifier, METADATA_KEY.NAMED_TAG, named);\r\n    };\r\n    Container.prototype.getNamedAsync = function (serviceIdentifier, named) {\r\n        return this.getTaggedAsync(serviceIdentifier, METADATA_KEY.NAMED_TAG, named);\r\n    };\r\n    Container.prototype.getAll = function (serviceIdentifier) {\r\n        var getArgs = this._getAllArgs(serviceIdentifier);\r\n        return this._getButThrowIfAsync(getArgs);\r\n    };\r\n    Container.prototype.getAllAsync = function (serviceIdentifier) {\r\n        var getArgs = this._getAllArgs(serviceIdentifier);\r\n        return this._getAll(getArgs);\r\n    };\r\n    Container.prototype.getAllTagged = function (serviceIdentifier, key, value) {\r\n        var getArgs = this._getNotAllArgs(serviceIdentifier, true, key, value);\r\n        return this._getButThrowIfAsync(getArgs);\r\n    };\r\n    Container.prototype.getAllTaggedAsync = function (serviceIdentifier, key, value) {\r\n        var getArgs = this._getNotAllArgs(serviceIdentifier, true, key, value);\r\n        return this._getAll(getArgs);\r\n    };\r\n    Container.prototype.getAllNamed = function (serviceIdentifier, named) {\r\n        return this.getAllTagged(serviceIdentifier, METADATA_KEY.NAMED_TAG, named);\r\n    };\r\n    Container.prototype.getAllNamedAsync = function (serviceIdentifier, named) {\r\n        return this.getAllTaggedAsync(serviceIdentifier, METADATA_KEY.NAMED_TAG, named);\r\n    };\r\n    Container.prototype.resolve = function (constructorFunction) {\r\n        var isBound = this.isBound(constructorFunction);\r\n        if (!isBound) {\r\n            this.bind(constructorFunction).toSelf();\r\n        }\r\n        var resolved = this.get(constructorFunction);\r\n        if (!isBound) {\r\n            this.unbind(constructorFunction);\r\n        }\r\n        return resolved;\r\n    };\r\n    Container.prototype._preDestroy = function (constructor, instance) {\r\n        var _a, _b;\r\n        if (Reflect.hasMetadata(METADATA_KEY.PRE_DESTROY, constructor)) {\r\n            var data = Reflect.getMetadata(METADATA_KEY.PRE_DESTROY, constructor);\r\n            return (_b = (_a = instance)[data.value]) === null || _b === void 0 ? void 0 : _b.call(_a);\r\n        }\r\n    };\r\n    Container.prototype._removeModuleHandlers = function (moduleId) {\r\n        var moduleActivationsHandlers = this._moduleActivationStore.remove(moduleId);\r\n        this._activations.removeIntersection(moduleActivationsHandlers.onActivations);\r\n        this._deactivations.removeIntersection(moduleActivationsHandlers.onDeactivations);\r\n    };\r\n    Container.prototype._removeModuleBindings = function (moduleId) {\r\n        return this._bindingDictionary.removeByCondition(function (binding) { return binding.moduleId === moduleId; });\r\n    };\r\n    Container.prototype._deactivate = function (binding, instance) {\r\n        var _this = this;\r\n        var constructor = Object.getPrototypeOf(instance).constructor;\r\n        try {\r\n            if (this._deactivations.hasKey(binding.serviceIdentifier)) {\r\n                var result = this._deactivateContainer(instance, this._deactivations.get(binding.serviceIdentifier).values());\r\n                if (isPromise(result)) {\r\n                    return this._handleDeactivationError(result.then(function () { return _this._propagateContainerDeactivationThenBindingAndPreDestroyAsync(binding, instance, constructor); }), constructor);\r\n                }\r\n            }\r\n            var propagateDeactivationResult = this._propagateContainerDeactivationThenBindingAndPreDestroy(binding, instance, constructor);\r\n            if (isPromise(propagateDeactivationResult)) {\r\n                return this._handleDeactivationError(propagateDeactivationResult, constructor);\r\n            }\r\n        }\r\n        catch (ex) {\r\n            if (ex instanceof Error) {\r\n                throw new Error(ERROR_MSGS.ON_DEACTIVATION_ERROR(constructor.name, ex.message));\r\n            }\r\n        }\r\n    };\r\n    Container.prototype._handleDeactivationError = function (asyncResult, constructor) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var ex_1;\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0:\r\n                        _a.trys.push([0, 2, , 3]);\r\n                        return [4, asyncResult];\r\n                    case 1:\r\n                        _a.sent();\r\n                        return [3, 3];\r\n                    case 2:\r\n                        ex_1 = _a.sent();\r\n                        if (ex_1 instanceof Error) {\r\n                            throw new Error(ERROR_MSGS.ON_DEACTIVATION_ERROR(constructor.name, ex_1.message));\r\n                        }\r\n                        return [3, 3];\r\n                    case 3: return [2];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    Container.prototype._deactivateContainer = function (instance, deactivationsIterator) {\r\n        var _this = this;\r\n        var deactivation = deactivationsIterator.next();\r\n        while (deactivation.value) {\r\n            var result = deactivation.value(instance);\r\n            if (isPromise(result)) {\r\n                return result.then(function () {\r\n                    return _this._deactivateContainerAsync(instance, deactivationsIterator);\r\n                });\r\n            }\r\n            deactivation = deactivationsIterator.next();\r\n        }\r\n    };\r\n    Container.prototype._deactivateContainerAsync = function (instance, deactivationsIterator) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var deactivation;\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0:\r\n                        deactivation = deactivationsIterator.next();\r\n                        _a.label = 1;\r\n                    case 1:\r\n                        if (!deactivation.value) return [3, 3];\r\n                        return [4, deactivation.value(instance)];\r\n                    case 2:\r\n                        _a.sent();\r\n                        deactivation = deactivationsIterator.next();\r\n                        return [3, 1];\r\n                    case 3: return [2];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    Container.prototype._getContainerModuleHelpersFactory = function () {\r\n        var _this = this;\r\n        var setModuleId = function (bindingToSyntax, moduleId) {\r\n            bindingToSyntax._binding.moduleId = moduleId;\r\n        };\r\n        var getBindFunction = function (moduleId) {\r\n            return function (serviceIdentifier) {\r\n                var bindingToSyntax = _this.bind(serviceIdentifier);\r\n                setModuleId(bindingToSyntax, moduleId);\r\n                return bindingToSyntax;\r\n            };\r\n        };\r\n        var getUnbindFunction = function () {\r\n            return function (serviceIdentifier) {\r\n                return _this.unbind(serviceIdentifier);\r\n            };\r\n        };\r\n        var getUnbindAsyncFunction = function () {\r\n            return function (serviceIdentifier) {\r\n                return _this.unbindAsync(serviceIdentifier);\r\n            };\r\n        };\r\n        var getIsboundFunction = function () {\r\n            return function (serviceIdentifier) {\r\n                return _this.isBound(serviceIdentifier);\r\n            };\r\n        };\r\n        var getRebindFunction = function (moduleId) {\r\n            return function (serviceIdentifier) {\r\n                var bindingToSyntax = _this.rebind(serviceIdentifier);\r\n                setModuleId(bindingToSyntax, moduleId);\r\n                return bindingToSyntax;\r\n            };\r\n        };\r\n        var getOnActivationFunction = function (moduleId) {\r\n            return function (serviceIdentifier, onActivation) {\r\n                _this._moduleActivationStore.addActivation(moduleId, serviceIdentifier, onActivation);\r\n                _this.onActivation(serviceIdentifier, onActivation);\r\n            };\r\n        };\r\n        var getOnDeactivationFunction = function (moduleId) {\r\n            return function (serviceIdentifier, onDeactivation) {\r\n                _this._moduleActivationStore.addDeactivation(moduleId, serviceIdentifier, onDeactivation);\r\n                _this.onDeactivation(serviceIdentifier, onDeactivation);\r\n            };\r\n        };\r\n        return function (mId) { return ({\r\n            bindFunction: getBindFunction(mId),\r\n            isboundFunction: getIsboundFunction(),\r\n            onActivationFunction: getOnActivationFunction(mId),\r\n            onDeactivationFunction: getOnDeactivationFunction(mId),\r\n            rebindFunction: getRebindFunction(mId),\r\n            unbindFunction: getUnbindFunction(),\r\n            unbindAsyncFunction: getUnbindAsyncFunction()\r\n        }); };\r\n    };\r\n    Container.prototype._getAll = function (getArgs) {\r\n        return Promise.all(this._get(getArgs));\r\n    };\r\n    Container.prototype._get = function (getArgs) {\r\n        var planAndResolveArgs = __assign(__assign({}, getArgs), { contextInterceptor: function (context) { return context; }, targetType: TargetTypeEnum.Variable });\r\n        if (this._middleware) {\r\n            var middlewareResult = this._middleware(planAndResolveArgs);\r\n            if (middlewareResult === undefined || middlewareResult === null) {\r\n                throw new Error(ERROR_MSGS.INVALID_MIDDLEWARE_RETURN);\r\n            }\r\n            return middlewareResult;\r\n        }\r\n        return this._planAndResolve()(planAndResolveArgs);\r\n    };\r\n    Container.prototype._getButThrowIfAsync = function (getArgs) {\r\n        var result = this._get(getArgs);\r\n        if (isPromiseOrContainsPromise(result)) {\r\n            throw new Error(ERROR_MSGS.LAZY_IN_SYNC(getArgs.serviceIdentifier));\r\n        }\r\n        return result;\r\n    };\r\n    Container.prototype._getAllArgs = function (serviceIdentifier) {\r\n        var getAllArgs = {\r\n            avoidConstraints: true,\r\n            isMultiInject: true,\r\n            serviceIdentifier: serviceIdentifier,\r\n        };\r\n        return getAllArgs;\r\n    };\r\n    Container.prototype._getNotAllArgs = function (serviceIdentifier, isMultiInject, key, value) {\r\n        var getNotAllArgs = {\r\n            avoidConstraints: false,\r\n            isMultiInject: isMultiInject,\r\n            serviceIdentifier: serviceIdentifier,\r\n            key: key,\r\n            value: value,\r\n        };\r\n        return getNotAllArgs;\r\n    };\r\n    Container.prototype._planAndResolve = function () {\r\n        var _this = this;\r\n        return function (args) {\r\n            var context = plan(_this._metadataReader, _this, args.isMultiInject, args.targetType, args.serviceIdentifier, args.key, args.value, args.avoidConstraints);\r\n            context = args.contextInterceptor(context);\r\n            var result = resolve(context);\r\n            return result;\r\n        };\r\n    };\r\n    Container.prototype._deactivateIfSingleton = function (binding) {\r\n        var _this = this;\r\n        if (!binding.activated) {\r\n            return;\r\n        }\r\n        if (isPromise(binding.cache)) {\r\n            return binding.cache.then(function (resolved) { return _this._deactivate(binding, resolved); });\r\n        }\r\n        return this._deactivate(binding, binding.cache);\r\n    };\r\n    Container.prototype._deactivateSingletons = function (bindings) {\r\n        for (var _i = 0, bindings_1 = bindings; _i < bindings_1.length; _i++) {\r\n            var binding = bindings_1[_i];\r\n            var result = this._deactivateIfSingleton(binding);\r\n            if (isPromise(result)) {\r\n                throw new Error(ERROR_MSGS.ASYNC_UNBIND_REQUIRED);\r\n            }\r\n        }\r\n    };\r\n    Container.prototype._deactivateSingletonsAsync = function (bindings) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var _this = this;\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0: return [4, Promise.all(bindings.map(function (b) { return _this._deactivateIfSingleton(b); }))];\r\n                    case 1:\r\n                        _a.sent();\r\n                        return [2];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    Container.prototype._propagateContainerDeactivationThenBindingAndPreDestroy = function (binding, instance, constructor) {\r\n        if (this.parent) {\r\n            return this._deactivate.bind(this.parent)(binding, instance);\r\n        }\r\n        else {\r\n            return this._bindingDeactivationAndPreDestroy(binding, instance, constructor);\r\n        }\r\n    };\r\n    Container.prototype._propagateContainerDeactivationThenBindingAndPreDestroyAsync = function (binding, instance, constructor) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0:\r\n                        if (!this.parent) return [3, 2];\r\n                        return [4, this._deactivate.bind(this.parent)(binding, instance)];\r\n                    case 1:\r\n                        _a.sent();\r\n                        return [3, 4];\r\n                    case 2: return [4, this._bindingDeactivationAndPreDestroyAsync(binding, instance, constructor)];\r\n                    case 3:\r\n                        _a.sent();\r\n                        _a.label = 4;\r\n                    case 4: return [2];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    Container.prototype._removeServiceFromDictionary = function (serviceIdentifier) {\r\n        try {\r\n            this._bindingDictionary.remove(serviceIdentifier);\r\n        }\r\n        catch (e) {\r\n            throw new Error(ERROR_MSGS.CANNOT_UNBIND + \" \" + getServiceIdentifierAsString(serviceIdentifier));\r\n        }\r\n    };\r\n    Container.prototype._bindingDeactivationAndPreDestroy = function (binding, instance, constructor) {\r\n        var _this = this;\r\n        if (typeof binding.onDeactivation === 'function') {\r\n            var result = binding.onDeactivation(instance);\r\n            if (isPromise(result)) {\r\n                return result.then(function () { return _this._preDestroy(constructor, instance); });\r\n            }\r\n        }\r\n        return this._preDestroy(constructor, instance);\r\n    };\r\n    Container.prototype._bindingDeactivationAndPreDestroyAsync = function (binding, instance, constructor) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0:\r\n                        if (!(typeof binding.onDeactivation === 'function')) return [3, 2];\r\n                        return [4, binding.onDeactivation(instance)];\r\n                    case 1:\r\n                        _a.sent();\r\n                        _a.label = 2;\r\n                    case 2: return [4, this._preDestroy(constructor, instance)];\r\n                    case 3:\r\n                        _a.sent();\r\n                        return [2];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    return Container;\r\n}());\r\nexport { Container };\r\n","var ContainerSnapshot = (function () {\r\n    function ContainerSnapshot() {\r\n    }\r\n    ContainerSnapshot.of = function (bindings, middleware, activations, deactivations, moduleActivationStore) {\r\n        var snapshot = new ContainerSnapshot();\r\n        snapshot.bindings = bindings;\r\n        snapshot.middleware = middleware;\r\n        snapshot.deactivations = deactivations;\r\n        snapshot.activations = activations;\r\n        snapshot.moduleActivationStore = moduleActivationStore;\r\n        return snapshot;\r\n    };\r\n    return ContainerSnapshot;\r\n}());\r\nexport { ContainerSnapshot };\r\n","import * as ERROR_MSGS from '../constants/error_msgs';\r\nimport { isClonable } from '../utils/clonable';\r\nvar Lookup = (function () {\r\n    function Lookup() {\r\n        this._map = new Map();\r\n    }\r\n    Lookup.prototype.getMap = function () {\r\n        return this._map;\r\n    };\r\n    Lookup.prototype.add = function (serviceIdentifier, value) {\r\n        if (serviceIdentifier === null || serviceIdentifier === undefined) {\r\n            throw new Error(ERROR_MSGS.NULL_ARGUMENT);\r\n        }\r\n        if (value === null || value === undefined) {\r\n            throw new Error(ERROR_MSGS.NULL_ARGUMENT);\r\n        }\r\n        var entry = this._map.get(serviceIdentifier);\r\n        if (entry !== undefined) {\r\n            entry.push(value);\r\n        }\r\n        else {\r\n            this._map.set(serviceIdentifier, [value]);\r\n        }\r\n    };\r\n    Lookup.prototype.get = function (serviceIdentifier) {\r\n        if (serviceIdentifier === null || serviceIdentifier === undefined) {\r\n            throw new Error(ERROR_MSGS.NULL_ARGUMENT);\r\n        }\r\n        var entry = this._map.get(serviceIdentifier);\r\n        if (entry !== undefined) {\r\n            return entry;\r\n        }\r\n        else {\r\n            throw new Error(ERROR_MSGS.KEY_NOT_FOUND);\r\n        }\r\n    };\r\n    Lookup.prototype.remove = function (serviceIdentifier) {\r\n        if (serviceIdentifier === null || serviceIdentifier === undefined) {\r\n            throw new Error(ERROR_MSGS.NULL_ARGUMENT);\r\n        }\r\n        if (!this._map.delete(serviceIdentifier)) {\r\n            throw new Error(ERROR_MSGS.KEY_NOT_FOUND);\r\n        }\r\n    };\r\n    Lookup.prototype.removeIntersection = function (lookup) {\r\n        var _this = this;\r\n        this.traverse(function (serviceIdentifier, value) {\r\n            var lookupActivations = lookup.hasKey(serviceIdentifier) ? lookup.get(serviceIdentifier) : undefined;\r\n            if (lookupActivations !== undefined) {\r\n                var filteredValues = value.filter(function (lookupValue) {\r\n                    return !lookupActivations.some(function (moduleActivation) { return lookupValue === moduleActivation; });\r\n                });\r\n                _this._setValue(serviceIdentifier, filteredValues);\r\n            }\r\n        });\r\n    };\r\n    Lookup.prototype.removeByCondition = function (condition) {\r\n        var _this = this;\r\n        var removals = [];\r\n        this._map.forEach(function (entries, key) {\r\n            var updatedEntries = [];\r\n            for (var _i = 0, entries_1 = entries; _i < entries_1.length; _i++) {\r\n                var entry = entries_1[_i];\r\n                var remove = condition(entry);\r\n                if (remove) {\r\n                    removals.push(entry);\r\n                }\r\n                else {\r\n                    updatedEntries.push(entry);\r\n                }\r\n            }\r\n            _this._setValue(key, updatedEntries);\r\n        });\r\n        return removals;\r\n    };\r\n    Lookup.prototype.hasKey = function (serviceIdentifier) {\r\n        if (serviceIdentifier === null || serviceIdentifier === undefined) {\r\n            throw new Error(ERROR_MSGS.NULL_ARGUMENT);\r\n        }\r\n        return this._map.has(serviceIdentifier);\r\n    };\r\n    Lookup.prototype.clone = function () {\r\n        var copy = new Lookup();\r\n        this._map.forEach(function (value, key) {\r\n            value.forEach(function (b) { return copy.add(key, isClonable(b) ? b.clone() : b); });\r\n        });\r\n        return copy;\r\n    };\r\n    Lookup.prototype.traverse = function (func) {\r\n        this._map.forEach(function (value, key) {\r\n            func(key, value);\r\n        });\r\n    };\r\n    Lookup.prototype._setValue = function (serviceIdentifier, value) {\r\n        if (value.length > 0) {\r\n            this._map.set(serviceIdentifier, value);\r\n        }\r\n        else {\r\n            this._map.delete(serviceIdentifier);\r\n        }\r\n    };\r\n    return Lookup;\r\n}());\r\nexport { Lookup };\r\n","import { Lookup } from './lookup';\r\nvar ModuleActivationStore = (function () {\r\n    function ModuleActivationStore() {\r\n        this._map = new Map();\r\n    }\r\n    ModuleActivationStore.prototype.remove = function (moduleId) {\r\n        if (this._map.has(moduleId)) {\r\n            var handlers = this._map.get(moduleId);\r\n            this._map.delete(moduleId);\r\n            return handlers;\r\n        }\r\n        return this._getEmptyHandlersStore();\r\n    };\r\n    ModuleActivationStore.prototype.addDeactivation = function (moduleId, serviceIdentifier, onDeactivation) {\r\n        this._getModuleActivationHandlers(moduleId)\r\n            .onDeactivations.add(serviceIdentifier, onDeactivation);\r\n    };\r\n    ModuleActivationStore.prototype.addActivation = function (moduleId, serviceIdentifier, onActivation) {\r\n        this._getModuleActivationHandlers(moduleId)\r\n            .onActivations.add(serviceIdentifier, onActivation);\r\n    };\r\n    ModuleActivationStore.prototype.clone = function () {\r\n        var clone = new ModuleActivationStore();\r\n        this._map.forEach(function (handlersStore, moduleId) {\r\n            clone._map.set(moduleId, {\r\n                onActivations: handlersStore.onActivations.clone(),\r\n                onDeactivations: handlersStore.onDeactivations.clone(),\r\n            });\r\n        });\r\n        return clone;\r\n    };\r\n    ModuleActivationStore.prototype._getModuleActivationHandlers = function (moduleId) {\r\n        var moduleActivationHandlers = this._map.get(moduleId);\r\n        if (moduleActivationHandlers === undefined) {\r\n            moduleActivationHandlers = this._getEmptyHandlersStore();\r\n            this._map.set(moduleId, moduleActivationHandlers);\r\n        }\r\n        return moduleActivationHandlers;\r\n    };\r\n    ModuleActivationStore.prototype._getEmptyHandlersStore = function () {\r\n        var handlersStore = {\r\n            onActivations: new Lookup(),\r\n            onDeactivations: new Lookup()\r\n        };\r\n        return handlersStore;\r\n    };\r\n    return ModuleActivationStore;\r\n}());\r\nexport { ModuleActivationStore };\r\n","import { id } from '../utils/id';\r\nvar Context = (function () {\r\n    function Context(container) {\r\n        this.id = id();\r\n        this.container = container;\r\n    }\r\n    Context.prototype.addPlan = function (plan) {\r\n        this.plan = plan;\r\n    };\r\n    Context.prototype.setCurrentRequest = function (currentRequest) {\r\n        this.currentRequest = currentRequest;\r\n    };\r\n    return Context;\r\n}());\r\nexport { Context };\r\n","import * as METADATA_KEY from '../constants/metadata_keys';\r\nvar Metadata = (function () {\r\n    function Metadata(key, value) {\r\n        this.key = key;\r\n        this.value = value;\r\n    }\r\n    Metadata.prototype.toString = function () {\r\n        if (this.key === METADATA_KEY.NAMED_TAG) {\r\n            return \"named: \" + String(this.value).toString() + \" \";\r\n        }\r\n        else {\r\n            return \"tagged: { key:\" + this.key.toString() + \", value: \" + String(this.value) + \" }\";\r\n        }\r\n    };\r\n    return Metadata;\r\n}());\r\nexport { Metadata };\r\n","import * as METADATA_KEY from '../constants/metadata_keys';\r\nvar MetadataReader = (function () {\r\n    function MetadataReader() {\r\n    }\r\n    MetadataReader.prototype.getConstructorMetadata = function (constructorFunc) {\r\n        var compilerGeneratedMetadata = Reflect.getMetadata(METADATA_KEY.PARAM_TYPES, constructorFunc);\r\n        var userGeneratedMetadata = Reflect.getMetadata(METADATA_KEY.TAGGED, constructorFunc);\r\n        return {\r\n            compilerGeneratedMetadata: compilerGeneratedMetadata,\r\n            userGeneratedMetadata: userGeneratedMetadata || {}\r\n        };\r\n    };\r\n    MetadataReader.prototype.getPropertiesMetadata = function (constructorFunc) {\r\n        var userGeneratedMetadata = Reflect.getMetadata(METADATA_KEY.TAGGED_PROP, constructorFunc) || [];\r\n        return userGeneratedMetadata;\r\n    };\r\n    return MetadataReader;\r\n}());\r\nexport { MetadataReader };\r\n","var Plan = (function () {\r\n    function Plan(parentContext, rootRequest) {\r\n        this.parentContext = parentContext;\r\n        this.rootRequest = rootRequest;\r\n    }\r\n    return Plan;\r\n}());\r\nexport { Plan };\r\n","import { BindingCount } from '../bindings/binding_count';\r\nimport * as ERROR_MSGS from '../constants/error_msgs';\r\nimport { BindingTypeEnum, TargetTypeEnum } from '../constants/literal_types';\r\nimport * as METADATA_KEY from '../constants/metadata_keys';\r\nimport { isStackOverflowExeption } from '../utils/exceptions';\r\nimport { circularDependencyToException, getServiceIdentifierAsString, listMetadataForTarget, listRegisteredBindingsForServiceIdentifier } from '../utils/serialization';\r\nimport { Context } from './context';\r\nimport { Metadata } from './metadata';\r\nimport { Plan } from './plan';\r\nimport { getBaseClassDependencyCount, getDependencies, getFunctionName } from './reflection_utils';\r\nimport { Request } from './request';\r\nimport { Target } from './target';\r\nfunction getBindingDictionary(cntnr) {\r\n    return cntnr._bindingDictionary;\r\n}\r\nfunction _createTarget(isMultiInject, targetType, serviceIdentifier, name, key, value) {\r\n    var metadataKey = isMultiInject ? METADATA_KEY.MULTI_INJECT_TAG : METADATA_KEY.INJECT_TAG;\r\n    var injectMetadata = new Metadata(metadataKey, serviceIdentifier);\r\n    var target = new Target(targetType, name, serviceIdentifier, injectMetadata);\r\n    if (key !== undefined) {\r\n        var tagMetadata = new Metadata(key, value);\r\n        target.metadata.push(tagMetadata);\r\n    }\r\n    return target;\r\n}\r\nfunction _getActiveBindings(metadataReader, avoidConstraints, context, parentRequest, target) {\r\n    var bindings = getBindings(context.container, target.serviceIdentifier);\r\n    var activeBindings = [];\r\n    if (bindings.length === BindingCount.NoBindingsAvailable &&\r\n        context.container.options.autoBindInjectable &&\r\n        typeof target.serviceIdentifier === 'function' &&\r\n        metadataReader.getConstructorMetadata(target.serviceIdentifier).compilerGeneratedMetadata) {\r\n        context.container.bind(target.serviceIdentifier).toSelf();\r\n        bindings = getBindings(context.container, target.serviceIdentifier);\r\n    }\r\n    if (!avoidConstraints) {\r\n        activeBindings = bindings.filter(function (binding) {\r\n            var request = new Request(binding.serviceIdentifier, context, parentRequest, binding, target);\r\n            return binding.constraint(request);\r\n        });\r\n    }\r\n    else {\r\n        activeBindings = bindings;\r\n    }\r\n    _validateActiveBindingCount(target.serviceIdentifier, activeBindings, target, context.container);\r\n    return activeBindings;\r\n}\r\nfunction _validateActiveBindingCount(serviceIdentifier, bindings, target, container) {\r\n    switch (bindings.length) {\r\n        case BindingCount.NoBindingsAvailable:\r\n            if (target.isOptional()) {\r\n                return bindings;\r\n            }\r\n            else {\r\n                var serviceIdentifierString = getServiceIdentifierAsString(serviceIdentifier);\r\n                var msg = ERROR_MSGS.NOT_REGISTERED;\r\n                msg += listMetadataForTarget(serviceIdentifierString, target);\r\n                msg += listRegisteredBindingsForServiceIdentifier(container, serviceIdentifierString, getBindings);\r\n                throw new Error(msg);\r\n            }\r\n        case BindingCount.OnlyOneBindingAvailable:\r\n            return bindings;\r\n        case BindingCount.MultipleBindingsAvailable:\r\n        default:\r\n            if (!target.isArray()) {\r\n                var serviceIdentifierString = getServiceIdentifierAsString(serviceIdentifier);\r\n                var msg = ERROR_MSGS.AMBIGUOUS_MATCH + \" \" + serviceIdentifierString;\r\n                msg += listRegisteredBindingsForServiceIdentifier(container, serviceIdentifierString, getBindings);\r\n                throw new Error(msg);\r\n            }\r\n            else {\r\n                return bindings;\r\n            }\r\n    }\r\n}\r\nfunction _createSubRequests(metadataReader, avoidConstraints, serviceIdentifier, context, parentRequest, target) {\r\n    var activeBindings;\r\n    var childRequest;\r\n    if (parentRequest === null) {\r\n        activeBindings = _getActiveBindings(metadataReader, avoidConstraints, context, null, target);\r\n        childRequest = new Request(serviceIdentifier, context, null, activeBindings, target);\r\n        var thePlan = new Plan(context, childRequest);\r\n        context.addPlan(thePlan);\r\n    }\r\n    else {\r\n        activeBindings = _getActiveBindings(metadataReader, avoidConstraints, context, parentRequest, target);\r\n        childRequest = parentRequest.addChildRequest(target.serviceIdentifier, activeBindings, target);\r\n    }\r\n    activeBindings.forEach(function (binding) {\r\n        var subChildRequest = null;\r\n        if (target.isArray()) {\r\n            subChildRequest = childRequest.addChildRequest(binding.serviceIdentifier, binding, target);\r\n        }\r\n        else {\r\n            if (binding.cache) {\r\n                return;\r\n            }\r\n            subChildRequest = childRequest;\r\n        }\r\n        if (binding.type === BindingTypeEnum.Instance && binding.implementationType !== null) {\r\n            var dependencies = getDependencies(metadataReader, binding.implementationType);\r\n            if (!context.container.options.skipBaseClassChecks) {\r\n                var baseClassDependencyCount = getBaseClassDependencyCount(metadataReader, binding.implementationType);\r\n                if (dependencies.length < baseClassDependencyCount) {\r\n                    var error = ERROR_MSGS.ARGUMENTS_LENGTH_MISMATCH(getFunctionName(binding.implementationType));\r\n                    throw new Error(error);\r\n                }\r\n            }\r\n            dependencies.forEach(function (dependency) {\r\n                _createSubRequests(metadataReader, false, dependency.serviceIdentifier, context, subChildRequest, dependency);\r\n            });\r\n        }\r\n    });\r\n}\r\nfunction getBindings(container, serviceIdentifier) {\r\n    var bindings = [];\r\n    var bindingDictionary = getBindingDictionary(container);\r\n    if (bindingDictionary.hasKey(serviceIdentifier)) {\r\n        bindings = bindingDictionary.get(serviceIdentifier);\r\n    }\r\n    else if (container.parent !== null) {\r\n        bindings = getBindings(container.parent, serviceIdentifier);\r\n    }\r\n    return bindings;\r\n}\r\nfunction plan(metadataReader, container, isMultiInject, targetType, serviceIdentifier, key, value, avoidConstraints) {\r\n    if (avoidConstraints === void 0) { avoidConstraints = false; }\r\n    var context = new Context(container);\r\n    var target = _createTarget(isMultiInject, targetType, serviceIdentifier, '', key, value);\r\n    try {\r\n        _createSubRequests(metadataReader, avoidConstraints, serviceIdentifier, context, null, target);\r\n        return context;\r\n    }\r\n    catch (error) {\r\n        if (isStackOverflowExeption(error)) {\r\n            circularDependencyToException(context.plan.rootRequest);\r\n        }\r\n        throw error;\r\n    }\r\n}\r\nfunction createMockRequest(container, serviceIdentifier, key, value) {\r\n    var target = new Target(TargetTypeEnum.Variable, '', serviceIdentifier, new Metadata(key, value));\r\n    var context = new Context(container);\r\n    var request = new Request(serviceIdentifier, context, null, [], target);\r\n    return request;\r\n}\r\nexport { plan, createMockRequest, getBindingDictionary };\r\n","var QueryableString = (function () {\r\n    function QueryableString(str) {\r\n        this.str = str;\r\n    }\r\n    QueryableString.prototype.startsWith = function (searchString) {\r\n        return this.str.indexOf(searchString) === 0;\r\n    };\r\n    QueryableString.prototype.endsWith = function (searchString) {\r\n        var reverseString = '';\r\n        var reverseSearchString = searchString.split('').reverse().join('');\r\n        reverseString = this.str.split('').reverse().join('');\r\n        return this.startsWith.call({ str: reverseString }, reverseSearchString);\r\n    };\r\n    QueryableString.prototype.contains = function (searchString) {\r\n        return (this.str.indexOf(searchString) !== -1);\r\n    };\r\n    QueryableString.prototype.equals = function (compareString) {\r\n        return this.str === compareString;\r\n    };\r\n    QueryableString.prototype.value = function () {\r\n        return this.str;\r\n    };\r\n    return QueryableString;\r\n}());\r\nexport { QueryableString };\r\n","var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {\r\n    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\r\n        if (ar || !(i in from)) {\r\n            if (!ar) ar = Array.prototype.slice.call(from, 0, i);\r\n            ar[i] = from[i];\r\n        }\r\n    }\r\n    return to.concat(ar || Array.prototype.slice.call(from));\r\n};\r\nimport { LazyServiceIdentifier } from '../annotation/lazy_service_identifier';\r\nimport * as ERROR_MSGS from '../constants/error_msgs';\r\nimport { TargetTypeEnum } from '../constants/literal_types';\r\nimport * as METADATA_KEY from '../constants/metadata_keys';\r\nimport { getFunctionName } from '../utils/serialization';\r\nimport { Target } from './target';\r\nfunction getDependencies(metadataReader, func) {\r\n    var constructorName = getFunctionName(func);\r\n    return getTargets(metadataReader, constructorName, func, false);\r\n}\r\nfunction getTargets(metadataReader, constructorName, func, isBaseClass) {\r\n    var metadata = metadataReader.getConstructorMetadata(func);\r\n    var serviceIdentifiers = metadata.compilerGeneratedMetadata;\r\n    if (serviceIdentifiers === undefined) {\r\n        var msg = ERROR_MSGS.MISSING_INJECTABLE_ANNOTATION + \" \" + constructorName + \".\";\r\n        throw new Error(msg);\r\n    }\r\n    var constructorArgsMetadata = metadata.userGeneratedMetadata;\r\n    var keys = Object.keys(constructorArgsMetadata);\r\n    var hasUserDeclaredUnknownInjections = (func.length === 0 && keys.length > 0);\r\n    var hasOptionalParameters = keys.length > func.length;\r\n    var iterations = (hasUserDeclaredUnknownInjections || hasOptionalParameters) ? keys.length : func.length;\r\n    var constructorTargets = getConstructorArgsAsTargets(isBaseClass, constructorName, serviceIdentifiers, constructorArgsMetadata, iterations);\r\n    var propertyTargets = getClassPropsAsTargets(metadataReader, func, constructorName);\r\n    var targets = __spreadArray(__spreadArray([], constructorTargets, true), propertyTargets, true);\r\n    return targets;\r\n}\r\nfunction getConstructorArgsAsTarget(index, isBaseClass, constructorName, serviceIdentifiers, constructorArgsMetadata) {\r\n    var targetMetadata = constructorArgsMetadata[index.toString()] || [];\r\n    var metadata = formatTargetMetadata(targetMetadata);\r\n    var isManaged = metadata.unmanaged !== true;\r\n    var serviceIdentifier = serviceIdentifiers[index];\r\n    var injectIdentifier = metadata.inject || metadata.multiInject;\r\n    serviceIdentifier = (injectIdentifier ? injectIdentifier : serviceIdentifier);\r\n    if (serviceIdentifier instanceof LazyServiceIdentifier) {\r\n        serviceIdentifier = serviceIdentifier.unwrap();\r\n    }\r\n    if (isManaged) {\r\n        var isObject = serviceIdentifier === Object;\r\n        var isFunction = serviceIdentifier === Function;\r\n        var isUndefined = serviceIdentifier === undefined;\r\n        var isUnknownType = isObject || isFunction || isUndefined;\r\n        if (!isBaseClass && isUnknownType) {\r\n            var msg = ERROR_MSGS.MISSING_INJECT_ANNOTATION + \" argument \" + index + \" in class \" + constructorName + \".\";\r\n            throw new Error(msg);\r\n        }\r\n        var target = new Target(TargetTypeEnum.ConstructorArgument, metadata.targetName, serviceIdentifier);\r\n        target.metadata = targetMetadata;\r\n        return target;\r\n    }\r\n    return null;\r\n}\r\nfunction getConstructorArgsAsTargets(isBaseClass, constructorName, serviceIdentifiers, constructorArgsMetadata, iterations) {\r\n    var targets = [];\r\n    for (var i = 0; i < iterations; i++) {\r\n        var index = i;\r\n        var target = getConstructorArgsAsTarget(index, isBaseClass, constructorName, serviceIdentifiers, constructorArgsMetadata);\r\n        if (target !== null) {\r\n            targets.push(target);\r\n        }\r\n    }\r\n    return targets;\r\n}\r\nfunction _getServiceIdentifierForProperty(inject, multiInject, propertyName, className) {\r\n    var serviceIdentifier = (inject || multiInject);\r\n    if (serviceIdentifier === undefined) {\r\n        var msg = ERROR_MSGS.MISSING_INJECTABLE_ANNOTATION + \" for property \" + String(propertyName) + \" in class \" + className + \".\";\r\n        throw new Error(msg);\r\n    }\r\n    return serviceIdentifier;\r\n}\r\nfunction getClassPropsAsTargets(metadataReader, constructorFunc, constructorName) {\r\n    var classPropsMetadata = metadataReader.getPropertiesMetadata(constructorFunc);\r\n    var targets = [];\r\n    var symbolKeys = Object.getOwnPropertySymbols(classPropsMetadata);\r\n    var stringKeys = Object.keys(classPropsMetadata);\r\n    var keys = stringKeys.concat(symbolKeys);\r\n    for (var _i = 0, keys_1 = keys; _i < keys_1.length; _i++) {\r\n        var key = keys_1[_i];\r\n        var targetMetadata = classPropsMetadata[key];\r\n        var metadata = formatTargetMetadata(targetMetadata);\r\n        var identifier = metadata.targetName || key;\r\n        var serviceIdentifier = _getServiceIdentifierForProperty(metadata.inject, metadata.multiInject, key, constructorName);\r\n        var target = new Target(TargetTypeEnum.ClassProperty, identifier, serviceIdentifier);\r\n        target.metadata = targetMetadata;\r\n        targets.push(target);\r\n    }\r\n    var baseConstructor = Object.getPrototypeOf(constructorFunc.prototype).constructor;\r\n    if (baseConstructor !== Object) {\r\n        var baseTargets = getClassPropsAsTargets(metadataReader, baseConstructor, constructorName);\r\n        targets = __spreadArray(__spreadArray([], targets, true), baseTargets, true);\r\n    }\r\n    return targets;\r\n}\r\nfunction getBaseClassDependencyCount(metadataReader, func) {\r\n    var baseConstructor = Object.getPrototypeOf(func.prototype).constructor;\r\n    if (baseConstructor !== Object) {\r\n        var baseConstructorName = getFunctionName(baseConstructor);\r\n        var targets = getTargets(metadataReader, baseConstructorName, baseConstructor, true);\r\n        var metadata = targets.map(function (t) { return t.metadata.filter(function (m) { return m.key === METADATA_KEY.UNMANAGED_TAG; }); });\r\n        var unmanagedCount = [].concat.apply([], metadata).length;\r\n        var dependencyCount = targets.length - unmanagedCount;\r\n        if (dependencyCount > 0) {\r\n            return dependencyCount;\r\n        }\r\n        else {\r\n            return getBaseClassDependencyCount(metadataReader, baseConstructor);\r\n        }\r\n    }\r\n    else {\r\n        return 0;\r\n    }\r\n}\r\nfunction formatTargetMetadata(targetMetadata) {\r\n    var targetMetadataMap = {};\r\n    targetMetadata.forEach(function (m) {\r\n        targetMetadataMap[m.key.toString()] = m.value;\r\n    });\r\n    return {\r\n        inject: targetMetadataMap[METADATA_KEY.INJECT_TAG],\r\n        multiInject: targetMetadataMap[METADATA_KEY.MULTI_INJECT_TAG],\r\n        targetName: targetMetadataMap[METADATA_KEY.NAME_TAG],\r\n        unmanaged: targetMetadataMap[METADATA_KEY.UNMANAGED_TAG]\r\n    };\r\n}\r\nexport { getDependencies, getBaseClassDependencyCount, getFunctionName };\r\n","import { id } from '../utils/id';\r\nvar Request = (function () {\r\n    function Request(serviceIdentifier, parentContext, parentRequest, bindings, target) {\r\n        this.id = id();\r\n        this.serviceIdentifier = serviceIdentifier;\r\n        this.parentContext = parentContext;\r\n        this.parentRequest = parentRequest;\r\n        this.target = target;\r\n        this.childRequests = [];\r\n        this.bindings = (Array.isArray(bindings) ? bindings : [bindings]);\r\n        this.requestScope = parentRequest === null\r\n            ? new Map()\r\n            : null;\r\n    }\r\n    Request.prototype.addChildRequest = function (serviceIdentifier, bindings, target) {\r\n        var child = new Request(serviceIdentifier, this.parentContext, this, bindings, target);\r\n        this.childRequests.push(child);\r\n        return child;\r\n    };\r\n    return Request;\r\n}());\r\nexport { Request };\r\n","import * as METADATA_KEY from '../constants/metadata_keys';\r\nimport { id } from '../utils/id';\r\nimport { getSymbolDescription } from '../utils/serialization';\r\nimport { Metadata } from './metadata';\r\nimport { QueryableString } from './queryable_string';\r\nvar Target = (function () {\r\n    function Target(type, identifier, serviceIdentifier, namedOrTagged) {\r\n        this.id = id();\r\n        this.type = type;\r\n        this.serviceIdentifier = serviceIdentifier;\r\n        var queryableName = typeof identifier === 'symbol' ? getSymbolDescription(identifier) : identifier;\r\n        this.name = new QueryableString(queryableName || '');\r\n        this.identifier = identifier;\r\n        this.metadata = new Array();\r\n        var metadataItem = null;\r\n        if (typeof namedOrTagged === 'string') {\r\n            metadataItem = new Metadata(METADATA_KEY.NAMED_TAG, namedOrTagged);\r\n        }\r\n        else if (namedOrTagged instanceof Metadata) {\r\n            metadataItem = namedOrTagged;\r\n        }\r\n        if (metadataItem !== null) {\r\n            this.metadata.push(metadataItem);\r\n        }\r\n    }\r\n    Target.prototype.hasTag = function (key) {\r\n        for (var _i = 0, _a = this.metadata; _i < _a.length; _i++) {\r\n            var m = _a[_i];\r\n            if (m.key === key) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    };\r\n    Target.prototype.isArray = function () {\r\n        return this.hasTag(METADATA_KEY.MULTI_INJECT_TAG);\r\n    };\r\n    Target.prototype.matchesArray = function (name) {\r\n        return this.matchesTag(METADATA_KEY.MULTI_INJECT_TAG)(name);\r\n    };\r\n    Target.prototype.isNamed = function () {\r\n        return this.hasTag(METADATA_KEY.NAMED_TAG);\r\n    };\r\n    Target.prototype.isTagged = function () {\r\n        return this.metadata.some(function (metadata) { return METADATA_KEY.NON_CUSTOM_TAG_KEYS.every(function (key) { return metadata.key !== key; }); });\r\n    };\r\n    Target.prototype.isOptional = function () {\r\n        return this.matchesTag(METADATA_KEY.OPTIONAL_TAG)(true);\r\n    };\r\n    Target.prototype.getNamedTag = function () {\r\n        if (this.isNamed()) {\r\n            return this.metadata.filter(function (m) { return m.key === METADATA_KEY.NAMED_TAG; })[0];\r\n        }\r\n        return null;\r\n    };\r\n    Target.prototype.getCustomTags = function () {\r\n        if (this.isTagged()) {\r\n            return this.metadata.filter(function (metadata) { return METADATA_KEY.NON_CUSTOM_TAG_KEYS.every(function (key) { return metadata.key !== key; }); });\r\n        }\r\n        else {\r\n            return null;\r\n        }\r\n    };\r\n    Target.prototype.matchesNamedTag = function (name) {\r\n        return this.matchesTag(METADATA_KEY.NAMED_TAG)(name);\r\n    };\r\n    Target.prototype.matchesTag = function (key) {\r\n        var _this = this;\r\n        return function (value) {\r\n            for (var _i = 0, _a = _this.metadata; _i < _a.length; _i++) {\r\n                var m = _a[_i];\r\n                if (m.key === key && m.value === value) {\r\n                    return true;\r\n                }\r\n            }\r\n            return false;\r\n        };\r\n    };\r\n    return Target;\r\n}());\r\nexport { Target };\r\n","var __assign = (this && this.__assign) || function () {\r\n    __assign = Object.assign || function(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\r\n                t[p] = s[p];\r\n        }\r\n        return t;\r\n    };\r\n    return __assign.apply(this, arguments);\r\n};\r\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n};\r\nvar __generator = (this && this.__generator) || function (thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n};\r\nvar __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {\r\n    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\r\n        if (ar || !(i in from)) {\r\n            if (!ar) ar = Array.prototype.slice.call(from, 0, i);\r\n            ar[i] = from[i];\r\n        }\r\n    }\r\n    return to.concat(ar || Array.prototype.slice.call(from));\r\n};\r\nimport { ON_DEACTIVATION_ERROR, POST_CONSTRUCT_ERROR, PRE_DESTROY_ERROR } from '../constants/error_msgs';\r\nimport { BindingScopeEnum, TargetTypeEnum } from '../constants/literal_types';\r\nimport * as METADATA_KEY from '../constants/metadata_keys';\r\nimport { isPromise, isPromiseOrContainsPromise } from '../utils/async';\r\nfunction _resolveRequests(childRequests, resolveRequest) {\r\n    return childRequests.reduce(function (resolvedRequests, childRequest) {\r\n        var injection = resolveRequest(childRequest);\r\n        var targetType = childRequest.target.type;\r\n        if (targetType === TargetTypeEnum.ConstructorArgument) {\r\n            resolvedRequests.constructorInjections.push(injection);\r\n        }\r\n        else {\r\n            resolvedRequests.propertyRequests.push(childRequest);\r\n            resolvedRequests.propertyInjections.push(injection);\r\n        }\r\n        if (!resolvedRequests.isAsync) {\r\n            resolvedRequests.isAsync = isPromiseOrContainsPromise(injection);\r\n        }\r\n        return resolvedRequests;\r\n    }, { constructorInjections: [], propertyInjections: [], propertyRequests: [], isAsync: false });\r\n}\r\nfunction _createInstance(constr, childRequests, resolveRequest) {\r\n    var result;\r\n    if (childRequests.length > 0) {\r\n        var resolved = _resolveRequests(childRequests, resolveRequest);\r\n        var createInstanceWithInjectionsArg = __assign(__assign({}, resolved), { constr: constr });\r\n        if (resolved.isAsync) {\r\n            result = createInstanceWithInjectionsAsync(createInstanceWithInjectionsArg);\r\n        }\r\n        else {\r\n            result = createInstanceWithInjections(createInstanceWithInjectionsArg);\r\n        }\r\n    }\r\n    else {\r\n        result = new constr();\r\n    }\r\n    return result;\r\n}\r\nfunction createInstanceWithInjections(args) {\r\n    var _a;\r\n    var instance = new ((_a = args.constr).bind.apply(_a, __spreadArray([void 0], args.constructorInjections, false)))();\r\n    args.propertyRequests.forEach(function (r, index) {\r\n        var property = r.target.identifier;\r\n        var injection = args.propertyInjections[index];\r\n        if (!r.target.isOptional() || injection !== undefined) {\r\n            instance[property] = injection;\r\n        }\r\n    });\r\n    return instance;\r\n}\r\nfunction createInstanceWithInjectionsAsync(args) {\r\n    return __awaiter(this, void 0, void 0, function () {\r\n        var constructorInjections, propertyInjections;\r\n        return __generator(this, function (_a) {\r\n            switch (_a.label) {\r\n                case 0: return [4, possiblyWaitInjections(args.constructorInjections)];\r\n                case 1:\r\n                    constructorInjections = _a.sent();\r\n                    return [4, possiblyWaitInjections(args.propertyInjections)];\r\n                case 2:\r\n                    propertyInjections = _a.sent();\r\n                    return [2, createInstanceWithInjections(__assign(__assign({}, args), { constructorInjections: constructorInjections, propertyInjections: propertyInjections }))];\r\n            }\r\n        });\r\n    });\r\n}\r\nfunction possiblyWaitInjections(possiblePromiseinjections) {\r\n    return __awaiter(this, void 0, void 0, function () {\r\n        var injections, _i, possiblePromiseinjections_1, injection;\r\n        return __generator(this, function (_a) {\r\n            injections = [];\r\n            for (_i = 0, possiblePromiseinjections_1 = possiblePromiseinjections; _i < possiblePromiseinjections_1.length; _i++) {\r\n                injection = possiblePromiseinjections_1[_i];\r\n                if (Array.isArray(injection)) {\r\n                    injections.push(Promise.all(injection));\r\n                }\r\n                else {\r\n                    injections.push(injection);\r\n                }\r\n            }\r\n            return [2, Promise.all(injections)];\r\n        });\r\n    });\r\n}\r\nfunction _getInstanceAfterPostConstruct(constr, result) {\r\n    var postConstructResult = _postConstruct(constr, result);\r\n    if (isPromise(postConstructResult)) {\r\n        return postConstructResult.then(function () { return result; });\r\n    }\r\n    else {\r\n        return result;\r\n    }\r\n}\r\nfunction _postConstruct(constr, instance) {\r\n    var _a, _b;\r\n    if (Reflect.hasMetadata(METADATA_KEY.POST_CONSTRUCT, constr)) {\r\n        var data = Reflect.getMetadata(METADATA_KEY.POST_CONSTRUCT, constr);\r\n        try {\r\n            return (_b = (_a = instance)[data.value]) === null || _b === void 0 ? void 0 : _b.call(_a);\r\n        }\r\n        catch (e) {\r\n            if (e instanceof Error) {\r\n                throw new Error(POST_CONSTRUCT_ERROR(constr.name, e.message));\r\n            }\r\n        }\r\n    }\r\n}\r\nfunction _validateInstanceResolution(binding, constr) {\r\n    if (binding.scope !== BindingScopeEnum.Singleton) {\r\n        _throwIfHandlingDeactivation(binding, constr);\r\n    }\r\n}\r\nfunction _throwIfHandlingDeactivation(binding, constr) {\r\n    var scopeErrorMessage = \"Class cannot be instantiated in \" + (binding.scope === BindingScopeEnum.Request ?\r\n        'request' :\r\n        'transient') + \" scope.\";\r\n    if (typeof binding.onDeactivation === 'function') {\r\n        throw new Error(ON_DEACTIVATION_ERROR(constr.name, scopeErrorMessage));\r\n    }\r\n    if (Reflect.hasMetadata(METADATA_KEY.PRE_DESTROY, constr)) {\r\n        throw new Error(PRE_DESTROY_ERROR(constr.name, scopeErrorMessage));\r\n    }\r\n}\r\nfunction resolveInstance(binding, constr, childRequests, resolveRequest) {\r\n    _validateInstanceResolution(binding, constr);\r\n    var result = _createInstance(constr, childRequests, resolveRequest);\r\n    if (isPromise(result)) {\r\n        return result.then(function (resolvedResult) { return _getInstanceAfterPostConstruct(constr, resolvedResult); });\r\n    }\r\n    else {\r\n        return _getInstanceAfterPostConstruct(constr, result);\r\n    }\r\n}\r\nexport { resolveInstance };\r\n","var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n};\r\nvar __generator = (this && this.__generator) || function (thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n};\r\nimport * as ERROR_MSGS from '../constants/error_msgs';\r\nimport { BindingTypeEnum } from '../constants/literal_types';\r\nimport { getBindingDictionary } from '../planning/planner';\r\nimport { saveToScope, tryGetFromScope } from '../scope/scope';\r\nimport { isPromise } from '../utils/async';\r\nimport { getFactoryDetails, ensureFullyBound } from '../utils/binding_utils';\r\nimport { tryAndThrowErrorIfStackOverflow } from '../utils/exceptions';\r\nimport { resolveInstance } from './instantiation';\r\nvar _resolveRequest = function (requestScope) {\r\n    return function (request) {\r\n        request.parentContext.setCurrentRequest(request);\r\n        var bindings = request.bindings;\r\n        var childRequests = request.childRequests;\r\n        var targetIsAnArray = request.target && request.target.isArray();\r\n        var targetParentIsNotAnArray = !request.parentRequest ||\r\n            !request.parentRequest.target ||\r\n            !request.target ||\r\n            !request.parentRequest.target.matchesArray(request.target.serviceIdentifier);\r\n        if (targetIsAnArray && targetParentIsNotAnArray) {\r\n            return childRequests.map(function (childRequest) {\r\n                var _f = _resolveRequest(requestScope);\r\n                return _f(childRequest);\r\n            });\r\n        }\r\n        else {\r\n            if (request.target.isOptional() && bindings.length === 0) {\r\n                return undefined;\r\n            }\r\n            var binding = bindings[0];\r\n            return _resolveBinding(requestScope, request, binding);\r\n        }\r\n    };\r\n};\r\nvar _resolveFactoryFromBinding = function (binding, context) {\r\n    var factoryDetails = getFactoryDetails(binding);\r\n    return tryAndThrowErrorIfStackOverflow(function () { return factoryDetails.factory.bind(binding)(context); }, function () { return new Error(ERROR_MSGS.CIRCULAR_DEPENDENCY_IN_FACTORY(factoryDetails.factoryType, context.currentRequest.serviceIdentifier.toString())); });\r\n};\r\nvar _getResolvedFromBinding = function (requestScope, request, binding) {\r\n    var result;\r\n    var childRequests = request.childRequests;\r\n    ensureFullyBound(binding);\r\n    switch (binding.type) {\r\n        case BindingTypeEnum.ConstantValue:\r\n        case BindingTypeEnum.Function:\r\n            result = binding.cache;\r\n            break;\r\n        case BindingTypeEnum.Constructor:\r\n            result = binding.implementationType;\r\n            break;\r\n        case BindingTypeEnum.Instance:\r\n            result = resolveInstance(binding, binding.implementationType, childRequests, _resolveRequest(requestScope));\r\n            break;\r\n        default:\r\n            result = _resolveFactoryFromBinding(binding, request.parentContext);\r\n    }\r\n    return result;\r\n};\r\nvar _resolveInScope = function (requestScope, binding, resolveFromBinding) {\r\n    var result = tryGetFromScope(requestScope, binding);\r\n    if (result !== null) {\r\n        return result;\r\n    }\r\n    result = resolveFromBinding();\r\n    saveToScope(requestScope, binding, result);\r\n    return result;\r\n};\r\nvar _resolveBinding = function (requestScope, request, binding) {\r\n    return _resolveInScope(requestScope, binding, function () {\r\n        var result = _getResolvedFromBinding(requestScope, request, binding);\r\n        if (isPromise(result)) {\r\n            result = result.then(function (resolved) { return _onActivation(request, binding, resolved); });\r\n        }\r\n        else {\r\n            result = _onActivation(request, binding, result);\r\n        }\r\n        return result;\r\n    });\r\n};\r\nfunction _onActivation(request, binding, resolved) {\r\n    var result = _bindingActivation(request.parentContext, binding, resolved);\r\n    var containersIterator = _getContainersIterator(request.parentContext.container);\r\n    var container;\r\n    var containersIteratorResult = containersIterator.next();\r\n    do {\r\n        container = containersIteratorResult.value;\r\n        var context_1 = request.parentContext;\r\n        var serviceIdentifier = request.serviceIdentifier;\r\n        var activationsIterator = _getContainerActivationsForService(container, serviceIdentifier);\r\n        if (isPromise(result)) {\r\n            result = _activateContainerAsync(activationsIterator, context_1, result);\r\n        }\r\n        else {\r\n            result = _activateContainer(activationsIterator, context_1, result);\r\n        }\r\n        containersIteratorResult = containersIterator.next();\r\n    } while (containersIteratorResult.done !== true && !getBindingDictionary(container).hasKey(request.serviceIdentifier));\r\n    return result;\r\n}\r\nvar _bindingActivation = function (context, binding, previousResult) {\r\n    var result;\r\n    if (typeof binding.onActivation === 'function') {\r\n        result = binding.onActivation(context, previousResult);\r\n    }\r\n    else {\r\n        result = previousResult;\r\n    }\r\n    return result;\r\n};\r\nvar _activateContainer = function (activationsIterator, context, result) {\r\n    var activation = activationsIterator.next();\r\n    while (!activation.done) {\r\n        result = activation.value(context, result);\r\n        if (isPromise(result)) {\r\n            return _activateContainerAsync(activationsIterator, context, result);\r\n        }\r\n        activation = activationsIterator.next();\r\n    }\r\n    return result;\r\n};\r\nvar _activateContainerAsync = function (activationsIterator, context, resultPromise) { return __awaiter(void 0, void 0, void 0, function () {\r\n    var result, activation;\r\n    return __generator(this, function (_a) {\r\n        switch (_a.label) {\r\n            case 0: return [4, resultPromise];\r\n            case 1:\r\n                result = _a.sent();\r\n                activation = activationsIterator.next();\r\n                _a.label = 2;\r\n            case 2:\r\n                if (!!activation.done) return [3, 4];\r\n                return [4, activation.value(context, result)];\r\n            case 3:\r\n                result = _a.sent();\r\n                activation = activationsIterator.next();\r\n                return [3, 2];\r\n            case 4: return [2, result];\r\n        }\r\n    });\r\n}); };\r\nvar _getContainerActivationsForService = function (container, serviceIdentifier) {\r\n    var activations = container._activations;\r\n    return activations.hasKey(serviceIdentifier) ? activations.get(serviceIdentifier).values() : [].values();\r\n};\r\nvar _getContainersIterator = function (container) {\r\n    var containersStack = [container];\r\n    var parent = container.parent;\r\n    while (parent !== null) {\r\n        containersStack.push(parent);\r\n        parent = parent.parent;\r\n    }\r\n    var getNextContainer = function () {\r\n        var nextContainer = containersStack.pop();\r\n        if (nextContainer !== undefined) {\r\n            return { done: false, value: nextContainer };\r\n        }\r\n        else {\r\n            return { done: true, value: undefined };\r\n        }\r\n    };\r\n    var containersIterator = {\r\n        next: getNextContainer,\r\n    };\r\n    return containersIterator;\r\n};\r\nfunction resolve(context) {\r\n    var _f = _resolveRequest(context.plan.rootRequest.requestScope);\r\n    return _f(context.plan.rootRequest);\r\n}\r\nexport { resolve };\r\n","var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n};\r\nvar __generator = (this && this.__generator) || function (thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n};\r\nimport { BindingScopeEnum } from '../constants/literal_types';\r\nimport { isPromise } from '../utils/async';\r\nexport var tryGetFromScope = function (requestScope, binding) {\r\n    if ((binding.scope === BindingScopeEnum.Singleton) && binding.activated) {\r\n        return binding.cache;\r\n    }\r\n    if (binding.scope === BindingScopeEnum.Request &&\r\n        requestScope.has(binding.id)) {\r\n        return requestScope.get(binding.id);\r\n    }\r\n    return null;\r\n};\r\nexport var saveToScope = function (requestScope, binding, result) {\r\n    if (binding.scope === BindingScopeEnum.Singleton) {\r\n        _saveToSingletonScope(binding, result);\r\n    }\r\n    if (binding.scope === BindingScopeEnum.Request) {\r\n        _saveToRequestScope(requestScope, binding, result);\r\n    }\r\n};\r\nvar _saveToRequestScope = function (requestScope, binding, result) {\r\n    if (!requestScope.has(binding.id)) {\r\n        requestScope.set(binding.id, result);\r\n    }\r\n};\r\nvar _saveToSingletonScope = function (binding, result) {\r\n    binding.cache = result;\r\n    binding.activated = true;\r\n    if (isPromise(result)) {\r\n        void _saveAsyncResultToSingletonScope(binding, result);\r\n    }\r\n};\r\nvar _saveAsyncResultToSingletonScope = function (binding, asyncResult) { return __awaiter(void 0, void 0, void 0, function () {\r\n    var result, ex_1;\r\n    return __generator(this, function (_a) {\r\n        switch (_a.label) {\r\n            case 0:\r\n                _a.trys.push([0, 2, , 3]);\r\n                return [4, asyncResult];\r\n            case 1:\r\n                result = _a.sent();\r\n                binding.cache = result;\r\n                return [3, 3];\r\n            case 2:\r\n                ex_1 = _a.sent();\r\n                binding.cache = null;\r\n                binding.activated = false;\r\n                throw ex_1;\r\n            case 3: return [2];\r\n        }\r\n    });\r\n}); };\r\n","import { BindingScopeEnum } from '../constants/literal_types';\r\nimport { BindingWhenOnSyntax } from './binding_when_on_syntax';\r\nvar BindingInSyntax = (function () {\r\n    function BindingInSyntax(binding) {\r\n        this._binding = binding;\r\n    }\r\n    BindingInSyntax.prototype.inRequestScope = function () {\r\n        this._binding.scope = BindingScopeEnum.Request;\r\n        return new BindingWhenOnSyntax(this._binding);\r\n    };\r\n    BindingInSyntax.prototype.inSingletonScope = function () {\r\n        this._binding.scope = BindingScopeEnum.Singleton;\r\n        return new BindingWhenOnSyntax(this._binding);\r\n    };\r\n    BindingInSyntax.prototype.inTransientScope = function () {\r\n        this._binding.scope = BindingScopeEnum.Transient;\r\n        return new BindingWhenOnSyntax(this._binding);\r\n    };\r\n    return BindingInSyntax;\r\n}());\r\nexport { BindingInSyntax };\r\n","import { BindingInSyntax } from './binding_in_syntax';\r\nimport { BindingOnSyntax } from './binding_on_syntax';\r\nimport { BindingWhenSyntax } from './binding_when_syntax';\r\nvar BindingInWhenOnSyntax = (function () {\r\n    function BindingInWhenOnSyntax(binding) {\r\n        this._binding = binding;\r\n        this._bindingWhenSyntax = new BindingWhenSyntax(this._binding);\r\n        this._bindingOnSyntax = new BindingOnSyntax(this._binding);\r\n        this._bindingInSyntax = new BindingInSyntax(binding);\r\n    }\r\n    BindingInWhenOnSyntax.prototype.inRequestScope = function () {\r\n        return this._bindingInSyntax.inRequestScope();\r\n    };\r\n    BindingInWhenOnSyntax.prototype.inSingletonScope = function () {\r\n        return this._bindingInSyntax.inSingletonScope();\r\n    };\r\n    BindingInWhenOnSyntax.prototype.inTransientScope = function () {\r\n        return this._bindingInSyntax.inTransientScope();\r\n    };\r\n    BindingInWhenOnSyntax.prototype.when = function (constraint) {\r\n        return this._bindingWhenSyntax.when(constraint);\r\n    };\r\n    BindingInWhenOnSyntax.prototype.whenTargetNamed = function (name) {\r\n        return this._bindingWhenSyntax.whenTargetNamed(name);\r\n    };\r\n    BindingInWhenOnSyntax.prototype.whenTargetIsDefault = function () {\r\n        return this._bindingWhenSyntax.whenTargetIsDefault();\r\n    };\r\n    BindingInWhenOnSyntax.prototype.whenTargetTagged = function (tag, value) {\r\n        return this._bindingWhenSyntax.whenTargetTagged(tag, value);\r\n    };\r\n    BindingInWhenOnSyntax.prototype.whenInjectedInto = function (parent) {\r\n        return this._bindingWhenSyntax.whenInjectedInto(parent);\r\n    };\r\n    BindingInWhenOnSyntax.prototype.whenParentNamed = function (name) {\r\n        return this._bindingWhenSyntax.whenParentNamed(name);\r\n    };\r\n    BindingInWhenOnSyntax.prototype.whenParentTagged = function (tag, value) {\r\n        return this._bindingWhenSyntax.whenParentTagged(tag, value);\r\n    };\r\n    BindingInWhenOnSyntax.prototype.whenAnyAncestorIs = function (ancestor) {\r\n        return this._bindingWhenSyntax.whenAnyAncestorIs(ancestor);\r\n    };\r\n    BindingInWhenOnSyntax.prototype.whenNoAncestorIs = function (ancestor) {\r\n        return this._bindingWhenSyntax.whenNoAncestorIs(ancestor);\r\n    };\r\n    BindingInWhenOnSyntax.prototype.whenAnyAncestorNamed = function (name) {\r\n        return this._bindingWhenSyntax.whenAnyAncestorNamed(name);\r\n    };\r\n    BindingInWhenOnSyntax.prototype.whenAnyAncestorTagged = function (tag, value) {\r\n        return this._bindingWhenSyntax.whenAnyAncestorTagged(tag, value);\r\n    };\r\n    BindingInWhenOnSyntax.prototype.whenNoAncestorNamed = function (name) {\r\n        return this._bindingWhenSyntax.whenNoAncestorNamed(name);\r\n    };\r\n    BindingInWhenOnSyntax.prototype.whenNoAncestorTagged = function (tag, value) {\r\n        return this._bindingWhenSyntax.whenNoAncestorTagged(tag, value);\r\n    };\r\n    BindingInWhenOnSyntax.prototype.whenAnyAncestorMatches = function (constraint) {\r\n        return this._bindingWhenSyntax.whenAnyAncestorMatches(constraint);\r\n    };\r\n    BindingInWhenOnSyntax.prototype.whenNoAncestorMatches = function (constraint) {\r\n        return this._bindingWhenSyntax.whenNoAncestorMatches(constraint);\r\n    };\r\n    BindingInWhenOnSyntax.prototype.onActivation = function (handler) {\r\n        return this._bindingOnSyntax.onActivation(handler);\r\n    };\r\n    BindingInWhenOnSyntax.prototype.onDeactivation = function (handler) {\r\n        return this._bindingOnSyntax.onDeactivation(handler);\r\n    };\r\n    return BindingInWhenOnSyntax;\r\n}());\r\nexport { BindingInWhenOnSyntax };\r\n","import { BindingWhenSyntax } from './binding_when_syntax';\r\nvar BindingOnSyntax = (function () {\r\n    function BindingOnSyntax(binding) {\r\n        this._binding = binding;\r\n    }\r\n    BindingOnSyntax.prototype.onActivation = function (handler) {\r\n        this._binding.onActivation = handler;\r\n        return new BindingWhenSyntax(this._binding);\r\n    };\r\n    BindingOnSyntax.prototype.onDeactivation = function (handler) {\r\n        this._binding.onDeactivation = handler;\r\n        return new BindingWhenSyntax(this._binding);\r\n    };\r\n    return BindingOnSyntax;\r\n}());\r\nexport { BindingOnSyntax };\r\n","import * as ERROR_MSGS from \"../constants/error_msgs\";\r\nimport { BindingScopeEnum, BindingTypeEnum } from \"../constants/literal_types\";\r\nimport { BindingInWhenOnSyntax } from \"./binding_in_when_on_syntax\";\r\nimport { BindingWhenOnSyntax } from \"./binding_when_on_syntax\";\r\nvar BindingToSyntax = (function () {\r\n    function BindingToSyntax(binding) {\r\n        this._binding = binding;\r\n    }\r\n    BindingToSyntax.prototype.to = function (constructor) {\r\n        this._binding.type = BindingTypeEnum.Instance;\r\n        this._binding.implementationType = constructor;\r\n        return new BindingInWhenOnSyntax(this._binding);\r\n    };\r\n    BindingToSyntax.prototype.toSelf = function () {\r\n        if (typeof this._binding.serviceIdentifier !== \"function\") {\r\n            throw new Error(\"\" + ERROR_MSGS.INVALID_TO_SELF_VALUE);\r\n        }\r\n        var self = this._binding.serviceIdentifier;\r\n        return this.to(self);\r\n    };\r\n    BindingToSyntax.prototype.toConstantValue = function (value) {\r\n        this._binding.type = BindingTypeEnum.ConstantValue;\r\n        this._binding.cache = value;\r\n        this._binding.dynamicValue = null;\r\n        this._binding.implementationType = null;\r\n        this._binding.scope = BindingScopeEnum.Singleton;\r\n        return new BindingWhenOnSyntax(this._binding);\r\n    };\r\n    BindingToSyntax.prototype.toDynamicValue = function (func) {\r\n        this._binding.type = BindingTypeEnum.DynamicValue;\r\n        this._binding.cache = null;\r\n        this._binding.dynamicValue = func;\r\n        this._binding.implementationType = null;\r\n        return new BindingInWhenOnSyntax(this._binding);\r\n    };\r\n    BindingToSyntax.prototype.toConstructor = function (constructor) {\r\n        this._binding.type = BindingTypeEnum.Constructor;\r\n        this._binding.implementationType = constructor;\r\n        this._binding.scope = BindingScopeEnum.Singleton;\r\n        return new BindingWhenOnSyntax(this._binding);\r\n    };\r\n    BindingToSyntax.prototype.toFactory = function (factory) {\r\n        this._binding.type = BindingTypeEnum.Factory;\r\n        this._binding.factory = factory;\r\n        this._binding.scope = BindingScopeEnum.Singleton;\r\n        return new BindingWhenOnSyntax(this._binding);\r\n    };\r\n    BindingToSyntax.prototype.toFunction = function (func) {\r\n        if (typeof func !== \"function\") {\r\n            throw new Error(ERROR_MSGS.INVALID_FUNCTION_BINDING);\r\n        }\r\n        var bindingWhenOnSyntax = this.toConstantValue(func);\r\n        this._binding.type = BindingTypeEnum.Function;\r\n        this._binding.scope = BindingScopeEnum.Singleton;\r\n        return bindingWhenOnSyntax;\r\n    };\r\n    BindingToSyntax.prototype.toAutoFactory = function (serviceIdentifier) {\r\n        this._binding.type = BindingTypeEnum.Factory;\r\n        this._binding.factory = function (context) {\r\n            var autofactory = function () { return context.container.get(serviceIdentifier); };\r\n            return autofactory;\r\n        };\r\n        this._binding.scope = BindingScopeEnum.Singleton;\r\n        return new BindingWhenOnSyntax(this._binding);\r\n    };\r\n    BindingToSyntax.prototype.toAutoNamedFactory = function (serviceIdentifier) {\r\n        this._binding.type = BindingTypeEnum.Factory;\r\n        this._binding.factory = function (context) {\r\n            return function (named) { return context.container.getNamed(serviceIdentifier, named); };\r\n        };\r\n        return new BindingWhenOnSyntax(this._binding);\r\n    };\r\n    BindingToSyntax.prototype.toProvider = function (provider) {\r\n        this._binding.type = BindingTypeEnum.Provider;\r\n        this._binding.provider = provider;\r\n        this._binding.scope = BindingScopeEnum.Singleton;\r\n        return new BindingWhenOnSyntax(this._binding);\r\n    };\r\n    BindingToSyntax.prototype.toService = function (service) {\r\n        this.toDynamicValue(function (context) { return context.container.get(service); });\r\n    };\r\n    return BindingToSyntax;\r\n}());\r\nexport { BindingToSyntax };\r\n","import { BindingOnSyntax } from './binding_on_syntax';\r\nimport { BindingWhenSyntax } from './binding_when_syntax';\r\nvar BindingWhenOnSyntax = (function () {\r\n    function BindingWhenOnSyntax(binding) {\r\n        this._binding = binding;\r\n        this._bindingWhenSyntax = new BindingWhenSyntax(this._binding);\r\n        this._bindingOnSyntax = new BindingOnSyntax(this._binding);\r\n    }\r\n    BindingWhenOnSyntax.prototype.when = function (constraint) {\r\n        return this._bindingWhenSyntax.when(constraint);\r\n    };\r\n    BindingWhenOnSyntax.prototype.whenTargetNamed = function (name) {\r\n        return this._bindingWhenSyntax.whenTargetNamed(name);\r\n    };\r\n    BindingWhenOnSyntax.prototype.whenTargetIsDefault = function () {\r\n        return this._bindingWhenSyntax.whenTargetIsDefault();\r\n    };\r\n    BindingWhenOnSyntax.prototype.whenTargetTagged = function (tag, value) {\r\n        return this._bindingWhenSyntax.whenTargetTagged(tag, value);\r\n    };\r\n    BindingWhenOnSyntax.prototype.whenInjectedInto = function (parent) {\r\n        return this._bindingWhenSyntax.whenInjectedInto(parent);\r\n    };\r\n    BindingWhenOnSyntax.prototype.whenParentNamed = function (name) {\r\n        return this._bindingWhenSyntax.whenParentNamed(name);\r\n    };\r\n    BindingWhenOnSyntax.prototype.whenParentTagged = function (tag, value) {\r\n        return this._bindingWhenSyntax.whenParentTagged(tag, value);\r\n    };\r\n    BindingWhenOnSyntax.prototype.whenAnyAncestorIs = function (ancestor) {\r\n        return this._bindingWhenSyntax.whenAnyAncestorIs(ancestor);\r\n    };\r\n    BindingWhenOnSyntax.prototype.whenNoAncestorIs = function (ancestor) {\r\n        return this._bindingWhenSyntax.whenNoAncestorIs(ancestor);\r\n    };\r\n    BindingWhenOnSyntax.prototype.whenAnyAncestorNamed = function (name) {\r\n        return this._bindingWhenSyntax.whenAnyAncestorNamed(name);\r\n    };\r\n    BindingWhenOnSyntax.prototype.whenAnyAncestorTagged = function (tag, value) {\r\n        return this._bindingWhenSyntax.whenAnyAncestorTagged(tag, value);\r\n    };\r\n    BindingWhenOnSyntax.prototype.whenNoAncestorNamed = function (name) {\r\n        return this._bindingWhenSyntax.whenNoAncestorNamed(name);\r\n    };\r\n    BindingWhenOnSyntax.prototype.whenNoAncestorTagged = function (tag, value) {\r\n        return this._bindingWhenSyntax.whenNoAncestorTagged(tag, value);\r\n    };\r\n    BindingWhenOnSyntax.prototype.whenAnyAncestorMatches = function (constraint) {\r\n        return this._bindingWhenSyntax.whenAnyAncestorMatches(constraint);\r\n    };\r\n    BindingWhenOnSyntax.prototype.whenNoAncestorMatches = function (constraint) {\r\n        return this._bindingWhenSyntax.whenNoAncestorMatches(constraint);\r\n    };\r\n    BindingWhenOnSyntax.prototype.onActivation = function (handler) {\r\n        return this._bindingOnSyntax.onActivation(handler);\r\n    };\r\n    BindingWhenOnSyntax.prototype.onDeactivation = function (handler) {\r\n        return this._bindingOnSyntax.onDeactivation(handler);\r\n    };\r\n    return BindingWhenOnSyntax;\r\n}());\r\nexport { BindingWhenOnSyntax };\r\n","import { BindingOnSyntax } from './binding_on_syntax';\r\nimport { namedConstraint, taggedConstraint, traverseAncerstors, typeConstraint } from './constraint_helpers';\r\nvar BindingWhenSyntax = (function () {\r\n    function BindingWhenSyntax(binding) {\r\n        this._binding = binding;\r\n    }\r\n    BindingWhenSyntax.prototype.when = function (constraint) {\r\n        this._binding.constraint = constraint;\r\n        return new BindingOnSyntax(this._binding);\r\n    };\r\n    BindingWhenSyntax.prototype.whenTargetNamed = function (name) {\r\n        this._binding.constraint = namedConstraint(name);\r\n        return new BindingOnSyntax(this._binding);\r\n    };\r\n    BindingWhenSyntax.prototype.whenTargetIsDefault = function () {\r\n        this._binding.constraint = function (request) {\r\n            if (request === null) {\r\n                return false;\r\n            }\r\n            var targetIsDefault = (request.target !== null) &&\r\n                (!request.target.isNamed()) &&\r\n                (!request.target.isTagged());\r\n            return targetIsDefault;\r\n        };\r\n        return new BindingOnSyntax(this._binding);\r\n    };\r\n    BindingWhenSyntax.prototype.whenTargetTagged = function (tag, value) {\r\n        this._binding.constraint = taggedConstraint(tag)(value);\r\n        return new BindingOnSyntax(this._binding);\r\n    };\r\n    BindingWhenSyntax.prototype.whenInjectedInto = function (parent) {\r\n        this._binding.constraint = function (request) {\r\n            return request !== null && typeConstraint(parent)(request.parentRequest);\r\n        };\r\n        return new BindingOnSyntax(this._binding);\r\n    };\r\n    BindingWhenSyntax.prototype.whenParentNamed = function (name) {\r\n        this._binding.constraint = function (request) {\r\n            return request !== null && namedConstraint(name)(request.parentRequest);\r\n        };\r\n        return new BindingOnSyntax(this._binding);\r\n    };\r\n    BindingWhenSyntax.prototype.whenParentTagged = function (tag, value) {\r\n        this._binding.constraint = function (request) {\r\n            return request !== null && taggedConstraint(tag)(value)(request.parentRequest);\r\n        };\r\n        return new BindingOnSyntax(this._binding);\r\n    };\r\n    BindingWhenSyntax.prototype.whenAnyAncestorIs = function (ancestor) {\r\n        this._binding.constraint = function (request) {\r\n            return request !== null && traverseAncerstors(request, typeConstraint(ancestor));\r\n        };\r\n        return new BindingOnSyntax(this._binding);\r\n    };\r\n    BindingWhenSyntax.prototype.whenNoAncestorIs = function (ancestor) {\r\n        this._binding.constraint = function (request) {\r\n            return request !== null && !traverseAncerstors(request, typeConstraint(ancestor));\r\n        };\r\n        return new BindingOnSyntax(this._binding);\r\n    };\r\n    BindingWhenSyntax.prototype.whenAnyAncestorNamed = function (name) {\r\n        this._binding.constraint = function (request) {\r\n            return request !== null && traverseAncerstors(request, namedConstraint(name));\r\n        };\r\n        return new BindingOnSyntax(this._binding);\r\n    };\r\n    BindingWhenSyntax.prototype.whenNoAncestorNamed = function (name) {\r\n        this._binding.constraint = function (request) {\r\n            return request !== null && !traverseAncerstors(request, namedConstraint(name));\r\n        };\r\n        return new BindingOnSyntax(this._binding);\r\n    };\r\n    BindingWhenSyntax.prototype.whenAnyAncestorTagged = function (tag, value) {\r\n        this._binding.constraint = function (request) {\r\n            return request !== null && traverseAncerstors(request, taggedConstraint(tag)(value));\r\n        };\r\n        return new BindingOnSyntax(this._binding);\r\n    };\r\n    BindingWhenSyntax.prototype.whenNoAncestorTagged = function (tag, value) {\r\n        this._binding.constraint = function (request) {\r\n            return request !== null && !traverseAncerstors(request, taggedConstraint(tag)(value));\r\n        };\r\n        return new BindingOnSyntax(this._binding);\r\n    };\r\n    BindingWhenSyntax.prototype.whenAnyAncestorMatches = function (constraint) {\r\n        this._binding.constraint = function (request) {\r\n            return request !== null && traverseAncerstors(request, constraint);\r\n        };\r\n        return new BindingOnSyntax(this._binding);\r\n    };\r\n    BindingWhenSyntax.prototype.whenNoAncestorMatches = function (constraint) {\r\n        this._binding.constraint = function (request) {\r\n            return request !== null && !traverseAncerstors(request, constraint);\r\n        };\r\n        return new BindingOnSyntax(this._binding);\r\n    };\r\n    return BindingWhenSyntax;\r\n}());\r\nexport { BindingWhenSyntax };\r\n","import * as METADATA_KEY from '../constants/metadata_keys';\r\nimport { Metadata } from '../planning/metadata';\r\nvar traverseAncerstors = function (request, constraint) {\r\n    var parent = request.parentRequest;\r\n    if (parent !== null) {\r\n        return constraint(parent) ? true : traverseAncerstors(parent, constraint);\r\n    }\r\n    else {\r\n        return false;\r\n    }\r\n};\r\nvar taggedConstraint = function (key) { return function (value) {\r\n    var constraint = function (request) {\r\n        return request !== null && request.target !== null && request.target.matchesTag(key)(value);\r\n    };\r\n    constraint.metaData = new Metadata(key, value);\r\n    return constraint;\r\n}; };\r\nvar namedConstraint = taggedConstraint(METADATA_KEY.NAMED_TAG);\r\nvar typeConstraint = function (type) { return function (request) {\r\n    var binding = null;\r\n    if (request !== null) {\r\n        binding = request.bindings[0];\r\n        if (typeof type === 'string') {\r\n            var serviceIdentifier = binding.serviceIdentifier;\r\n            return serviceIdentifier === type;\r\n        }\r\n        else {\r\n            var constructor = request.bindings[0].implementationType;\r\n            return type === constructor;\r\n        }\r\n    }\r\n    return false;\r\n}; };\r\nexport { traverseAncerstors, taggedConstraint, namedConstraint, typeConstraint };\r\n","function isPromise(object) {\r\n    var isObjectOrFunction = (typeof object === 'object' && object !== null) || typeof object === 'function';\r\n    return isObjectOrFunction && typeof object.then === \"function\";\r\n}\r\nfunction isPromiseOrContainsPromise(object) {\r\n    if (isPromise(object)) {\r\n        return true;\r\n    }\r\n    return Array.isArray(object) && object.some(isPromise);\r\n}\r\nexport { isPromise, isPromiseOrContainsPromise };\r\n","import { getServiceIdentifierAsString } from '../utils/serialization';\r\nimport * as ERROR_MSGS from '../constants/error_msgs';\r\nimport { BindingTypeEnum } from '../constants/literal_types';\r\nimport { FactoryType } from './factory_type';\r\nexport var multiBindToService = function (container) {\r\n    return function (service) {\r\n        return function () {\r\n            var types = [];\r\n            for (var _i = 0; _i < arguments.length; _i++) {\r\n                types[_i] = arguments[_i];\r\n            }\r\n            return types.forEach(function (t) { return container.bind(t).toService(service); });\r\n        };\r\n    };\r\n};\r\nexport var ensureFullyBound = function (binding) {\r\n    var boundValue = null;\r\n    switch (binding.type) {\r\n        case BindingTypeEnum.ConstantValue:\r\n        case BindingTypeEnum.Function:\r\n            boundValue = binding.cache;\r\n            break;\r\n        case BindingTypeEnum.Constructor:\r\n        case BindingTypeEnum.Instance:\r\n            boundValue = binding.implementationType;\r\n            break;\r\n        case BindingTypeEnum.DynamicValue:\r\n            boundValue = binding.dynamicValue;\r\n            break;\r\n        case BindingTypeEnum.Provider:\r\n            boundValue = binding.provider;\r\n            break;\r\n        case BindingTypeEnum.Factory:\r\n            boundValue = binding.factory;\r\n            break;\r\n    }\r\n    if (boundValue === null) {\r\n        var serviceIdentifierAsString = getServiceIdentifierAsString(binding.serviceIdentifier);\r\n        throw new Error(ERROR_MSGS.INVALID_BINDING_TYPE + \" \" + serviceIdentifierAsString);\r\n    }\r\n};\r\nexport var getFactoryDetails = function (binding) {\r\n    switch (binding.type) {\r\n        case BindingTypeEnum.Factory:\r\n            return { factory: binding.factory, factoryType: FactoryType.Factory };\r\n        case BindingTypeEnum.Provider:\r\n            return { factory: binding.provider, factoryType: FactoryType.Provider };\r\n        case BindingTypeEnum.DynamicValue:\r\n            return { factory: binding.dynamicValue, factoryType: FactoryType.DynamicValue };\r\n        default:\r\n            throw new Error(\"Unexpected factory type \" + binding.type);\r\n    }\r\n};\r\n","function isClonable(obj) {\r\n    return (typeof obj === 'object')\r\n        && (obj !== null)\r\n        && ('clone' in obj)\r\n        && typeof obj.clone === 'function';\r\n}\r\nexport { isClonable };\r\n","import * as ERROR_MSGS from '../constants/error_msgs';\r\nexport function isStackOverflowExeption(error) {\r\n    return (error instanceof RangeError ||\r\n        error.message === ERROR_MSGS.STACK_OVERFLOW);\r\n}\r\nexport var tryAndThrowErrorIfStackOverflow = function (fn, errorCallback) {\r\n    try {\r\n        return fn();\r\n    }\r\n    catch (error) {\r\n        if (isStackOverflowExeption(error)) {\r\n            error = errorCallback();\r\n        }\r\n        throw error;\r\n    }\r\n};\r\n","export var FactoryType;\r\n(function (FactoryType) {\r\n    FactoryType[\"DynamicValue\"] = \"toDynamicValue\";\r\n    FactoryType[\"Factory\"] = \"toFactory\";\r\n    FactoryType[\"Provider\"] = \"toProvider\";\r\n})(FactoryType || (FactoryType = {}));\r\n","var idCounter = 0;\r\nfunction id() {\r\n    return idCounter++;\r\n}\r\nexport { id };\r\n","export function getFirstArrayDuplicate(array) {\r\n    var seenValues = new Set();\r\n    for (var _i = 0, array_1 = array; _i < array_1.length; _i++) {\r\n        var entry = array_1[_i];\r\n        if (seenValues.has(entry)) {\r\n            return entry;\r\n        }\r\n        else {\r\n            seenValues.add(entry);\r\n        }\r\n    }\r\n    return undefined;\r\n}\r\n","import * as ERROR_MSGS from '../constants/error_msgs';\r\nfunction getServiceIdentifierAsString(serviceIdentifier) {\r\n    if (typeof serviceIdentifier === 'function') {\r\n        var _serviceIdentifier = serviceIdentifier;\r\n        return _serviceIdentifier.name;\r\n    }\r\n    else if (typeof serviceIdentifier === 'symbol') {\r\n        return serviceIdentifier.toString();\r\n    }\r\n    else {\r\n        var _serviceIdentifier = serviceIdentifier;\r\n        return _serviceIdentifier;\r\n    }\r\n}\r\nfunction listRegisteredBindingsForServiceIdentifier(container, serviceIdentifier, getBindings) {\r\n    var registeredBindingsList = '';\r\n    var registeredBindings = getBindings(container, serviceIdentifier);\r\n    if (registeredBindings.length !== 0) {\r\n        registeredBindingsList = '\\nRegistered bindings:';\r\n        registeredBindings.forEach(function (binding) {\r\n            var name = 'Object';\r\n            if (binding.implementationType !== null) {\r\n                name = getFunctionName(binding.implementationType);\r\n            }\r\n            registeredBindingsList = registeredBindingsList + \"\\n \" + name;\r\n            if (binding.constraint.metaData) {\r\n                registeredBindingsList = registeredBindingsList + \" - \" + binding.constraint.metaData;\r\n            }\r\n        });\r\n    }\r\n    return registeredBindingsList;\r\n}\r\nfunction alreadyDependencyChain(request, serviceIdentifier) {\r\n    if (request.parentRequest === null) {\r\n        return false;\r\n    }\r\n    else if (request.parentRequest.serviceIdentifier === serviceIdentifier) {\r\n        return true;\r\n    }\r\n    else {\r\n        return alreadyDependencyChain(request.parentRequest, serviceIdentifier);\r\n    }\r\n}\r\nfunction dependencyChainToString(request) {\r\n    function _createStringArr(req, result) {\r\n        if (result === void 0) { result = []; }\r\n        var serviceIdentifier = getServiceIdentifierAsString(req.serviceIdentifier);\r\n        result.push(serviceIdentifier);\r\n        if (req.parentRequest !== null) {\r\n            return _createStringArr(req.parentRequest, result);\r\n        }\r\n        return result;\r\n    }\r\n    var stringArr = _createStringArr(request);\r\n    return stringArr.reverse().join(' --> ');\r\n}\r\nfunction circularDependencyToException(request) {\r\n    request.childRequests.forEach(function (childRequest) {\r\n        if (alreadyDependencyChain(childRequest, childRequest.serviceIdentifier)) {\r\n            var services = dependencyChainToString(childRequest);\r\n            throw new Error(ERROR_MSGS.CIRCULAR_DEPENDENCY + \" \" + services);\r\n        }\r\n        else {\r\n            circularDependencyToException(childRequest);\r\n        }\r\n    });\r\n}\r\nfunction listMetadataForTarget(serviceIdentifierString, target) {\r\n    if (target.isTagged() || target.isNamed()) {\r\n        var m_1 = '';\r\n        var namedTag = target.getNamedTag();\r\n        var otherTags = target.getCustomTags();\r\n        if (namedTag !== null) {\r\n            m_1 += namedTag.toString() + '\\n';\r\n        }\r\n        if (otherTags !== null) {\r\n            otherTags.forEach(function (tag) {\r\n                m_1 += tag.toString() + '\\n';\r\n            });\r\n        }\r\n        return \" \" + serviceIdentifierString + \"\\n \" + serviceIdentifierString + \" - \" + m_1;\r\n    }\r\n    else {\r\n        return \" \" + serviceIdentifierString;\r\n    }\r\n}\r\nfunction getFunctionName(func) {\r\n    if (func.name) {\r\n        return func.name;\r\n    }\r\n    else {\r\n        var name_1 = func.toString();\r\n        var match = name_1.match(/^function\\s*([^\\s(]+)/);\r\n        return match ? match[1] : \"Anonymous function: \" + name_1;\r\n    }\r\n}\r\nfunction getSymbolDescription(symbol) {\r\n    return symbol.toString().slice(7, -1);\r\n}\r\nexport { getFunctionName, getServiceIdentifierAsString, listRegisteredBindingsForServiceIdentifier, listMetadataForTarget, circularDependencyToException, getSymbolDescription };\r\n","/*\n* loglevel - https://github.com/pimterry/loglevel\n*\n* Copyright (c) 2013 Tim Perry\n* Licensed under the MIT license.\n*/\n(function (root, definition) {\n    \"use strict\";\n    if (typeof define === 'function' && define.amd) {\n        define(definition);\n    } else if (typeof module === 'object' && module.exports) {\n        module.exports = definition();\n    } else {\n        root.log = definition();\n    }\n}(this, function () {\n    \"use strict\";\n\n    // Slightly dubious tricks to cut down minimized file size\n    var noop = function() {};\n    var undefinedType = \"undefined\";\n    var isIE = (typeof window !== undefinedType) && (typeof window.navigator !== undefinedType) && (\n        /Trident\\/|MSIE /.test(window.navigator.userAgent)\n    );\n\n    var logMethods = [\n        \"trace\",\n        \"debug\",\n        \"info\",\n        \"warn\",\n        \"error\"\n    ];\n\n    // Cross-browser bind equivalent that works at least back to IE6\n    function bindMethod(obj, methodName) {\n        var method = obj[methodName];\n        if (typeof method.bind === 'function') {\n            return method.bind(obj);\n        } else {\n            try {\n                return Function.prototype.bind.call(method, obj);\n            } catch (e) {\n                // Missing bind shim or IE8 + Modernizr, fallback to wrapping\n                return function() {\n                    return Function.prototype.apply.apply(method, [obj, arguments]);\n                };\n            }\n        }\n    }\n\n    // Trace() doesn't print the message in IE, so for that case we need to wrap it\n    function traceForIE() {\n        if (console.log) {\n            if (console.log.apply) {\n                console.log.apply(console, arguments);\n            } else {\n                // In old IE, native console methods themselves don't have apply().\n                Function.prototype.apply.apply(console.log, [console, arguments]);\n            }\n        }\n        if (console.trace) console.trace();\n    }\n\n    // Build the best logging method possible for this env\n    // Wherever possible we want to bind, not wrap, to preserve stack traces\n    function realMethod(methodName) {\n        if (methodName === 'debug') {\n            methodName = 'log';\n        }\n\n        if (typeof console === undefinedType) {\n            return false; // No method possible, for now - fixed later by enableLoggingWhenConsoleArrives\n        } else if (methodName === 'trace' && isIE) {\n            return traceForIE;\n        } else if (console[methodName] !== undefined) {\n            return bindMethod(console, methodName);\n        } else if (console.log !== undefined) {\n            return bindMethod(console, 'log');\n        } else {\n            return noop;\n        }\n    }\n\n    // These private functions always need `this` to be set properly\n\n    function replaceLoggingMethods(level, loggerName) {\n        /*jshint validthis:true */\n        for (var i = 0; i < logMethods.length; i++) {\n            var methodName = logMethods[i];\n            this[methodName] = (i < level) ?\n                noop :\n                this.methodFactory(methodName, level, loggerName);\n        }\n\n        // Define log.log as an alias for log.debug\n        this.log = this.debug;\n    }\n\n    // In old IE versions, the console isn't present until you first open it.\n    // We build realMethod() replacements here that regenerate logging methods\n    function enableLoggingWhenConsoleArrives(methodName, level, loggerName) {\n        return function () {\n            if (typeof console !== undefinedType) {\n                replaceLoggingMethods.call(this, level, loggerName);\n                this[methodName].apply(this, arguments);\n            }\n        };\n    }\n\n    // By default, we use closely bound real methods wherever possible, and\n    // otherwise we wait for a console to appear, and then try again.\n    function defaultMethodFactory(methodName, level, loggerName) {\n        /*jshint validthis:true */\n        return realMethod(methodName) ||\n               enableLoggingWhenConsoleArrives.apply(this, arguments);\n    }\n\n    function Logger(name, defaultLevel, factory) {\n      var self = this;\n      var currentLevel;\n      defaultLevel = defaultLevel == null ? \"WARN\" : defaultLevel;\n\n      var storageKey = \"loglevel\";\n      if (typeof name === \"string\") {\n        storageKey += \":\" + name;\n      } else if (typeof name === \"symbol\") {\n        storageKey = undefined;\n      }\n\n      function persistLevelIfPossible(levelNum) {\n          var levelName = (logMethods[levelNum] || 'silent').toUpperCase();\n\n          if (typeof window === undefinedType || !storageKey) return;\n\n          // Use localStorage if available\n          try {\n              window.localStorage[storageKey] = levelName;\n              return;\n          } catch (ignore) {}\n\n          // Use session cookie as fallback\n          try {\n              window.document.cookie =\n                encodeURIComponent(storageKey) + \"=\" + levelName + \";\";\n          } catch (ignore) {}\n      }\n\n      function getPersistedLevel() {\n          var storedLevel;\n\n          if (typeof window === undefinedType || !storageKey) return;\n\n          try {\n              storedLevel = window.localStorage[storageKey];\n          } catch (ignore) {}\n\n          // Fallback to cookies if local storage gives us nothing\n          if (typeof storedLevel === undefinedType) {\n              try {\n                  var cookie = window.document.cookie;\n                  var location = cookie.indexOf(\n                      encodeURIComponent(storageKey) + \"=\");\n                  if (location !== -1) {\n                      storedLevel = /^([^;]+)/.exec(cookie.slice(location))[1];\n                  }\n              } catch (ignore) {}\n          }\n\n          // If the stored level is not valid, treat it as if nothing was stored.\n          if (self.levels[storedLevel] === undefined) {\n              storedLevel = undefined;\n          }\n\n          return storedLevel;\n      }\n\n      function clearPersistedLevel() {\n          if (typeof window === undefinedType || !storageKey) return;\n\n          // Use localStorage if available\n          try {\n              window.localStorage.removeItem(storageKey);\n              return;\n          } catch (ignore) {}\n\n          // Use session cookie as fallback\n          try {\n              window.document.cookie =\n                encodeURIComponent(storageKey) + \"=; expires=Thu, 01 Jan 1970 00:00:00 UTC\";\n          } catch (ignore) {}\n      }\n\n      /*\n       *\n       * Public logger API - see https://github.com/pimterry/loglevel for details\n       *\n       */\n\n      self.name = name;\n\n      self.levels = { \"TRACE\": 0, \"DEBUG\": 1, \"INFO\": 2, \"WARN\": 3,\n          \"ERROR\": 4, \"SILENT\": 5};\n\n      self.methodFactory = factory || defaultMethodFactory;\n\n      self.getLevel = function () {\n          return currentLevel;\n      };\n\n      self.setLevel = function (level, persist) {\n          if (typeof level === \"string\" && self.levels[level.toUpperCase()] !== undefined) {\n              level = self.levels[level.toUpperCase()];\n          }\n          if (typeof level === \"number\" && level >= 0 && level <= self.levels.SILENT) {\n              currentLevel = level;\n              if (persist !== false) {  // defaults to true\n                  persistLevelIfPossible(level);\n              }\n              replaceLoggingMethods.call(self, level, name);\n              if (typeof console === undefinedType && level < self.levels.SILENT) {\n                  return \"No console available for logging\";\n              }\n          } else {\n              throw \"log.setLevel() called with invalid level: \" + level;\n          }\n      };\n\n      self.setDefaultLevel = function (level) {\n          defaultLevel = level;\n          if (!getPersistedLevel()) {\n              self.setLevel(level, false);\n          }\n      };\n\n      self.resetLevel = function () {\n          self.setLevel(defaultLevel, false);\n          clearPersistedLevel();\n      };\n\n      self.enableAll = function(persist) {\n          self.setLevel(self.levels.TRACE, persist);\n      };\n\n      self.disableAll = function(persist) {\n          self.setLevel(self.levels.SILENT, persist);\n      };\n\n      // Initialize with the right level\n      var initialLevel = getPersistedLevel();\n      if (initialLevel == null) {\n          initialLevel = defaultLevel;\n      }\n      self.setLevel(initialLevel, false);\n    }\n\n    /*\n     *\n     * Top-level API\n     *\n     */\n\n    var defaultLogger = new Logger();\n\n    var _loggersByName = {};\n    defaultLogger.getLogger = function getLogger(name) {\n        if ((typeof name !== \"symbol\" && typeof name !== \"string\") || name === \"\") {\n          throw new TypeError(\"You must supply a name when creating a logger.\");\n        }\n\n        var logger = _loggersByName[name];\n        if (!logger) {\n          logger = _loggersByName[name] = new Logger(\n            name, defaultLogger.getLevel(), defaultLogger.methodFactory);\n        }\n        return logger;\n    };\n\n    // Grab the current global log variable in case of overwrite\n    var _log = (typeof window !== undefinedType) ? window.log : undefined;\n    defaultLogger.noConflict = function() {\n        if (typeof window !== undefinedType &&\n               window.log === defaultLogger) {\n            window.log = _log;\n        }\n\n        return defaultLogger;\n    };\n\n    defaultLogger.getLoggers = function getLoggers() {\n        return _loggersByName;\n    };\n\n    // ES6 default export, for compatibility\n    defaultLogger['default'] = defaultLogger;\n\n    return defaultLogger;\n}));\n","/*! *****************************************************************************\nCopyright (C) Microsoft. All rights reserved.\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\nthis file except in compliance with the License. You may obtain a copy of the\nLicense at http://www.apache.org/licenses/LICENSE-2.0\n\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\nMERCHANTABLITY OR NON-INFRINGEMENT.\n\nSee the Apache Version 2.0 License for specific language governing permissions\nand limitations under the License.\n***************************************************************************** */\nvar Reflect;\n(function (Reflect) {\n    // Metadata Proposal\n    // https://rbuckton.github.io/reflect-metadata/\n    (function (factory) {\n        var root = typeof global === \"object\" ? global :\n            typeof self === \"object\" ? self :\n                typeof this === \"object\" ? this :\n                    Function(\"return this;\")();\n        var exporter = makeExporter(Reflect);\n        if (typeof root.Reflect === \"undefined\") {\n            root.Reflect = Reflect;\n        }\n        else {\n            exporter = makeExporter(root.Reflect, exporter);\n        }\n        factory(exporter);\n        function makeExporter(target, previous) {\n            return function (key, value) {\n                if (typeof target[key] !== \"function\") {\n                    Object.defineProperty(target, key, { configurable: true, writable: true, value: value });\n                }\n                if (previous)\n                    previous(key, value);\n            };\n        }\n    })(function (exporter) {\n        var hasOwn = Object.prototype.hasOwnProperty;\n        // feature test for Symbol support\n        var supportsSymbol = typeof Symbol === \"function\";\n        var toPrimitiveSymbol = supportsSymbol && typeof Symbol.toPrimitive !== \"undefined\" ? Symbol.toPrimitive : \"@@toPrimitive\";\n        var iteratorSymbol = supportsSymbol && typeof Symbol.iterator !== \"undefined\" ? Symbol.iterator : \"@@iterator\";\n        var supportsCreate = typeof Object.create === \"function\"; // feature test for Object.create support\n        var supportsProto = { __proto__: [] } instanceof Array; // feature test for __proto__ support\n        var downLevel = !supportsCreate && !supportsProto;\n        var HashMap = {\n            // create an object in dictionary mode (a.k.a. \"slow\" mode in v8)\n            create: supportsCreate\n                ? function () { return MakeDictionary(Object.create(null)); }\n                : supportsProto\n                    ? function () { return MakeDictionary({ __proto__: null }); }\n                    : function () { return MakeDictionary({}); },\n            has: downLevel\n                ? function (map, key) { return hasOwn.call(map, key); }\n                : function (map, key) { return key in map; },\n            get: downLevel\n                ? function (map, key) { return hasOwn.call(map, key) ? map[key] : undefined; }\n                : function (map, key) { return map[key]; },\n        };\n        // Load global or shim versions of Map, Set, and WeakMap\n        var functionPrototype = Object.getPrototypeOf(Function);\n        var usePolyfill = typeof process === \"object\" && process.env && process.env[\"REFLECT_METADATA_USE_MAP_POLYFILL\"] === \"true\";\n        var _Map = !usePolyfill && typeof Map === \"function\" && typeof Map.prototype.entries === \"function\" ? Map : CreateMapPolyfill();\n        var _Set = !usePolyfill && typeof Set === \"function\" && typeof Set.prototype.entries === \"function\" ? Set : CreateSetPolyfill();\n        var _WeakMap = !usePolyfill && typeof WeakMap === \"function\" ? WeakMap : CreateWeakMapPolyfill();\n        // [[Metadata]] internal slot\n        // https://rbuckton.github.io/reflect-metadata/#ordinary-object-internal-methods-and-internal-slots\n        var Metadata = new _WeakMap();\n        /**\n         * Applies a set of decorators to a property of a target object.\n         * @param decorators An array of decorators.\n         * @param target The target object.\n         * @param propertyKey (Optional) The property key to decorate.\n         * @param attributes (Optional) The property descriptor for the target key.\n         * @remarks Decorators are applied in reverse order.\n         * @example\n         *\n         *     class Example {\n         *         // property declarations are not part of ES6, though they are valid in TypeScript:\n         *         // static staticProperty;\n         *         // property;\n         *\n         *         constructor(p) { }\n         *         static staticMethod(p) { }\n         *         method(p) { }\n         *     }\n         *\n         *     // constructor\n         *     Example = Reflect.decorate(decoratorsArray, Example);\n         *\n         *     // property (on constructor)\n         *     Reflect.decorate(decoratorsArray, Example, \"staticProperty\");\n         *\n         *     // property (on prototype)\n         *     Reflect.decorate(decoratorsArray, Example.prototype, \"property\");\n         *\n         *     // method (on constructor)\n         *     Object.defineProperty(Example, \"staticMethod\",\n         *         Reflect.decorate(decoratorsArray, Example, \"staticMethod\",\n         *             Object.getOwnPropertyDescriptor(Example, \"staticMethod\")));\n         *\n         *     // method (on prototype)\n         *     Object.defineProperty(Example.prototype, \"method\",\n         *         Reflect.decorate(decoratorsArray, Example.prototype, \"method\",\n         *             Object.getOwnPropertyDescriptor(Example.prototype, \"method\")));\n         *\n         */\n        function decorate(decorators, target, propertyKey, attributes) {\n            if (!IsUndefined(propertyKey)) {\n                if (!IsArray(decorators))\n                    throw new TypeError();\n                if (!IsObject(target))\n                    throw new TypeError();\n                if (!IsObject(attributes) && !IsUndefined(attributes) && !IsNull(attributes))\n                    throw new TypeError();\n                if (IsNull(attributes))\n                    attributes = undefined;\n                propertyKey = ToPropertyKey(propertyKey);\n                return DecorateProperty(decorators, target, propertyKey, attributes);\n            }\n            else {\n                if (!IsArray(decorators))\n                    throw new TypeError();\n                if (!IsConstructor(target))\n                    throw new TypeError();\n                return DecorateConstructor(decorators, target);\n            }\n        }\n        exporter(\"decorate\", decorate);\n        // 4.1.2 Reflect.metadata(metadataKey, metadataValue)\n        // https://rbuckton.github.io/reflect-metadata/#reflect.metadata\n        /**\n         * A default metadata decorator factory that can be used on a class, class member, or parameter.\n         * @param metadataKey The key for the metadata entry.\n         * @param metadataValue The value for the metadata entry.\n         * @returns A decorator function.\n         * @remarks\n         * If `metadataKey` is already defined for the target and target key, the\n         * metadataValue for that key will be overwritten.\n         * @example\n         *\n         *     // constructor\n         *     @Reflect.metadata(key, value)\n         *     class Example {\n         *     }\n         *\n         *     // property (on constructor, TypeScript only)\n         *     class Example {\n         *         @Reflect.metadata(key, value)\n         *         static staticProperty;\n         *     }\n         *\n         *     // property (on prototype, TypeScript only)\n         *     class Example {\n         *         @Reflect.metadata(key, value)\n         *         property;\n         *     }\n         *\n         *     // method (on constructor)\n         *     class Example {\n         *         @Reflect.metadata(key, value)\n         *         static staticMethod() { }\n         *     }\n         *\n         *     // method (on prototype)\n         *     class Example {\n         *         @Reflect.metadata(key, value)\n         *         method() { }\n         *     }\n         *\n         */\n        function metadata(metadataKey, metadataValue) {\n            function decorator(target, propertyKey) {\n                if (!IsObject(target))\n                    throw new TypeError();\n                if (!IsUndefined(propertyKey) && !IsPropertyKey(propertyKey))\n                    throw new TypeError();\n                OrdinaryDefineOwnMetadata(metadataKey, metadataValue, target, propertyKey);\n            }\n            return decorator;\n        }\n        exporter(\"metadata\", metadata);\n        /**\n         * Define a unique metadata entry on the target.\n         * @param metadataKey A key used to store and retrieve metadata.\n         * @param metadataValue A value that contains attached metadata.\n         * @param target The target object on which to define metadata.\n         * @param propertyKey (Optional) The property key for the target.\n         * @example\n         *\n         *     class Example {\n         *         // property declarations are not part of ES6, though they are valid in TypeScript:\n         *         // static staticProperty;\n         *         // property;\n         *\n         *         constructor(p) { }\n         *         static staticMethod(p) { }\n         *         method(p) { }\n         *     }\n         *\n         *     // constructor\n         *     Reflect.defineMetadata(\"custom:annotation\", options, Example);\n         *\n         *     // property (on constructor)\n         *     Reflect.defineMetadata(\"custom:annotation\", options, Example, \"staticProperty\");\n         *\n         *     // property (on prototype)\n         *     Reflect.defineMetadata(\"custom:annotation\", options, Example.prototype, \"property\");\n         *\n         *     // method (on constructor)\n         *     Reflect.defineMetadata(\"custom:annotation\", options, Example, \"staticMethod\");\n         *\n         *     // method (on prototype)\n         *     Reflect.defineMetadata(\"custom:annotation\", options, Example.prototype, \"method\");\n         *\n         *     // decorator factory as metadata-producing annotation.\n         *     function MyAnnotation(options): Decorator {\n         *         return (target, key?) => Reflect.defineMetadata(\"custom:annotation\", options, target, key);\n         *     }\n         *\n         */\n        function defineMetadata(metadataKey, metadataValue, target, propertyKey) {\n            if (!IsObject(target))\n                throw new TypeError();\n            if (!IsUndefined(propertyKey))\n                propertyKey = ToPropertyKey(propertyKey);\n            return OrdinaryDefineOwnMetadata(metadataKey, metadataValue, target, propertyKey);\n        }\n        exporter(\"defineMetadata\", defineMetadata);\n        /**\n         * Gets a value indicating whether the target object or its prototype chain has the provided metadata key defined.\n         * @param metadataKey A key used to store and retrieve metadata.\n         * @param target The target object on which the metadata is defined.\n         * @param propertyKey (Optional) The property key for the target.\n         * @returns `true` if the metadata key was defined on the target object or its prototype chain; otherwise, `false`.\n         * @example\n         *\n         *     class Example {\n         *         // property declarations are not part of ES6, though they are valid in TypeScript:\n         *         // static staticProperty;\n         *         // property;\n         *\n         *         constructor(p) { }\n         *         static staticMethod(p) { }\n         *         method(p) { }\n         *     }\n         *\n         *     // constructor\n         *     result = Reflect.hasMetadata(\"custom:annotation\", Example);\n         *\n         *     // property (on constructor)\n         *     result = Reflect.hasMetadata(\"custom:annotation\", Example, \"staticProperty\");\n         *\n         *     // property (on prototype)\n         *     result = Reflect.hasMetadata(\"custom:annotation\", Example.prototype, \"property\");\n         *\n         *     // method (on constructor)\n         *     result = Reflect.hasMetadata(\"custom:annotation\", Example, \"staticMethod\");\n         *\n         *     // method (on prototype)\n         *     result = Reflect.hasMetadata(\"custom:annotation\", Example.prototype, \"method\");\n         *\n         */\n        function hasMetadata(metadataKey, target, propertyKey) {\n            if (!IsObject(target))\n                throw new TypeError();\n            if (!IsUndefined(propertyKey))\n                propertyKey = ToPropertyKey(propertyKey);\n            return OrdinaryHasMetadata(metadataKey, target, propertyKey);\n        }\n        exporter(\"hasMetadata\", hasMetadata);\n        /**\n         * Gets a value indicating whether the target object has the provided metadata key defined.\n         * @param metadataKey A key used to store and retrieve metadata.\n         * @param target The target object on which the metadata is defined.\n         * @param propertyKey (Optional) The property key for the target.\n         * @returns `true` if the metadata key was defined on the target object; otherwise, `false`.\n         * @example\n         *\n         *     class Example {\n         *         // property declarations are not part of ES6, though they are valid in TypeScript:\n         *         // static staticProperty;\n         *         // property;\n         *\n         *         constructor(p) { }\n         *         static staticMethod(p) { }\n         *         method(p) { }\n         *     }\n         *\n         *     // constructor\n         *     result = Reflect.hasOwnMetadata(\"custom:annotation\", Example);\n         *\n         *     // property (on constructor)\n         *     result = Reflect.hasOwnMetadata(\"custom:annotation\", Example, \"staticProperty\");\n         *\n         *     // property (on prototype)\n         *     result = Reflect.hasOwnMetadata(\"custom:annotation\", Example.prototype, \"property\");\n         *\n         *     // method (on constructor)\n         *     result = Reflect.hasOwnMetadata(\"custom:annotation\", Example, \"staticMethod\");\n         *\n         *     // method (on prototype)\n         *     result = Reflect.hasOwnMetadata(\"custom:annotation\", Example.prototype, \"method\");\n         *\n         */\n        function hasOwnMetadata(metadataKey, target, propertyKey) {\n            if (!IsObject(target))\n                throw new TypeError();\n            if (!IsUndefined(propertyKey))\n                propertyKey = ToPropertyKey(propertyKey);\n            return OrdinaryHasOwnMetadata(metadataKey, target, propertyKey);\n        }\n        exporter(\"hasOwnMetadata\", hasOwnMetadata);\n        /**\n         * Gets the metadata value for the provided metadata key on the target object or its prototype chain.\n         * @param metadataKey A key used to store and retrieve metadata.\n         * @param target The target object on which the metadata is defined.\n         * @param propertyKey (Optional) The property key for the target.\n         * @returns The metadata value for the metadata key if found; otherwise, `undefined`.\n         * @example\n         *\n         *     class Example {\n         *         // property declarations are not part of ES6, though they are valid in TypeScript:\n         *         // static staticProperty;\n         *         // property;\n         *\n         *         constructor(p) { }\n         *         static staticMethod(p) { }\n         *         method(p) { }\n         *     }\n         *\n         *     // constructor\n         *     result = Reflect.getMetadata(\"custom:annotation\", Example);\n         *\n         *     // property (on constructor)\n         *     result = Reflect.getMetadata(\"custom:annotation\", Example, \"staticProperty\");\n         *\n         *     // property (on prototype)\n         *     result = Reflect.getMetadata(\"custom:annotation\", Example.prototype, \"property\");\n         *\n         *     // method (on constructor)\n         *     result = Reflect.getMetadata(\"custom:annotation\", Example, \"staticMethod\");\n         *\n         *     // method (on prototype)\n         *     result = Reflect.getMetadata(\"custom:annotation\", Example.prototype, \"method\");\n         *\n         */\n        function getMetadata(metadataKey, target, propertyKey) {\n            if (!IsObject(target))\n                throw new TypeError();\n            if (!IsUndefined(propertyKey))\n                propertyKey = ToPropertyKey(propertyKey);\n            return OrdinaryGetMetadata(metadataKey, target, propertyKey);\n        }\n        exporter(\"getMetadata\", getMetadata);\n        /**\n         * Gets the metadata value for the provided metadata key on the target object.\n         * @param metadataKey A key used to store and retrieve metadata.\n         * @param target The target object on which the metadata is defined.\n         * @param propertyKey (Optional) The property key for the target.\n         * @returns The metadata value for the metadata key if found; otherwise, `undefined`.\n         * @example\n         *\n         *     class Example {\n         *         // property declarations are not part of ES6, though they are valid in TypeScript:\n         *         // static staticProperty;\n         *         // property;\n         *\n         *         constructor(p) { }\n         *         static staticMethod(p) { }\n         *         method(p) { }\n         *     }\n         *\n         *     // constructor\n         *     result = Reflect.getOwnMetadata(\"custom:annotation\", Example);\n         *\n         *     // property (on constructor)\n         *     result = Reflect.getOwnMetadata(\"custom:annotation\", Example, \"staticProperty\");\n         *\n         *     // property (on prototype)\n         *     result = Reflect.getOwnMetadata(\"custom:annotation\", Example.prototype, \"property\");\n         *\n         *     // method (on constructor)\n         *     result = Reflect.getOwnMetadata(\"custom:annotation\", Example, \"staticMethod\");\n         *\n         *     // method (on prototype)\n         *     result = Reflect.getOwnMetadata(\"custom:annotation\", Example.prototype, \"method\");\n         *\n         */\n        function getOwnMetadata(metadataKey, target, propertyKey) {\n            if (!IsObject(target))\n                throw new TypeError();\n            if (!IsUndefined(propertyKey))\n                propertyKey = ToPropertyKey(propertyKey);\n            return OrdinaryGetOwnMetadata(metadataKey, target, propertyKey);\n        }\n        exporter(\"getOwnMetadata\", getOwnMetadata);\n        /**\n         * Gets the metadata keys defined on the target object or its prototype chain.\n         * @param target The target object on which the metadata is defined.\n         * @param propertyKey (Optional) The property key for the target.\n         * @returns An array of unique metadata keys.\n         * @example\n         *\n         *     class Example {\n         *         // property declarations are not part of ES6, though they are valid in TypeScript:\n         *         // static staticProperty;\n         *         // property;\n         *\n         *         constructor(p) { }\n         *         static staticMethod(p) { }\n         *         method(p) { }\n         *     }\n         *\n         *     // constructor\n         *     result = Reflect.getMetadataKeys(Example);\n         *\n         *     // property (on constructor)\n         *     result = Reflect.getMetadataKeys(Example, \"staticProperty\");\n         *\n         *     // property (on prototype)\n         *     result = Reflect.getMetadataKeys(Example.prototype, \"property\");\n         *\n         *     // method (on constructor)\n         *     result = Reflect.getMetadataKeys(Example, \"staticMethod\");\n         *\n         *     // method (on prototype)\n         *     result = Reflect.getMetadataKeys(Example.prototype, \"method\");\n         *\n         */\n        function getMetadataKeys(target, propertyKey) {\n            if (!IsObject(target))\n                throw new TypeError();\n            if (!IsUndefined(propertyKey))\n                propertyKey = ToPropertyKey(propertyKey);\n            return OrdinaryMetadataKeys(target, propertyKey);\n        }\n        exporter(\"getMetadataKeys\", getMetadataKeys);\n        /**\n         * Gets the unique metadata keys defined on the target object.\n         * @param target The target object on which the metadata is defined.\n         * @param propertyKey (Optional) The property key for the target.\n         * @returns An array of unique metadata keys.\n         * @example\n         *\n         *     class Example {\n         *         // property declarations are not part of ES6, though they are valid in TypeScript:\n         *         // static staticProperty;\n         *         // property;\n         *\n         *         constructor(p) { }\n         *         static staticMethod(p) { }\n         *         method(p) { }\n         *     }\n         *\n         *     // constructor\n         *     result = Reflect.getOwnMetadataKeys(Example);\n         *\n         *     // property (on constructor)\n         *     result = Reflect.getOwnMetadataKeys(Example, \"staticProperty\");\n         *\n         *     // property (on prototype)\n         *     result = Reflect.getOwnMetadataKeys(Example.prototype, \"property\");\n         *\n         *     // method (on constructor)\n         *     result = Reflect.getOwnMetadataKeys(Example, \"staticMethod\");\n         *\n         *     // method (on prototype)\n         *     result = Reflect.getOwnMetadataKeys(Example.prototype, \"method\");\n         *\n         */\n        function getOwnMetadataKeys(target, propertyKey) {\n            if (!IsObject(target))\n                throw new TypeError();\n            if (!IsUndefined(propertyKey))\n                propertyKey = ToPropertyKey(propertyKey);\n            return OrdinaryOwnMetadataKeys(target, propertyKey);\n        }\n        exporter(\"getOwnMetadataKeys\", getOwnMetadataKeys);\n        /**\n         * Deletes the metadata entry from the target object with the provided key.\n         * @param metadataKey A key used to store and retrieve metadata.\n         * @param target The target object on which the metadata is defined.\n         * @param propertyKey (Optional) The property key for the target.\n         * @returns `true` if the metadata entry was found and deleted; otherwise, false.\n         * @example\n         *\n         *     class Example {\n         *         // property declarations are not part of ES6, though they are valid in TypeScript:\n         *         // static staticProperty;\n         *         // property;\n         *\n         *         constructor(p) { }\n         *         static staticMethod(p) { }\n         *         method(p) { }\n         *     }\n         *\n         *     // constructor\n         *     result = Reflect.deleteMetadata(\"custom:annotation\", Example);\n         *\n         *     // property (on constructor)\n         *     result = Reflect.deleteMetadata(\"custom:annotation\", Example, \"staticProperty\");\n         *\n         *     // property (on prototype)\n         *     result = Reflect.deleteMetadata(\"custom:annotation\", Example.prototype, \"property\");\n         *\n         *     // method (on constructor)\n         *     result = Reflect.deleteMetadata(\"custom:annotation\", Example, \"staticMethod\");\n         *\n         *     // method (on prototype)\n         *     result = Reflect.deleteMetadata(\"custom:annotation\", Example.prototype, \"method\");\n         *\n         */\n        function deleteMetadata(metadataKey, target, propertyKey) {\n            if (!IsObject(target))\n                throw new TypeError();\n            if (!IsUndefined(propertyKey))\n                propertyKey = ToPropertyKey(propertyKey);\n            var metadataMap = GetOrCreateMetadataMap(target, propertyKey, /*Create*/ false);\n            if (IsUndefined(metadataMap))\n                return false;\n            if (!metadataMap.delete(metadataKey))\n                return false;\n            if (metadataMap.size > 0)\n                return true;\n            var targetMetadata = Metadata.get(target);\n            targetMetadata.delete(propertyKey);\n            if (targetMetadata.size > 0)\n                return true;\n            Metadata.delete(target);\n            return true;\n        }\n        exporter(\"deleteMetadata\", deleteMetadata);\n        function DecorateConstructor(decorators, target) {\n            for (var i = decorators.length - 1; i >= 0; --i) {\n                var decorator = decorators[i];\n                var decorated = decorator(target);\n                if (!IsUndefined(decorated) && !IsNull(decorated)) {\n                    if (!IsConstructor(decorated))\n                        throw new TypeError();\n                    target = decorated;\n                }\n            }\n            return target;\n        }\n        function DecorateProperty(decorators, target, propertyKey, descriptor) {\n            for (var i = decorators.length - 1; i >= 0; --i) {\n                var decorator = decorators[i];\n                var decorated = decorator(target, propertyKey, descriptor);\n                if (!IsUndefined(decorated) && !IsNull(decorated)) {\n                    if (!IsObject(decorated))\n                        throw new TypeError();\n                    descriptor = decorated;\n                }\n            }\n            return descriptor;\n        }\n        function GetOrCreateMetadataMap(O, P, Create) {\n            var targetMetadata = Metadata.get(O);\n            if (IsUndefined(targetMetadata)) {\n                if (!Create)\n                    return undefined;\n                targetMetadata = new _Map();\n                Metadata.set(O, targetMetadata);\n            }\n            var metadataMap = targetMetadata.get(P);\n            if (IsUndefined(metadataMap)) {\n                if (!Create)\n                    return undefined;\n                metadataMap = new _Map();\n                targetMetadata.set(P, metadataMap);\n            }\n            return metadataMap;\n        }\n        // 3.1.1.1 OrdinaryHasMetadata(MetadataKey, O, P)\n        // https://rbuckton.github.io/reflect-metadata/#ordinaryhasmetadata\n        function OrdinaryHasMetadata(MetadataKey, O, P) {\n            var hasOwn = OrdinaryHasOwnMetadata(MetadataKey, O, P);\n            if (hasOwn)\n                return true;\n            var parent = OrdinaryGetPrototypeOf(O);\n            if (!IsNull(parent))\n                return OrdinaryHasMetadata(MetadataKey, parent, P);\n            return false;\n        }\n        // 3.1.2.1 OrdinaryHasOwnMetadata(MetadataKey, O, P)\n        // https://rbuckton.github.io/reflect-metadata/#ordinaryhasownmetadata\n        function OrdinaryHasOwnMetadata(MetadataKey, O, P) {\n            var metadataMap = GetOrCreateMetadataMap(O, P, /*Create*/ false);\n            if (IsUndefined(metadataMap))\n                return false;\n            return ToBoolean(metadataMap.has(MetadataKey));\n        }\n        // 3.1.3.1 OrdinaryGetMetadata(MetadataKey, O, P)\n        // https://rbuckton.github.io/reflect-metadata/#ordinarygetmetadata\n        function OrdinaryGetMetadata(MetadataKey, O, P) {\n            var hasOwn = OrdinaryHasOwnMetadata(MetadataKey, O, P);\n            if (hasOwn)\n                return OrdinaryGetOwnMetadata(MetadataKey, O, P);\n            var parent = OrdinaryGetPrototypeOf(O);\n            if (!IsNull(parent))\n                return OrdinaryGetMetadata(MetadataKey, parent, P);\n            return undefined;\n        }\n        // 3.1.4.1 OrdinaryGetOwnMetadata(MetadataKey, O, P)\n        // https://rbuckton.github.io/reflect-metadata/#ordinarygetownmetadata\n        function OrdinaryGetOwnMetadata(MetadataKey, O, P) {\n            var metadataMap = GetOrCreateMetadataMap(O, P, /*Create*/ false);\n            if (IsUndefined(metadataMap))\n                return undefined;\n            return metadataMap.get(MetadataKey);\n        }\n        // 3.1.5.1 OrdinaryDefineOwnMetadata(MetadataKey, MetadataValue, O, P)\n        // https://rbuckton.github.io/reflect-metadata/#ordinarydefineownmetadata\n        function OrdinaryDefineOwnMetadata(MetadataKey, MetadataValue, O, P) {\n            var metadataMap = GetOrCreateMetadataMap(O, P, /*Create*/ true);\n            metadataMap.set(MetadataKey, MetadataValue);\n        }\n        // 3.1.6.1 OrdinaryMetadataKeys(O, P)\n        // https://rbuckton.github.io/reflect-metadata/#ordinarymetadatakeys\n        function OrdinaryMetadataKeys(O, P) {\n            var ownKeys = OrdinaryOwnMetadataKeys(O, P);\n            var parent = OrdinaryGetPrototypeOf(O);\n            if (parent === null)\n                return ownKeys;\n            var parentKeys = OrdinaryMetadataKeys(parent, P);\n            if (parentKeys.length <= 0)\n                return ownKeys;\n            if (ownKeys.length <= 0)\n                return parentKeys;\n            var set = new _Set();\n            var keys = [];\n            for (var _i = 0, ownKeys_1 = ownKeys; _i < ownKeys_1.length; _i++) {\n                var key = ownKeys_1[_i];\n                var hasKey = set.has(key);\n                if (!hasKey) {\n                    set.add(key);\n                    keys.push(key);\n                }\n            }\n            for (var _a = 0, parentKeys_1 = parentKeys; _a < parentKeys_1.length; _a++) {\n                var key = parentKeys_1[_a];\n                var hasKey = set.has(key);\n                if (!hasKey) {\n                    set.add(key);\n                    keys.push(key);\n                }\n            }\n            return keys;\n        }\n        // 3.1.7.1 OrdinaryOwnMetadataKeys(O, P)\n        // https://rbuckton.github.io/reflect-metadata/#ordinaryownmetadatakeys\n        function OrdinaryOwnMetadataKeys(O, P) {\n            var keys = [];\n            var metadataMap = GetOrCreateMetadataMap(O, P, /*Create*/ false);\n            if (IsUndefined(metadataMap))\n                return keys;\n            var keysObj = metadataMap.keys();\n            var iterator = GetIterator(keysObj);\n            var k = 0;\n            while (true) {\n                var next = IteratorStep(iterator);\n                if (!next) {\n                    keys.length = k;\n                    return keys;\n                }\n                var nextValue = IteratorValue(next);\n                try {\n                    keys[k] = nextValue;\n                }\n                catch (e) {\n                    try {\n                        IteratorClose(iterator);\n                    }\n                    finally {\n                        throw e;\n                    }\n                }\n                k++;\n            }\n        }\n        // 6 ECMAScript Data Typ0es and Values\n        // https://tc39.github.io/ecma262/#sec-ecmascript-data-types-and-values\n        function Type(x) {\n            if (x === null)\n                return 1 /* Null */;\n            switch (typeof x) {\n                case \"undefined\": return 0 /* Undefined */;\n                case \"boolean\": return 2 /* Boolean */;\n                case \"string\": return 3 /* String */;\n                case \"symbol\": return 4 /* Symbol */;\n                case \"number\": return 5 /* Number */;\n                case \"object\": return x === null ? 1 /* Null */ : 6 /* Object */;\n                default: return 6 /* Object */;\n            }\n        }\n        // 6.1.1 The Undefined Type\n        // https://tc39.github.io/ecma262/#sec-ecmascript-language-types-undefined-type\n        function IsUndefined(x) {\n            return x === undefined;\n        }\n        // 6.1.2 The Null Type\n        // https://tc39.github.io/ecma262/#sec-ecmascript-language-types-null-type\n        function IsNull(x) {\n            return x === null;\n        }\n        // 6.1.5 The Symbol Type\n        // https://tc39.github.io/ecma262/#sec-ecmascript-language-types-symbol-type\n        function IsSymbol(x) {\n            return typeof x === \"symbol\";\n        }\n        // 6.1.7 The Object Type\n        // https://tc39.github.io/ecma262/#sec-object-type\n        function IsObject(x) {\n            return typeof x === \"object\" ? x !== null : typeof x === \"function\";\n        }\n        // 7.1 Type Conversion\n        // https://tc39.github.io/ecma262/#sec-type-conversion\n        // 7.1.1 ToPrimitive(input [, PreferredType])\n        // https://tc39.github.io/ecma262/#sec-toprimitive\n        function ToPrimitive(input, PreferredType) {\n            switch (Type(input)) {\n                case 0 /* Undefined */: return input;\n                case 1 /* Null */: return input;\n                case 2 /* Boolean */: return input;\n                case 3 /* String */: return input;\n                case 4 /* Symbol */: return input;\n                case 5 /* Number */: return input;\n            }\n            var hint = PreferredType === 3 /* String */ ? \"string\" : PreferredType === 5 /* Number */ ? \"number\" : \"default\";\n            var exoticToPrim = GetMethod(input, toPrimitiveSymbol);\n            if (exoticToPrim !== undefined) {\n                var result = exoticToPrim.call(input, hint);\n                if (IsObject(result))\n                    throw new TypeError();\n                return result;\n            }\n            return OrdinaryToPrimitive(input, hint === \"default\" ? \"number\" : hint);\n        }\n        // 7.1.1.1 OrdinaryToPrimitive(O, hint)\n        // https://tc39.github.io/ecma262/#sec-ordinarytoprimitive\n        function OrdinaryToPrimitive(O, hint) {\n            if (hint === \"string\") {\n                var toString_1 = O.toString;\n                if (IsCallable(toString_1)) {\n                    var result = toString_1.call(O);\n                    if (!IsObject(result))\n                        return result;\n                }\n                var valueOf = O.valueOf;\n                if (IsCallable(valueOf)) {\n                    var result = valueOf.call(O);\n                    if (!IsObject(result))\n                        return result;\n                }\n            }\n            else {\n                var valueOf = O.valueOf;\n                if (IsCallable(valueOf)) {\n                    var result = valueOf.call(O);\n                    if (!IsObject(result))\n                        return result;\n                }\n                var toString_2 = O.toString;\n                if (IsCallable(toString_2)) {\n                    var result = toString_2.call(O);\n                    if (!IsObject(result))\n                        return result;\n                }\n            }\n            throw new TypeError();\n        }\n        // 7.1.2 ToBoolean(argument)\n        // https://tc39.github.io/ecma262/2016/#sec-toboolean\n        function ToBoolean(argument) {\n            return !!argument;\n        }\n        // 7.1.12 ToString(argument)\n        // https://tc39.github.io/ecma262/#sec-tostring\n        function ToString(argument) {\n            return \"\" + argument;\n        }\n        // 7.1.14 ToPropertyKey(argument)\n        // https://tc39.github.io/ecma262/#sec-topropertykey\n        function ToPropertyKey(argument) {\n            var key = ToPrimitive(argument, 3 /* String */);\n            if (IsSymbol(key))\n                return key;\n            return ToString(key);\n        }\n        // 7.2 Testing and Comparison Operations\n        // https://tc39.github.io/ecma262/#sec-testing-and-comparison-operations\n        // 7.2.2 IsArray(argument)\n        // https://tc39.github.io/ecma262/#sec-isarray\n        function IsArray(argument) {\n            return Array.isArray\n                ? Array.isArray(argument)\n                : argument instanceof Object\n                    ? argument instanceof Array\n                    : Object.prototype.toString.call(argument) === \"[object Array]\";\n        }\n        // 7.2.3 IsCallable(argument)\n        // https://tc39.github.io/ecma262/#sec-iscallable\n        function IsCallable(argument) {\n            // NOTE: This is an approximation as we cannot check for [[Call]] internal method.\n            return typeof argument === \"function\";\n        }\n        // 7.2.4 IsConstructor(argument)\n        // https://tc39.github.io/ecma262/#sec-isconstructor\n        function IsConstructor(argument) {\n            // NOTE: This is an approximation as we cannot check for [[Construct]] internal method.\n            return typeof argument === \"function\";\n        }\n        // 7.2.7 IsPropertyKey(argument)\n        // https://tc39.github.io/ecma262/#sec-ispropertykey\n        function IsPropertyKey(argument) {\n            switch (Type(argument)) {\n                case 3 /* String */: return true;\n                case 4 /* Symbol */: return true;\n                default: return false;\n            }\n        }\n        // 7.3 Operations on Objects\n        // https://tc39.github.io/ecma262/#sec-operations-on-objects\n        // 7.3.9 GetMethod(V, P)\n        // https://tc39.github.io/ecma262/#sec-getmethod\n        function GetMethod(V, P) {\n            var func = V[P];\n            if (func === undefined || func === null)\n                return undefined;\n            if (!IsCallable(func))\n                throw new TypeError();\n            return func;\n        }\n        // 7.4 Operations on Iterator Objects\n        // https://tc39.github.io/ecma262/#sec-operations-on-iterator-objects\n        function GetIterator(obj) {\n            var method = GetMethod(obj, iteratorSymbol);\n            if (!IsCallable(method))\n                throw new TypeError(); // from Call\n            var iterator = method.call(obj);\n            if (!IsObject(iterator))\n                throw new TypeError();\n            return iterator;\n        }\n        // 7.4.4 IteratorValue(iterResult)\n        // https://tc39.github.io/ecma262/2016/#sec-iteratorvalue\n        function IteratorValue(iterResult) {\n            return iterResult.value;\n        }\n        // 7.4.5 IteratorStep(iterator)\n        // https://tc39.github.io/ecma262/#sec-iteratorstep\n        function IteratorStep(iterator) {\n            var result = iterator.next();\n            return result.done ? false : result;\n        }\n        // 7.4.6 IteratorClose(iterator, completion)\n        // https://tc39.github.io/ecma262/#sec-iteratorclose\n        function IteratorClose(iterator) {\n            var f = iterator[\"return\"];\n            if (f)\n                f.call(iterator);\n        }\n        // 9.1 Ordinary Object Internal Methods and Internal Slots\n        // https://tc39.github.io/ecma262/#sec-ordinary-object-internal-methods-and-internal-slots\n        // 9.1.1.1 OrdinaryGetPrototypeOf(O)\n        // https://tc39.github.io/ecma262/#sec-ordinarygetprototypeof\n        function OrdinaryGetPrototypeOf(O) {\n            var proto = Object.getPrototypeOf(O);\n            if (typeof O !== \"function\" || O === functionPrototype)\n                return proto;\n            // TypeScript doesn't set __proto__ in ES5, as it's non-standard.\n            // Try to determine the superclass constructor. Compatible implementations\n            // must either set __proto__ on a subclass constructor to the superclass constructor,\n            // or ensure each class has a valid `constructor` property on its prototype that\n            // points back to the constructor.\n            // If this is not the same as Function.[[Prototype]], then this is definately inherited.\n            // This is the case when in ES6 or when using __proto__ in a compatible browser.\n            if (proto !== functionPrototype)\n                return proto;\n            // If the super prototype is Object.prototype, null, or undefined, then we cannot determine the heritage.\n            var prototype = O.prototype;\n            var prototypeProto = prototype && Object.getPrototypeOf(prototype);\n            if (prototypeProto == null || prototypeProto === Object.prototype)\n                return proto;\n            // If the constructor was not a function, then we cannot determine the heritage.\n            var constructor = prototypeProto.constructor;\n            if (typeof constructor !== \"function\")\n                return proto;\n            // If we have some kind of self-reference, then we cannot determine the heritage.\n            if (constructor === O)\n                return proto;\n            // we have a pretty good guess at the heritage.\n            return constructor;\n        }\n        // naive Map shim\n        function CreateMapPolyfill() {\n            var cacheSentinel = {};\n            var arraySentinel = [];\n            var MapIterator = /** @class */ (function () {\n                function MapIterator(keys, values, selector) {\n                    this._index = 0;\n                    this._keys = keys;\n                    this._values = values;\n                    this._selector = selector;\n                }\n                MapIterator.prototype[\"@@iterator\"] = function () { return this; };\n                MapIterator.prototype[iteratorSymbol] = function () { return this; };\n                MapIterator.prototype.next = function () {\n                    var index = this._index;\n                    if (index >= 0 && index < this._keys.length) {\n                        var result = this._selector(this._keys[index], this._values[index]);\n                        if (index + 1 >= this._keys.length) {\n                            this._index = -1;\n                            this._keys = arraySentinel;\n                            this._values = arraySentinel;\n                        }\n                        else {\n                            this._index++;\n                        }\n                        return { value: result, done: false };\n                    }\n                    return { value: undefined, done: true };\n                };\n                MapIterator.prototype.throw = function (error) {\n                    if (this._index >= 0) {\n                        this._index = -1;\n                        this._keys = arraySentinel;\n                        this._values = arraySentinel;\n                    }\n                    throw error;\n                };\n                MapIterator.prototype.return = function (value) {\n                    if (this._index >= 0) {\n                        this._index = -1;\n                        this._keys = arraySentinel;\n                        this._values = arraySentinel;\n                    }\n                    return { value: value, done: true };\n                };\n                return MapIterator;\n            }());\n            return /** @class */ (function () {\n                function Map() {\n                    this._keys = [];\n                    this._values = [];\n                    this._cacheKey = cacheSentinel;\n                    this._cacheIndex = -2;\n                }\n                Object.defineProperty(Map.prototype, \"size\", {\n                    get: function () { return this._keys.length; },\n                    enumerable: true,\n                    configurable: true\n                });\n                Map.prototype.has = function (key) { return this._find(key, /*insert*/ false) >= 0; };\n                Map.prototype.get = function (key) {\n                    var index = this._find(key, /*insert*/ false);\n                    return index >= 0 ? this._values[index] : undefined;\n                };\n                Map.prototype.set = function (key, value) {\n                    var index = this._find(key, /*insert*/ true);\n                    this._values[index] = value;\n                    return this;\n                };\n                Map.prototype.delete = function (key) {\n                    var index = this._find(key, /*insert*/ false);\n                    if (index >= 0) {\n                        var size = this._keys.length;\n                        for (var i = index + 1; i < size; i++) {\n                            this._keys[i - 1] = this._keys[i];\n                            this._values[i - 1] = this._values[i];\n                        }\n                        this._keys.length--;\n                        this._values.length--;\n                        if (key === this._cacheKey) {\n                            this._cacheKey = cacheSentinel;\n                            this._cacheIndex = -2;\n                        }\n                        return true;\n                    }\n                    return false;\n                };\n                Map.prototype.clear = function () {\n                    this._keys.length = 0;\n                    this._values.length = 0;\n                    this._cacheKey = cacheSentinel;\n                    this._cacheIndex = -2;\n                };\n                Map.prototype.keys = function () { return new MapIterator(this._keys, this._values, getKey); };\n                Map.prototype.values = function () { return new MapIterator(this._keys, this._values, getValue); };\n                Map.prototype.entries = function () { return new MapIterator(this._keys, this._values, getEntry); };\n                Map.prototype[\"@@iterator\"] = function () { return this.entries(); };\n                Map.prototype[iteratorSymbol] = function () { return this.entries(); };\n                Map.prototype._find = function (key, insert) {\n                    if (this._cacheKey !== key) {\n                        this._cacheIndex = this._keys.indexOf(this._cacheKey = key);\n                    }\n                    if (this._cacheIndex < 0 && insert) {\n                        this._cacheIndex = this._keys.length;\n                        this._keys.push(key);\n                        this._values.push(undefined);\n                    }\n                    return this._cacheIndex;\n                };\n                return Map;\n            }());\n            function getKey(key, _) {\n                return key;\n            }\n            function getValue(_, value) {\n                return value;\n            }\n            function getEntry(key, value) {\n                return [key, value];\n            }\n        }\n        // naive Set shim\n        function CreateSetPolyfill() {\n            return /** @class */ (function () {\n                function Set() {\n                    this._map = new _Map();\n                }\n                Object.defineProperty(Set.prototype, \"size\", {\n                    get: function () { return this._map.size; },\n                    enumerable: true,\n                    configurable: true\n                });\n                Set.prototype.has = function (value) { return this._map.has(value); };\n                Set.prototype.add = function (value) { return this._map.set(value, value), this; };\n                Set.prototype.delete = function (value) { return this._map.delete(value); };\n                Set.prototype.clear = function () { this._map.clear(); };\n                Set.prototype.keys = function () { return this._map.keys(); };\n                Set.prototype.values = function () { return this._map.values(); };\n                Set.prototype.entries = function () { return this._map.entries(); };\n                Set.prototype[\"@@iterator\"] = function () { return this.keys(); };\n                Set.prototype[iteratorSymbol] = function () { return this.keys(); };\n                return Set;\n            }());\n        }\n        // naive WeakMap shim\n        function CreateWeakMapPolyfill() {\n            var UUID_SIZE = 16;\n            var keys = HashMap.create();\n            var rootKey = CreateUniqueKey();\n            return /** @class */ (function () {\n                function WeakMap() {\n                    this._key = CreateUniqueKey();\n                }\n                WeakMap.prototype.has = function (target) {\n                    var table = GetOrCreateWeakMapTable(target, /*create*/ false);\n                    return table !== undefined ? HashMap.has(table, this._key) : false;\n                };\n                WeakMap.prototype.get = function (target) {\n                    var table = GetOrCreateWeakMapTable(target, /*create*/ false);\n                    return table !== undefined ? HashMap.get(table, this._key) : undefined;\n                };\n                WeakMap.prototype.set = function (target, value) {\n                    var table = GetOrCreateWeakMapTable(target, /*create*/ true);\n                    table[this._key] = value;\n                    return this;\n                };\n                WeakMap.prototype.delete = function (target) {\n                    var table = GetOrCreateWeakMapTable(target, /*create*/ false);\n                    return table !== undefined ? delete table[this._key] : false;\n                };\n                WeakMap.prototype.clear = function () {\n                    // NOTE: not a real clear, just makes the previous data unreachable\n                    this._key = CreateUniqueKey();\n                };\n                return WeakMap;\n            }());\n            function CreateUniqueKey() {\n                var key;\n                do\n                    key = \"@@WeakMap@@\" + CreateUUID();\n                while (HashMap.has(keys, key));\n                keys[key] = true;\n                return key;\n            }\n            function GetOrCreateWeakMapTable(target, create) {\n                if (!hasOwn.call(target, rootKey)) {\n                    if (!create)\n                        return undefined;\n                    Object.defineProperty(target, rootKey, { value: HashMap.create() });\n                }\n                return target[rootKey];\n            }\n            function FillRandomBytes(buffer, size) {\n                for (var i = 0; i < size; ++i)\n                    buffer[i] = Math.random() * 0xff | 0;\n                return buffer;\n            }\n            function GenRandomBytes(size) {\n                if (typeof Uint8Array === \"function\") {\n                    if (typeof crypto !== \"undefined\")\n                        return crypto.getRandomValues(new Uint8Array(size));\n                    if (typeof msCrypto !== \"undefined\")\n                        return msCrypto.getRandomValues(new Uint8Array(size));\n                    return FillRandomBytes(new Uint8Array(size), size);\n                }\n                return FillRandomBytes(new Array(size), size);\n            }\n            function CreateUUID() {\n                var data = GenRandomBytes(UUID_SIZE);\n                // mark as random - RFC 4122 § 4.4\n                data[6] = data[6] & 0x4f | 0x40;\n                data[8] = data[8] & 0xbf | 0x80;\n                var result = \"\";\n                for (var offset = 0; offset < UUID_SIZE; ++offset) {\n                    var byte = data[offset];\n                    if (offset === 4 || offset === 6 || offset === 8)\n                        result += \"-\";\n                    if (byte < 16)\n                        result += \"0\";\n                    result += byte.toString(16).toLowerCase();\n                }\n                return result;\n            }\n        }\n        // uses a heuristic used by v8 and chakra to force an object into dictionary mode.\n        function MakeDictionary(obj) {\n            obj.__ = undefined;\n            delete obj.__;\n            return obj;\n        }\n    });\n})(Reflect || (Reflect = {}));\n","import { injectable } from \"inversify\";\r\nimport { IDebouncer, IDebouncerFactory } from \"./interfaces\";\r\nimport { Debouncer } from \"./util/Debouncer\";\r\n/**\r\n * A factory for creating instances of `Debouncer`.\r\n *\r\n * The `DebouncerFactory` class implements the `IDebouncerFactory` interface\r\n * and is responsible for providing a method to create new `Debouncer` objects.\r\n * This class uses the `@injectable` decorator to allow it to be injected into\r\n * other components, enhancing modularity and testability.\r\n *\r\n * @see {@link IDebouncerFactory} for interface documentation.\r\n */\r\n@injectable()\r\nexport class DebouncerFactory implements IDebouncerFactory {\r\n    /**\r\n     * Creates a new instance of `Debouncer`.\r\n     *\r\n     * This method implements the `create` method from the `IDebouncerFactory` interface.\r\n     * It allows consumers to obtain a fresh instance of `Debouncer` without needing to know\r\n     * the details of how the `Debouncer` is constructed.\r\n     *\r\n     * @returns {IDebouncer} An instance of `Debouncer` which can be used to debounce function calls.\r\n     */\r\n    create(): IDebouncer {\r\n        return new Debouncer();\r\n    }\r\n}\r\n","import { injectable } from \"inversify\";\r\nimport { IEventEmitter } from \"./interfaces\";\r\n\r\n\r\n\r\n// Define a type that describes the events and the structure of data they pass.\r\n\r\n\r\n// EventListener now strictly expects data that conforms to the structure described in the EventMap.\r\n\r\n\r\n@injectable()\r\nexport class EventEmitter<TEvents> implements IEventEmitter<TEvents> {\r\n    private listeners: { [K in keyof TEvents]?: ((data: TEvents[K]) => void)[] } = {};\r\n\r\n    on<K extends keyof TEvents>(event: K, listener: (data: TEvents[K]) => void): void {\r\n        if (!this.listeners[event]) {\r\n            this.listeners[event] = [];\r\n        }\r\n        this.listeners[event]!.push(listener);\r\n    }\r\n\r\n    off<K extends keyof TEvents>(event: K, listener: (data: TEvents[K]) => void): void {\r\n        if (!this.listeners[event]) return;\r\n        const callbackIndex = this.listeners[event]!.indexOf(listener);\r\n        if (callbackIndex >= 0) this.listeners[event]!.splice(callbackIndex, 1);\r\n    }\r\n\r\n    emit<K extends keyof TEvents>(event: K, data: TEvents[K]): void {\r\n        if (!this.listeners[event]) return;\r\n        for (const listener of this.listeners[event]!) {\r\n            listener(data);\r\n        }\r\n    }\r\n}\r\n\r\n","import { IForm } from \"./interfaces\";\r\n\r\nexport class Form implements IForm {\r\n    formElement: HTMLFormElement;\r\n    isAjax: boolean = false;\r\n    attributes: NamedNodeMap;\r\n    elements: HTMLFormControlsCollection;\r\n    element: Element;\r\n    buttons: HTMLButtonElement[];\r\n    constructor(formElement: HTMLFormElement) {\r\n        this.formElement = formElement;\r\n        this.attributes = formElement.attributes;\r\n        this.elements = formElement.elements;\r\n        this.element = Array.from(this.elements).find(el => el instanceof Element) as Element;\r\n        this.buttons = Array.from(this.elements).filter(el => el instanceof HTMLButtonElement) as HTMLButtonElement[];\r\n        this.init();\r\n    }\r\n\r\n\r\n\r\n    init(): void {\r\n        // Check the attriubes to see if the form is ajax\r\n        this.isAjax = this.formElement.hasAttribute(\"data-ajax\");\r\n        if (this.isAjax) {\r\n            this.setupAjax();\r\n        }\r\n\r\n    }\r\n\r\n    setupAjax(): void {\r\n        // Get the update target\r\n        const updateTarget = this.attributes.getNamedItem(\"data-ajax-update\");\r\n        if (updateTarget === undefined) {\r\n            throw new Error(\"data-ajax-update attribute is undefined\");\r\n        }\r\n    }\r\n}\r\n","import { injectable } from \"inversify\";\r\nimport { IForm, IFormFactory } from \"./interfaces\";\r\nimport { Result } from \"./Result\";\r\nimport { Form } from \"./Form\";\r\n\r\n\r\n@injectable()\r\nexport class FormFactory implements IFormFactory {\r\n    constructor() {\r\n    }\r\n    create(formElement: HTMLFormElement): Result<IForm> {\r\n        try {\r\n            if (formElement === undefined) {\r\n                return new Result<IForm>(new Error(\"Form Element Is Undefined\"));\r\n            }\r\n            const form = new Form(formElement);\r\n\r\n\r\n            return new Result<IForm>(form);\r\n        } catch (error: unknown) {\r\n            return new Result<IForm>(error as Error);\r\n        }\r\n    }\r\n}\r\n","import { inject, injectable } from \"inversify\";\r\nimport { IDebouncerFactory, IDecoratedLogger, IForm, IFormFactory, IFormManager, IObservableCollection, IValidationResult, IValidationService } from \"./interfaces\";\r\nimport { TYPES } from \"./di/container-types\";\r\nimport { Result } from \"./Result\";\r\nimport { Debouncer } from \"./util/Debouncer\";\r\n\r\n\r\n@injectable()\r\nexport class FormManager implements IFormManager {\r\n    eventListenersMap: WeakMap<Element, Record<string, EventListener>> = new WeakMap();\r\n    dirtyMap: { [key: string]: boolean } = {};\r\n    debouncers: { [key: string]: Debouncer } = {};\r\n\r\n    constructor(\r\n        @inject(TYPES.FormFactory) private readonly _formFactory: IFormFactory,\r\n        @inject(TYPES.DebouncerFactory) private readonly _debounceFactory: IDebouncerFactory,\r\n        @inject(TYPES.ObservableFormsCollection) private readonly _formsCollection: IObservableCollection<IForm>,\r\n        @inject(TYPES.ValidationService) private readonly _validationService: IValidationService,\r\n        @inject(TYPES.DebuggingLogger) private readonly _logger: IDecoratedLogger) {\r\n\r\n        // Create a new Map for the event listeners\r\n        this.eventListenersMap = new WeakMap();\r\n    }\r\n\r\n    async init(): Promise<void> {\r\n        const forms = this.createForms();\r\n        if (!forms) {\r\n            return;\r\n        }\r\n        // Ensure setupForms is awaited so that it completes before init resolves\r\n        await this.setupForms(forms);\r\n    }\r\n\r\n    // Sets up all of the forms, add them to the collection, and sets up listeners\r\n    async setupForms(forms: IForm[]): Promise<void> {\r\n        if (!forms) {\r\n            this._logger.getLogger().error(new Error(\"No forms provided to setupForms.\"));\r\n            return;\r\n        }\r\n        for (const form of forms) {\r\n            try {\r\n                // Remove any existing listeners for the form. (\"This only applies to forms loaded dynamically since a page reload nerfs all state\")\r\n                await this.removeListeners(form.formElement);\r\n                this.cleanupResourcesForForm(form.formElement);\r\n                // Setup Listeners\r\n                // Ensure this promise is awaited so that listeners are set up before proceeding\r\n                await this.configureListeners(form);\r\n\r\n                // Add the form to the observable collection\r\n                this._formsCollection.addItem(form);\r\n            } catch (error) {\r\n                // Log any errors\r\n                this._logger.getLogger().error(error instanceof Error ? error : new Error(\"Error in setupForms: \" + error));\r\n            }\r\n        }\r\n    }\r\n\r\n    async configureListeners(form: IForm): Promise<void> {\r\n        // Validate the control using the validation service\r\n        const validateControl = async (input: HTMLInputElement | HTMLTextAreaElement | HTMLSelectElement): Promise<void> => {\r\n            await this._validationService.validateControl(input);\r\n        };\r\n\r\n        // Marks the control as dirty, which means it has been interacted with basically\r\n        const makeControlDirty = (input: HTMLInputElement | HTMLTextAreaElement | HTMLSelectElement): void => {\r\n            this.dirtyMap[input.name] = true;\r\n        };\r\n\r\n        const debouncedValidate = (input: HTMLInputElement | HTMLTextAreaElement | HTMLSelectElement, debounceTime: number): void => {\r\n            if (!this.debouncers[input.name]) {\r\n                this.debouncers[input.name] = this._debounceFactory.create(); // Create a new debouncer for the input\r\n            }\r\n            // Get the debouncer for the input\r\n            const debouncer = this.debouncers[input.name];\r\n            debouncer.debounce(async () => {\r\n                console.log(`Debouncing ${input.name}`);\r\n                await validateControl(input);\r\n            }, debounceTime);\r\n        };\r\n\r\n        // Debounced input event handler\r\n        const inputEventHandler = (event: Event): void => {\r\n            const control = event.target as HTMLInputElement | HTMLTextAreaElement | HTMLSelectElement;\r\n            makeControlDirty(control);\r\n            debouncedValidate(control, 500); // Using 500ms for input debounce time\r\n        };\r\n\r\n\r\n        // Non-debounced focus event handler (\"Useful for adding some CSS stuff. Other than pretty worthless\")\r\n        const focusEventHandler = (event: Event): void => {\r\n            // For Future Use\r\n        };\r\n\r\n        // Blur event handler\r\n        const blurEventHandler: EventListener = (event: Event) => {\r\n            // Use a type assertion to convince TypeScript that 'event' is a FocusEvent.\r\n            const focusEvent = event as FocusEvent;\r\n            const target = focusEvent.target as HTMLInputElement | HTMLTextAreaElement | HTMLSelectElement;\r\n            const relatedTarget = focusEvent.relatedTarget as HTMLElement;\r\n\r\n            // Check if the relatedTarget is focusable and warrants validation\r\n            if (relatedTarget && (relatedTarget.tagName === \"INPUT\" || relatedTarget.tagName === \"SELECT\" || relatedTarget.tagName === \"TEXTAREA\" || relatedTarget.isContentEditable)) {\r\n                // Perform actions for blurring towards a focusable element\r\n                makeControlDirty(target);\r\n                this._validationService.validateControl(target).catch(error => {\r\n                    this._logger.getLogger().error(error instanceof Error ? error : new Error(\"Error in blurEventHandler: \" + error));\r\n                });\r\n            } else {\r\n                // This blur is to a non-focusable element sont call validateControl\r\n                return;\r\n            }\r\n        };\r\n\r\n        // Keep track of event listeners to be able to remove them later\r\n        const listeners: Record<string, EventListener> = {\r\n            input: inputEventHandler as EventListener,\r\n            focus: focusEventHandler as EventListener,\r\n            blur: blurEventHandler as EventListener\r\n        };\r\n        // Set the listeners for the form so we can cleanup later. Usefull for dynamically loaded forms\r\n        this.eventListenersMap.set(form.formElement, listeners);\r\n        this.addListeners(form.formElement,listeners);\r\n    }\r\n\r\n    // Remove the listeners from the form\r\n    async removeListeners(formElement:HTMLFormElement): Promise<void> {\r\n        const listeners = this.eventListenersMap.get(formElement);\r\n        if (listeners) {\r\n            for (const [eventType, listener] of Object.entries(listeners)) {\r\n                // Ensure the listener is a function before attempting to remove\r\n                if (typeof listener === \"function\") {\r\n                    // Correctly map the event type for focus and blur\r\n                    const domEventType = eventType === \"focus\" ? \"focusin\" : eventType === \"blur\" ? \"focusout\" : eventType;\r\n                    formElement.removeEventListener(domEventType, listener);\r\n                }\r\n            }\r\n            this.eventListenersMap.delete(formElement);\r\n        }\r\n    }\r\n\r\n    // Get all of the form elements\r\n    createForms(): IForm[] {\r\n        const forms = document.querySelectorAll(\"form\");\r\n        const formArray: IForm[] = [];\r\n        for (let i = 0; i < forms.length; i++) {\r\n            try {\r\n                const formResults = this._formFactory.create(forms[i]);\r\n                if (!formResults.isSuccess) {\r\n                // Handle the failure case\r\n                    const error = Result.handleError(formResults);\r\n                    this._logger.getLogger().error(new Error(error?.message || \"Unknown error creating form\"));\r\n                    continue; // Skip this form and continue with the next one\r\n                }\r\n                // Get the form from the result\r\n                const form = Result.handleSuccess(formResults);\r\n                // Add the form to the array if it's not null\r\n                if (form) {\r\n                    formArray.push(form);\r\n                } else {\r\n                    this._logger.getLogger().error(new Error(\"Form creation returned a null result\"));\r\n                }\r\n            } catch (error) {\r\n            // Catch any other unexpected errors\r\n                this._logger.getLogger().error(error instanceof Error ? error : new Error(\"An unexpected error occurred\"));\r\n            }\r\n        }\r\n        return formArray; // Return the formArray after processing all forms\r\n    }\r\n\r\n    // Add the listeners to the form\r\n    private addListeners(formElement:HTMLFormElement,eventListeners: Record<string, EventListener>): void {\r\n        // Add event listeners and store them in the map\r\n        for (const [eventType, listener] of Object.entries(eventListeners)) {\r\n            if (eventType === \"focus\") {\r\n                // For focus, you might want to listen to focusin event instead\r\n                formElement.addEventListener(\"focusin\", listener);\r\n\r\n            } else if (eventType === \"blur\") {\r\n                // For blur, you might want to listen to focusout event instead\r\n                formElement.addEventListener(\"focusout\", listener);\r\n\r\n            } else {\r\n                // For other events, add them normally\r\n                formElement.addEventListener(eventType, listener);\r\n\r\n            }\r\n        }\r\n    }\r\n\r\n    clearDebouncersForElement(elementName: string): void {\r\n        const debouncer = this.debouncers[elementName];\r\n        if (debouncer) {\r\n            debouncer.cancel(); // Assuming your debouncer has a cancel method to clear timeouts\r\n            delete this.debouncers[elementName];\r\n        }\r\n    }\r\n\r\n    cleanupResourcesForForm(formElement: HTMLFormElement): void {\r\n        const controls = formElement.elements;\r\n        for (let i = 0; i < controls.length; i++) {\r\n            const control = controls[i];\r\n\r\n            if (isNamedControlElement(control)) {\r\n                // TypeScript is now aware that control is one of the specific elements with a 'name' property\r\n                const name = control.name;\r\n                // Now we can safely delete from dirtyMap and clean up debouncers\r\n                delete this.dirtyMap[name];\r\n                this.clearDebouncersForElement(name);\r\n            }\r\n        }\r\n    }\r\n}\r\n// TypeGuard for named control elements\r\nfunction isNamedControlElement(element: Element): element is HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement {\r\n    return \"name\" in element && (element instanceof HTMLInputElement || element instanceof HTMLSelectElement || element instanceof HTMLTextAreaElement);\r\n}\r\n","\r\nimport { inject, injectable } from \"inversify\";\r\nimport { IAppEvents, IEventEmitter, IFormManager, IInitializer, IOptions } from \"./interfaces\";\r\nimport { TYPES } from \"./di/container-types\";\r\n\r\n@injectable()\r\nexport class Initializer implements IInitializer {\r\n    constructor(\r\n        @inject(TYPES.Options) private readonly _options: IOptions,\r\n\r\n        @inject(TYPES.FormManager) private readonly _formManager: IFormManager,\r\n        @inject(TYPES.EventEmitter) private readonly _eventEmitter: IEventEmitter<IAppEvents>) {\r\n    }\r\n\r\n    async init(): Promise<void> {\r\n        // If the DOM is already loaded\r\n        if (document.readyState === \"loading\") {\r\n            // The document is still loading, add an event listener\r\n            document.addEventListener(\"DOMContentLoaded\", () => {\r\n                this.onDOMLoaded();\r\n            });\r\n        } else {\r\n            // The DOM is already loaded\r\n            this.onDOMLoaded();\r\n        }\r\n\r\n        this._eventEmitter.emit(\"Initialized\", {\r\n            source: \"Initializer\",\r\n            message: \"System Intialized\"\r\n        });\r\n    }\r\n\r\n    private async onDOMLoaded(): Promise<void> {\r\n        // Your logic for when the DOM is loaded\r\n        await this._formManager.init();\r\n\r\n    }\r\n}\r\n","import { IBulkChange, IChange, IObservableCollection, IObserver } from \"./interfaces\";\r\nimport { injectable } from \"inversify\";\r\n/**\r\n * The ObservableCollection class implements an observable collection\r\n * that allows adding and removing observers, as well as notifying them\r\n * of changes.\r\n *\r\n * @template T The type of items that this collection holds.\r\n */\r\n@injectable()\r\nexport class ObservableCollection<T> implements IObservableCollection<T> {\r\n    private items: T[] = [];\r\n    private observers: IObserver<T>[] = [];\r\n\r\n    /**\r\n\t* Adds an observer to the collection.\r\n\t*\r\n\t* If the observer is already added to the collection, it won't be added again.\r\n\t*\r\n\t* @param {IObserver<T>} observer - The observer to be added.\r\n\t* @returns {boolean} Returns true if the observer is successfully added; otherwise, if the observer is already in the collection, returns false.\r\n\t*/\r\n    addObserver (observer: IObserver<T>): boolean {\r\n        if (this.observers.includes(observer)) {\r\n            return false;  // Observer already exists, so don't add again\r\n        }\r\n        this.observers.push(observer);\r\n        return true;\r\n    }\r\n    /**\r\n\t * Removes an observer from the collection.\r\n\t *\r\n\t * @param {IObserver<T>} observer - The observer to be removed.\r\n\t * @returns {boolean} Returns true if the observer is found and removed; otherwise, false.\r\n\t */\r\n    removeObserver (observer: IObserver<T>): boolean {\r\n        const index = this.observers.indexOf(observer);\r\n        if (index > -1) {\r\n            this.observers.splice(index, 1);\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n    /**\r\n\t * Adds an item to the collection and notifies the observers of the addition.\r\n\t *\r\n\t * @param {T} item - The item to be added to the collection.\r\n\t */\r\n    addItem (item: T): void {\r\n        this.items.push(item);\r\n        this.notifyObservers({ type: \"add\", item });\r\n    }\r\n    /**\r\n\t* Adds multiple items to the collection and notifies the observers of the bulk addition.\r\n\t*\r\n\t* Observers are notified once, irrespective of the number of items added.\r\n\t*\r\n\t* @param {T[]} items - An array of items to be added to the collection.\r\n\t*/\r\n    addItems (items: T[]): void {\r\n        this.items.push(...items);\r\n        this.notifyObservers({ type: \"bulk-add\", items: items }); // Pass items\r\n    }\r\n    /**\r\n\t * Finds an item in the collection that satisfies the provided function.\r\n\t *\r\n\t * @param {(item: T) => boolean} conditionFunc - The function that new items must satisfy.\r\n\t * @returns {T | undefined} The first item in the collection that satisfies the provided function; otherwise, undefined.\r\n\t */\r\n    findItem (conditionFunc: (item: T) => boolean): T | undefined {\r\n        return this.items.find(conditionFunc);\r\n    }\r\n    /**\r\n\t * Removes an item from the collection and notifies the observers of the removal.\r\n\t *\r\n\t * @param {T} item - The item to be removed from the collection.\r\n\t */\r\n    removeItem (item: T): void {\r\n        const index = this.items.indexOf(item);\r\n        if (index > -1) {\r\n            this.items.splice(index, 1);\r\n            this.notifyObservers({ type: \"remove\", item });\r\n        }\r\n    }\r\n    /**\r\n\t* Removes multiple items from the collection and notifies the observers of the bulk removal.\r\n\t*\r\n\t* This method leverages the Set data structure to efficiently identify and remove items from the collection.\r\n\t* Observers are notified once, irrespective of the number of items removed.\r\n\t* If an item is not found in the collection, it is simply ignored.\r\n\t*\r\n\t* @param {T[]} itemsToRemove - An array of items to be removed from the collection.\r\n\t*/\r\n    removeItems (itemsToRemove: T[]): void {\r\n        const itemsToRemoveSet = new Set(itemsToRemove);\r\n        this.items = this.items.filter(item => !itemsToRemoveSet.has(item));\r\n        this.notifyObservers({ type: \"bulk-remove\", items: itemsToRemove });\r\n    }\r\n    /**\r\n\t* Notifies all the observers about a change in the collection.\r\n\t*\r\n\t* This method accepts changes that can either be of type `IChange` (a single item change)\r\n\t* or `IBulkChange` (multiple items change). Depending on the type of change, appropriate\r\n\t* logs are printed to the console.\r\n\t*\r\n\t* @private\r\n\t* @param {IChange<T> | IBulkChange<T>} change - The change that occurred in the collection.\r\n\t*/\r\n    private notifyObservers (change: IChange<T> | IBulkChange<T>): void {\r\n        for (const observer of this.observers) {\r\n            observer.notify(change as IChange<T>); // Here, we're casting it to 'any' to satisfy the type system.\r\n        }\r\n        if (\"item\" in change) {\r\n            // This block handles IChange\r\n        } else if (\"items\" in change) {\r\n            // This block handles IBulkChange\r\n        }\r\n    }\r\n    /**\r\n\t* Retrieves a copy of all items in the collection.\r\n\t*\r\n\t* @returns {T[]} An array containing all items currently in the collection.\r\n\t*/\r\n    getItems (): T[] {\r\n        return [...this.items];\r\n    }\r\n}\r\n","export class Result<A> {\r\n    private readonly value?: A;\r\n    private readonly error?: Error;\r\n\r\n    get isSuccess (): boolean {\r\n        return this.error === undefined;\r\n    }\r\n\r\n    get isFaulted (): boolean {\r\n        return this.error !== undefined;\r\n    }\r\n\r\n    constructor (valueOrError: A | Error) {\r\n        if (valueOrError instanceof Error) {\r\n            this.error = valueOrError;\r\n        } else {\r\n            this.value = valueOrError;\r\n        }\r\n    }\r\n\r\n    ifFail (defaultValue: A): A {\r\n        return this.isFaulted ? defaultValue : this.value!;\r\n    }\r\n\r\n    ifFailWithFunction (func: (err: Error) => A): A {\r\n        return this.isFaulted ? func(this.error!) : this.value!;\r\n    }\r\n\r\n    ifSucc (func: (val: A) => void): void {\r\n        if (this.isSuccess) {\r\n            func(this.value!);\r\n        }\r\n    }\r\n\r\n    match<R> (succ: (val: A) => R, fail: (err: Error) => R): R {\r\n        return this.isFaulted ? fail(this.error!) : succ(this.value!);\r\n    }\r\n\r\n    map<B> (func: (val: A) => B): Result<B> {\r\n        if (this.isSuccess) {\r\n            try {\r\n                const newValue = func(this.value!);\r\n                return new Result<B>(newValue);\r\n            } catch (error) {\r\n                // Ensure the error is of type Error\r\n                if (error instanceof Error) {\r\n                    return new Result<B>(error);\r\n                } else {\r\n                    // Create a new error from the caught exception if it's not an instance of Error\r\n                    return new Result<B>(new Error(String(error)));\r\n                }\r\n            }\r\n        }\r\n        return new Result<B>(this.error!);\r\n    }\r\n\r\n    async mapAsync<B> (func: (val: A) => Promise<B>): Promise<Result<B>> {\r\n        if (this.isSuccess) {\r\n            try {\r\n                const newValue = await func(this.value!);\r\n                return new Result<B>(newValue);\r\n            } catch (error) {\r\n                // Ensure the error is of type Error\r\n                if (error instanceof Error) {\r\n                    return new Result<B>(error);\r\n                } else {\r\n                    // Create a new error from the caught exception if it's not an instance of Error\r\n                    return new Result<B>(new Error(String(error)));\r\n                }\r\n            }\r\n        }\r\n        return new Result<B>(this.error!);\r\n    }\r\n\r\n    equals (other: Result<A>): boolean {\r\n        if (this.isFaulted && other.isFaulted) {\r\n            return this.error!.message === other.error!.message;\r\n        }\r\n        if (this.isSuccess && other.isSuccess) {\r\n            return this.value === other.value; // Nothing fancy here\r\n        }\r\n        return false;\r\n    }\r\n\r\n    toString (): string {\r\n        return this.isFaulted ? `(Error: ${this.error!.message})` : `(Value: ${this.value})`;\r\n    }\r\n\r\n\r\n    static handleError<T> (result: Result<T>): Error | undefined {\r\n        if (!result.isSuccess) {\r\n            return result.error;\r\n        }\r\n        return undefined;\r\n    }\r\n\r\n    static handleSuccess<T> (result: Result<T>): T | undefined {\r\n        if (result.isSuccess) {\r\n            return result.value;\r\n        }\r\n        return undefined;\r\n    }\r\n\r\n}\r\n","import { injectable } from \"inversify\";\r\nimport { RuleConstructor } from \"./Types\";\r\nimport { IRuleFactory, IValidationRule } from \"./interfaces\";\r\n\r\n/* export class RuleFactory implements IRuleFactory {\r\n    ruleConstructors: Map<string, RuleConstructor> = new Map();\r\n\r\n    registerRuleConstructor(type: string, constructor: RuleConstructor): void {\r\n        if (this.ruleConstructors.has(type)) {\r\n            throw new Error(`A rule constructor for type '${type}' is already registered.`);\r\n        }\r\n        this.ruleConstructors.set(type, constructor);\r\n    }\r\n\r\n    createRule(rule: IValidationRule): IValidationRule {\r\n        if (!rule.type) {\r\n            throw new Error(\"The rule does not have a type defined.\");\r\n        }\r\n\r\n        const constructor = this.ruleConstructors.get(rule.type);\r\n        if (!constructor) {\r\n            throw new Error(`Rule type '${rule.type}' is not recognized.`);\r\n        }\r\n\r\n        // We need to ensure that the constructor can handle the `attributes` property properly.\r\n        // This might involve converting `NamedNodeMap` to a suitable format if necessary.\r\n        return new constructor(rule.attribute, rule.message); // Adjust according to how your constructors are set up.\r\n    }\r\n}\r\n */\r\n@injectable()\r\nexport class RuleFactory implements IRuleFactory {\r\n    registerRuleConstructor(type: string, constructor: RuleConstructor): void {\r\n        throw new Error(\"Method not implemented.\");\r\n    }\r\n    createRule(rule: IValidationRule): IValidationRule {\r\n        throw new Error(\"Method not implemented.\");\r\n    }\r\n\r\n}\r\n","import { injectable } from \"inversify\";\r\nimport { IValidationRule, IValidationRuleRegistry } from \"./interfaces\";\r\n@injectable()\r\nexport class ValidationRuleRegistry implements IValidationRuleRegistry\r\n{\r\n    private rules: IValidationRule[] = [];\r\n    public validationAttribute: string = \"data-val\";\r\n\r\n    public addRule(rule: IValidationRule): void {\r\n        this.rules.push(rule);\r\n    }\r\n    public getRulesForControl(input: HTMLInputElement | HTMLTextAreaElement | HTMLSelectElement): IValidationRule[] {\r\n        const validationTypeAttribute = input.getAttribute(this.validationAttribute);\r\n        if (!validationTypeAttribute) return [];\r\n\r\n        // Split the validation types into an array, allowing for a single type or a comma-separated list\r\n        const validationTypes = validationTypeAttribute.split(\",\").map(type => type.trim());\r\n\r\n        // Filter and return rules that match any of the types in the list\r\n        return this.rules.filter(rule => validationTypes.includes(rule.type));\r\n    }\r\n\r\n}\r\n","import { Container } from \"inversify\";\r\nimport { TYPES } from \"./container-types\";\r\nimport { IAppEvents, IDebouncerFactory, IDecoratedLogger, IEventEmitter, IForm, IFormFactory, IFormManager, IInitializer, ILoggerService, IObservableCollection, IRuleFactory, IRuleService, IValidationRuleRegistry } from \"../interfaces\";\r\nimport { DebuggingLogger } from \"../logger/debuggingLogger\";\r\nimport { LoggerService } from \"../services/loggerService\";\r\nimport { Initializer } from \"../Initializer\";\r\nimport { EventEmitter } from \"../EventEmitter\";\r\nimport { FormFactory } from \"../FormFactory\";\r\nimport { ValidationService } from \"../services/ValidationService\";\r\nimport { ObservableCollection } from \"../ObservableCollection\";\r\nimport { DebouncerFactory } from \"../DebouncerFactory\";\r\nimport { FormManager } from \"../FormManager\";\r\nimport { ValidationRuleRegistry } from \"../ValidationRuleRegistry\";\r\nimport { RuleFactory } from \"../RuleFactory\";\r\n\r\n\r\n\r\n\r\n\r\n\r\nconst container = new Container();\r\n\r\ncontainer.bind<ILoggerService>(TYPES.Logger).to(LoggerService).inRequestScope();\r\ncontainer.bind<IEventEmitter<IAppEvents>>(TYPES.EventEmitter).to(EventEmitter<IAppEvents>).inRequestScope();\r\ncontainer.bind<IDecoratedLogger>(TYPES.DebuggingLogger).to(DebuggingLogger).inRequestScope();\r\ncontainer.bind<IInitializer>(TYPES.Initializer).to(Initializer).inSingletonScope();\r\ncontainer.bind<IFormManager>(TYPES.FormManager).to(FormManager).inSingletonScope();\r\ncontainer.bind<IFormFactory>(TYPES.FormFactory).to(FormFactory).inSingletonScope();\r\ncontainer.bind<ValidationService>(TYPES.ValidationService).to(ValidationService).inSingletonScope();\r\ncontainer.bind<IObservableCollection<IForm>>(TYPES.ObservableFormsCollection).to(ObservableCollection<IForm>).inSingletonScope();\r\ncontainer.bind<IDebouncerFactory>(TYPES.DebouncerFactory).to(DebouncerFactory).inSingletonScope();\r\ncontainer.bind<IRuleFactory>(TYPES.RuleFactory).to(RuleFactory).inSingletonScope();\r\n\r\n\r\ncontainer.bind<IValidationRuleRegistry>(TYPES.ValidationRuleRegistry).to(ValidationRuleRegistry).inSingletonScope();\r\nexport { container };\r\n","const TYPES = {\r\n    Options: Symbol.for(\"IOptions\"),\r\n    Logger: Symbol.for(\"ILoggerService\"),\r\n    EventEmitter: Symbol.for(\"IEventEmitter\"),\r\n    DebuggingLogger: Symbol.for(\"IDecoratedLogger\"),\r\n    Initializer: Symbol.for(\"IInitializer\"),\r\n    DebouncerFactory: Symbol.for(\"IDebouncerFactory\"),\r\n    FormManager: Symbol.for(\"IFormManager\"),\r\n    FormFactory: Symbol.for(\"IFormFactory\"),\r\n    ObservableFormsCollection: Symbol.for(\"IObservableCollection\"),\r\n    ValidationService: Symbol.for(\"IValidationService\"),\r\n    ValidationRuleRegistry: Symbol.for(\"IValidationRuleRegistry\"),\r\n    RuleFactory: Symbol.for(\"IRuleFactory\"),\r\n    RulesRegistry: Symbol.for(\"IRulesRegistry\")\r\n\r\n};\r\nexport { TYPES };\r\n","import { inject, injectable } from \"inversify\";\r\nimport { TYPES } from \"../di/container-types\";\r\nimport { IDecoratedLogger, ILoggerService, IOptions } from \"../interfaces\";\r\n\r\n@injectable()\r\nexport class DebuggingLogger implements IDecoratedLogger {\r\n    private readonly loggerProxy: ILoggerService;\r\n\r\n    constructor(@inject(TYPES.Logger) private readonly _logger: ILoggerService,\r\n        @inject(TYPES.Options) private readonly _options:IOptions) {\r\n        const handler: ProxyHandler<ILoggerService> = {\r\n            get: (target, propertyKey: string | symbol) => {\r\n                if (typeof propertyKey === \"symbol\") {\r\n                    return undefined;\r\n                }\r\n\r\n                const actualKey = propertyKey as keyof ILoggerService;\r\n                const originalProperty = target[actualKey];\r\n\r\n                if (typeof originalProperty === \"function\") {\r\n                    // Asserting the function type more clearly for TypeScript\r\n                    const originalMethod = originalProperty as (...args: any[]) => any;\r\n\r\n                    // If 'info' method, and debug is true, we want to intercept and change its behavior.\r\n                    if (propertyKey === \"info\" && !this._options.debug) {\r\n                        return (...args: any[]): void => { };\r\n                    }\r\n\r\n                    // For methods other than 'info' or if debug is true, we keep the original behavior.\r\n                    return originalMethod.bind(target); // now TypeScript recognizes the 'bind' method\r\n                }\r\n\r\n                // If dealing with non-function properties (like 'levels'), we return them as is.\r\n                return originalProperty;\r\n            }\r\n        };\r\n\r\n        this.loggerProxy = new Proxy(_logger, handler);\r\n    }\r\n\r\n    getLogger(): ILoggerService {\r\n        return this.loggerProxy;\r\n    }\r\n}\r\n","import { inject, injectable } from \"inversify\";\r\nimport { IChange, IForm, IObservableCollection, IValidationRule, IValidationRuleRegistry, IValidationService, IValidator } from \"../interfaces\";\r\nimport { TYPES } from \"../di/container-types\";\r\n\r\n\r\n\r\n\r\n@injectable()\r\nexport class ValidationService implements IValidationService {\r\n    private validators: IValidator[] = [];\r\n\r\n    private controlValidityState: WeakMap<HTMLElement, boolean> = new WeakMap();\r\n\r\n    constructor(\r\n        @inject(TYPES.ObservableFormsCollection) private readonly _observableFormsCollection: IObservableCollection<IForm>,\r\n        @inject(TYPES.ValidationRuleRegistry) private readonly _validationRulesRegistry: IValidationRuleRegistry) {\r\n        this._observableFormsCollection.addObserver(this);\r\n    }\r\n\r\n\r\n\r\n    async init(): Promise<void> {\r\n        // Initialize any needed properties or services here\r\n    }\r\n\r\n    async notify(change: IChange<IForm>): Promise<void> {\r\n        if (\"item\" in change) {\r\n            if (change.type === \"add\") {\r\n                console.log(\"Form added\");\r\n                // Get all form controls from the form\r\n                const controls = Array.from(change.item.elements);\r\n\r\n                // Iterate over each control to find validation attributes\r\n                controls.forEach((element) => {\r\n                    // Cast only if the element is the correct type\r\n                    if (element instanceof HTMLInputElement || element instanceof HTMLTextAreaElement || element instanceof HTMLSelectElement) {\r\n                        // Dynamically get the validation attribute from the registry\r\n                        const validationAttribute = this._validationRulesRegistry.validationAttribute;\r\n                        const validationTypesString = element.getAttribute(validationAttribute);\r\n                        if (validationTypesString) {\r\n                            // Split the string into individual validation types\r\n                            const validationTypes = validationTypesString.split(\",\").map(type => type.trim());\r\n                            validationTypes.forEach((validationType) => {\r\n                                // Here you would construct your IValidationRule\r\n                                // Ensuring you are not duplicating rules and also adding rules specific to this element if necessary\r\n                                // Implementation depends on your specific validation logic and how rules are determined\r\n                            });\r\n                        }\r\n                    }\r\n                });\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n    public async validateControl(input: HTMLInputElement | HTMLTextAreaElement | HTMLSelectElement): Promise<void> {\r\n        // Determine the rule(s) for the input by querying the ValidationRuleRegistry\r\n        const rules = this._validationRulesRegistry.getRulesForControl(input);\r\n\r\n        // Iterate over each rule and find a validator that can handle it\r\n        for (const rule of rules) {\r\n            const validator = this.validators.find(v => v.canHandle(rule));\r\n            if (!validator) {\r\n                throw new Error(`No validator can handle the rule of type: ${rule.type}`);\r\n            }\r\n            if (!validator.validate(input.value, rule)) {\r\n                // Handle validation failure, e.g., by displaying an error message\r\n            }\r\n        }\r\n        // Handle successful validation, e.g., by clearing any error messages\r\n    }\r\n\r\n\r\n    // TODO: Refactor put inside a UI Handler\r\n    private showValidationMessage(control: HTMLInputElement, message: string): void {\r\n        // Check if the control is contained within a parent element\r\n        const parentElement = control.parentElement;\r\n        if (!parentElement) {\r\n            console.warn(\"Control is not contained within a parent element\");\r\n            return; // Exit the function if there is no parent element\r\n        }\r\n\r\n        // Find any element within the parent that has the 'data-valmsg-for' attribute for the control's name\r\n        const validationMessageElement = this.getValidationMessageElement(control);\r\n\r\n\r\n        if (validationMessageElement) {\r\n            // We found the element for the validation message, regardless of its type (it could be a <span>, <div>, etc.)\r\n\r\n            // Update the validation message text\r\n            validationMessageElement.textContent = message;\r\n\r\n            // Update the classes to reflect the validation state\r\n            validationMessageElement.classList.remove(\"field-validation-valid\");\r\n            validationMessageElement.classList.add(\"field-validation-error\");\r\n        } else {\r\n            // If we couldn't find the element for the validation message, log a warning message\r\n            console.warn(`No validation message element found for control with name: ${control.name}`);\r\n        }\r\n    }\r\n\r\n    validateForm(form: IForm): void {\r\n        throw new Error(\"Method not implemented.\");\r\n    }\r\n\r\n    // TODO: Refactor put inside a UI Handler\r\n    private hideValidationMessage(control: HTMLInputElement): void {\r\n        // Check if the control is contained within a parent element\r\n        const parentElement = control.parentElement;\r\n        if (!parentElement) {\r\n            console.warn(\"Control is not contained within a parent element\");\r\n            return; // Exit the function if there is no parent element\r\n        }\r\n\r\n        // Find any element within the parent that has the 'data-valmsg-for' attribute for the control's name\r\n        const validationMessageElement = this.getValidationMessageElement(control);\r\n\r\n        if (validationMessageElement) {\r\n            // We found the element for the validation message, regardless of its type (it could be a <span>, <div>, etc.)\r\n\r\n            // Clear the validation message text\r\n            validationMessageElement.textContent = \"\";\r\n\r\n            // Update the classes to reflect the validation state\r\n            validationMessageElement.classList.remove(\"field-validation-error\");\r\n            validationMessageElement.classList.add(\"field-validation-valid\");\r\n        } else {\r\n            // If we couldn't find the element for the validation message, log a warning message\r\n            console.warn(`No validation message element found for control with name: ${control.name}`);\r\n        }\r\n    }\r\n\r\n    // TODO: Refactor put inside a UI Handler\r\n    private getValidationMessageElement(control: HTMLInputElement): HTMLElement | null {\r\n\r\n\r\n        let msgElement: HTMLElement | null = null;\r\n\r\n        //msgElement = control.parentNode//querySelector(`[data-valmsg-for=\"${control.name}\"]`);\r\n        if (control.parentElement) {\r\n            msgElement = control.parentElement.querySelector(`[data-valmsg-for=\"${control.name}\"]`);\r\n\r\n        }\r\n\r\n        return msgElement;\r\n    }\r\n\r\n}\r\n\r\n","import * as log from \"loglevel\";\r\nimport { injectable } from \"inversify\";\r\nimport { ILoggerService } from \"../interfaces\";\r\n\r\n@injectable()\r\nexport class LoggerService implements ILoggerService {\r\n    constructor () {\r\n        log.setLevel(log.levels.INFO);\r\n    }\r\n\r\n    get levels (): log.LogLevel {\r\n        return log.levels; // Assuming 'levels' is accessible and refers to the corresponding property in 'loglevel'.\r\n    }\r\n\r\n    get methodFactory (): log.MethodFactory {\r\n        return log.methodFactory; // Delegates to the actual 'methodFactory' in 'loglevel'.\r\n    }\r\n\r\n    getLevel (): 0 | 2 | 1 | 3 | 4 | 5 {\r\n        return log.getLevel();\r\n    }\r\n\r\n    trace (...msg: any[]): void {\r\n        log.trace(...msg);\r\n    }\r\n\r\n    debug (...msg: any[]): void {\r\n        log.debug(...msg);\r\n    }\r\n\r\n    log (...msg: any[]): void {\r\n    // 'log' method is not standard in 'loglevel'. If you need a generic log, you could map to a specific level, or remove this.\r\n        log.info(...msg); // Example mapping to 'info' level.\r\n    }\r\n\r\n    info (...msg: any[]): void {\r\n        log.info(...msg);\r\n    }\r\n\r\n    warn (...msg: any[]): void {\r\n        log.warn(...msg);\r\n    }\r\n\r\n    error (...msg: any[]): void {\r\n        log.error(...msg);\r\n    }\r\n\r\n    setLevel (level: log.LogLevelDesc, persist?: boolean): void {\r\n        log.setLevel(level, persist);\r\n    }\r\n\r\n    setDefaultLevel (level: log.LogLevelDesc): void {\r\n        log.setDefaultLevel(level);\r\n    }\r\n\r\n    resetLevel (): void {\r\n        log.setDefaultLevel(log.levels.SILENT); // or another appropriate default\r\n    }\r\n\r\n    enableAll (persist?: boolean): void {\r\n        log.enableAll(persist);\r\n    }\r\n\r\n    disableAll (persist?: boolean): void {\r\n        log.disableAll(persist);\r\n    }\r\n}\r\n","import { injectable } from \"inversify\";\r\nimport { IDebouncer } from \"../interfaces\";\r\n/**\r\n * Provides a mechanism to debounce function execution.\r\n *\r\n * The `Debouncer` class is responsible for delaying the execution of a function until after a certain time\r\n * has elapsed since the last time it was invoked. This is useful in situations where you want to\r\n * limit the rate at which a function is called, such as when responding to user input or window resizing.\r\n *\r\n * The class is marked with `@injectable`, allowing it to be used with dependency injection frameworks.\r\n */\r\n@injectable()\r\nexport class Debouncer implements IDebouncer {\r\n    constructor()\r\n    {\r\n    }\r\n    private timeoutId?: ReturnType<typeof setTimeout>;\r\n    /**\r\n     * Debounces the provided function.\r\n     *\r\n     * This method takes a function and a wait time in milliseconds. It will delay the execution of the function\r\n     * until after the wait time has elapsed since the last call to debounce. Subsequent calls to debounce\r\n     * with a new function will cancel any pending execution from previous calls.\r\n     *\r\n     * @template T - The type of the function to debounce.\r\n     * @param {T} func - The function to be debounced.\r\n     * @param {number} waitMilliseconds - The number of milliseconds to wait before calling the function.\r\n     */\r\n    debounce<T extends (...args: any[]) => void>(func: T, waitMilliseconds: number): void {\r\n        // Clear the existing timeout, if there is one\r\n        if (this.timeoutId !== undefined) {\r\n            clearTimeout(this.timeoutId);\r\n        }\r\n\r\n        // Start a new timeout\r\n        this.timeoutId = setTimeout(() => {\r\n            func();\r\n            this.timeoutId = undefined;\r\n        }, waitMilliseconds);\r\n    }\r\n    /**\r\n     * Cancels any pending debounced function calls.\r\n     *\r\n     * If there is a debounced function that has not yet been executed, calling this method will prevent\r\n     * that function from being called.\r\n     */\r\n    cancel(): void {\r\n        clearTimeout(this.timeoutId);\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","import \"reflect-metadata\";\r\nimport { container } from \"./di/container-config\";\r\nimport { TYPES } from \"./di/container-types\";\r\nimport { IDecoratedLogger, IInitializer, IOptions } from \"./interfaces\";\r\nexport default class UnobtrusiveValidation {\r\n    _logger: IDecoratedLogger | undefined;\r\n    _initializer: IInitializer | undefined;\r\n    _options?: Partial<IOptions>;\r\n\r\n    constructor(options?: Partial<IOptions>) {\r\n        this._options = options; // Save the passed options\r\n    }\r\n\r\n    async init(): Promise<void> {\r\n        // Merge the provided options with defaults\r\n        const finalOptions: IOptions = {\r\n            debug: false,\r\n            logLevel: \"info\",\r\n            ...this._options // Use the options saved in the constructor\r\n        };\r\n\r\n        if (container.isBound(TYPES.Options)) {\r\n            container.unbind(TYPES.Options);\r\n        }\r\n        container.bind<IOptions>(TYPES.Options).toConstantValue(finalOptions);\r\n\r\n        this._logger = container.get<IDecoratedLogger>(TYPES.DebuggingLogger);\r\n        this._initializer = container.get<IInitializer>(TYPES.Initializer);\r\n        this._logger.getLogger().info(\"UnobtrusiveValidation initialized\");\r\n        await this._initializer.init();\r\n    }\r\n}\r\n\r\n\r\n\r\nasync function initializeUnobtrusiveValidation(): Promise<void> {\r\n    const defaultOptions: Partial<IOptions> = {\r\n        debug: true\r\n    };\r\n\r\n    // Pass the defaultOptions to the constructor\r\n    const validationInstance = new UnobtrusiveValidation(defaultOptions);\r\n    await validationInstance.init();\r\n}\r\ninitializeUnobtrusiveValidation();\r\n"],"names":[],"sourceRoot":""}